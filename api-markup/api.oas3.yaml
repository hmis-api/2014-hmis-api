openapi: 3.0.0
info:
  title: 2014 HMIS
  version: 1.1.1
servers:
  - url: 'https://www.hslynk.com/hmis-clientapi/rest/v2014'
paths:
  /clients:
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    Clients:
                      pagination:
                        from: 0
                        returned: 1
                        total: 3
                        maximum: 30
                        sort: {}
                      clients:
                        - clientId: 717661f4-eaa3-4298-8739-789ab8a1f3d1
                          dedupClientId: b7eb6be3-1ed3-49f4-a0c9-ae78d7f386fd
                          firstName: 'FirstName '
                          middleName: Middle Name
                          lastName: LAST NAME
                          nameSuffix: NS
                          nameDataQuality: '1'
                          ssn: 'ssn      '
                          ssnDataQuality: '1'
                          dob: 1458035236115
                          dobDataQuality: '1'
                          race: '1'
                          ethnicity: '1'
                          gender: '1'
                          otherGender: 'Test      '
                          dateCreated: 03-15-2016
                          phoneNumber: 1-541-754-3010
                          emailAddress: Jeanette@gmail.com
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for client.  Returns a list of client ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  client:
                    clientId: 717661f4-eaa3-4298-8739-789ab8a1f3d1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
                    1)  an SSN value submitted as an empty string (not null) will be treatedand stored by HSLynk as a nullified/deleted SSN data element
                    2) a full 9 digit SSN may be submitted
                    3) a partial SSN may be submitted, but one or more lower case 'x'(s) must be present in the locations of the missing actual SSN digits.
      operationId: POST_clients
      requestBody:
        content:
          application/json:
            schema:
              example:
                  client:
                    firstName: ' first name'
                    middleName: Middle Name
                    lastName: LAST NAME
                    nameSuffix: NS
                    nameDataQuality: '1'
                    ssn: 123-45-6789
                    ssnDataQuality: '1'
                    dob: 1458035236115
                    dobDataQuality: '1'
                    race: '1'
                    ethnicity: '1'
                    gender: '1'
                    otherGender: 'Test      '
                    dateCreated: 03-15-2016
                    phoneNumber: 1-541-754-3010
                    emailAddress: Jeanette@gmail.com
        required: true
  '/clients/{clientid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    client:
                      clientId: 717661f4-eaa3-4298-8739-789ab8a1f3d1
                      firstName: ' first name'
                      middleName: Middle Name
                      lastName: LAST NAME
                      nameSuffix: NS
                      nameDataQuality: '1'
                      ssn: 123-45-6789
                      ssnDataQuality: '1'
                      dob: 1458035236115
                      dobDataQuality: '1'
                      race: '1'
                      ethnicity: '1'
                      gender: '1'
                      otherGender: 'Test      '
                      dateCreated: 03-15-2016
                      phoneNumber: 1-541-754-3010
                      emailAddress: Jeanette@gmail.com
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a client using a URI resource parameter/ID.
      operationId: GET_clients-clientid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: |
                      Updates a specific client specified by the URI resource parameter/ID.
                      1)  an SSN value submitted as an empty string (not null) will be treate dand stored by HSLynk as a nullified/deleted SSN data element
                      2) a full 9 digit SSN may be submitted
                      3) a partial SSN may be submitted, but one or more lower case 'x'(s) must be present in the locations of the missing actual SSN digits.
      operationId: PUT_clients-clientid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  client:
                    firstName: ' first name'
                    middleName: Middle Name
                    lastName: LAST NAME
                    nameSuffix: NS
                    nameDataQuality: '1'
                    ssn: 123-45-6789
                    ssnDataQuality: '1'
                    dob: 1458035236115
                    dobDataQuality: '1'
                    race: '1'
                    ethnicity: '1'
                    gender: '1'
                    otherGender: 'Test      '
                    dateCreated: 03-15-2016
                    phoneNumber: 1-541-754-3010
                    emailAddress: Jeanette@gmail.com
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific client specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    enrollments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollments:
                        - enrollmentId: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
                          continuouslyhomelessoneyear: '1'
                          disablingcondition: '0'
                          entrydate: 1458035288480
                          householdid: 14aa2237-f147-4751-997b-040d9c023998
                          housingstatus: '1'
                          monthshomelesspastthreeyears: '7'
                          monthshomelessthistime: '1'
                          otherresidenceprior: '1'
                          personalid: a8b1ac45-f3c9-4d12-9ac7-46bccbf14a7e
                          projectentryid: 93284e88-515c-4bb8-9246-b1f419106649
                          relationshiptohoh: '2'
                          residenceprior: '2'
                          residencepriorlengthofstay: '2'
                          statusdocumented: '1'
                          yearshomeless: 2
                          dateCreated: 03-15-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollment.  Returns a list of enrollment ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  enrollment:
                    enrollmentid: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a enrollment
      operationId: POST_clients-clientid-enrollments
      requestBody:
        content:
          application/json:
            schema:
              example:
                  enrollment:
                    continuouslyhomelessoneyear: 1
                    disablingcondition: 0
                    entrydate: 1458035288480
                    householdid: 14aa2237-f147-4751-997b-040d9c023998
                    housingstatus: 1
                    monthshomelesspastthreeyears: 7
                    monthshomelessthistime: 1
                    otherresidenceprior: '1'
                    personalid: a8b1ac45-f3c9-4d12-9ac7-46bccbf14a7e
                    projectentryid: 93284e88-515c-4bb8-9246-b1f419106649
                    relationshiptohoh: 2
                    residenceprior: 2
                    residencepriorlengthofstay: 2
                    statusdocumented: 1
                    yearshomeless: 2
                    dateCreated: 03-15-2016
        required: true
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    enrollment:
                      enrollmentid: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
                      continuouslyhomelessoneyear: 1
                      disablingcondition: 0
                      entrydate: 1458035288480
                      householdid: 14aa2237-f147-4751-997b-040d9c023998
                      housingstatus: 1
                      monthshomelesspastthreeyears: 7
                      monthshomelessthistime: 1
                      otherresidenceprior: '1'
                      personalid: a8b1ac45-f3c9-4d12-9ac7-46bccbf14a7e
                      projectentryid: 93284e88-515c-4bb8-9246-b1f419106649
                      relationshiptohoh: 2
                      residenceprior: 2
                      residencepriorlengthofstay: 2
                      statusdocumented: 1
                      yearshomeless: 2
                      dateCreated: 03-15-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a enrollment using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific enrollment specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  enrollment:
                    continuouslyhomelessoneyear: 1
                    disablingcondition: 0
                    entrydate: 1458035288480
                    householdid: 14aa2237-f147-4751-997b-040d9c023998
                    housingstatus: 1
                    monthshomelesspastthreeyears: 7
                    monthshomelessthistime: 1
                    otherresidenceprior: '1'
                    personalid: a8b1ac45-f3c9-4d12-9ac7-46bccbf14a7e
                    projectentryid: 93284e88-515c-4bb8-9246-b1f419106649
                    relationshiptohoh: 2
                    residenceprior: 2
                    residencepriorlengthofstay: 2
                    statusdocumented: 1
                    yearshomeless: 2
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific enrollment specified by the URI resource
        parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/commercialsexualexploitations':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    commercialSexualExploitations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      CommercialSexualExploitations:
                        - commercialsexualexploitationId: 78285647-ccda-4d09-847d-2f07fa683f50
                          askedorforcedtoexchangeforsex: 1
                          countofexchangeforsex: 4
                          exchangeforsexpastthreemonths: 8
                          dataCollectionStage: 1
                          informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for commercialsexualexploitation.  Returns a list of
        commercialsexualexploitation ids, based on the query parameters sent. 
        The query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-commercialsexualexploitations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  commercialSexualExploitation:
                    commercialsexualexploitationId: 78285647-ccda-4d09-847d-2f07fa683f50
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a commercialsexualexploitation
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-commercialsexualexploitations
      requestBody:
        content:
          application/json:
            schema:
              example:
                  commercialSexualExploitation:
                    askedorforcedtoexchangeforsex: 1
                    countofexchangeforsex: 4
                    exchangeforsexpastthreemonths: 8
                    dataCollectionStage: 1
                    informationDate: 03-16-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/commercialsexualexploitations/{commercialsexualexploitationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    commercialSexualExploitation:
                      commercialsexualexploitationId: 78285647-ccda-4d09-847d-2f07fa683f50
                      askedorforcedtoexchangeforsex: 1
                      countofexchangeforsex: 4
                      exchangeforsexpastthreemonths: 8
                      dataCollectionStage: 1
                      informationDate: 03-16-2016
                      dateCreated: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a commercialsexualexploitation using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-commercialsexualexploitations-commercialsexualexploitationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific commercialsexualexploitation specified by the URI
        resource parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-commercialsexualexploitations-commercialsexualexploitationid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  commercialSexualExploitation:
                    askedorforcedtoexchangeforsex: 1
                    countofexchangeforsex: 4
                    exchangeforsexpastthreemonths: 8
                    dataCollectionStage: 1
                    informationDate: 03-16-2016
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific commercialsexualexploitation specified by the URI
        resource parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-commercialsexualexploitations-commercialsexualexploitationid
    parameters:
      - name: commercialsexualexploitationid
        in: path
        required: true
        schema:
          type: string
        description: Commercialsexualexploitation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    Dateofengagements:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      dateofengagements:
                        - dateofengagementId: f1901be5-d11e-4158-9ece-f36252e2e654
                          dateofengagement: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for dateofengagement.  Returns a list of dateofengagement ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-dateofengagements
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  dateofengagement:
                    dateofengagementId: 74a9912a-f8fc-40b7-83cb-980e94b10686
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a dateofengagement
      operationId: POST_clients-clientid-enrollments-enrollmentid-dateofengagements
      requestBody:
        content:
          application/json:
            schema:
              example:
                  dateofengagement:
                    dateofengagement: 1458127562192
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements/{dateofengagementid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    dateofengagement:
                      dateofengagementId: 74a9912a-f8fc-40b7-83cb-980e94b10686
                      dateofengagement: 1458127562192
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a dateofengagement using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-dateofengagements-dateofengagementid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific dateofengagement specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-dateofengagements-dateofengagementid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  dateofengagement:
                    dateofengagement: 1458127562192
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific dateofengagement specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-dateofengagements-dateofengagementid
    parameters:
      - name: dateofengagementid
        in: path
        required: true
        schema:
          type: string
        description: Dateofengagement Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/disabilities':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    disabilitiesList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      disabilitiesList:
                        - disabilitiesId: be340706-eb5c-4794-a4c1-91b7d32c78e3
                          disabilityresponse: 1732327101
                          disabilitytype: '6'
                          documentationonfile: '99'
                          indefiniteandimpairs: '1'
                          pathhowconfirmed: '99'
                          receivingservices: '0'
                          pathsmiinformation: '8'
                          dataCollectionStage: 1
                          informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for disability.  Returns a list of disability ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-disabilities
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  disabilities:
                    disabilitiesId: 813153a1-860a-43bd-b7dd-b938062ffaff
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a disability
      operationId: POST_clients-clientid-enrollments-enrollmentid-disabilities
      requestBody:
        content:
          application/json:
            schema:
              example:
                  InformationDate: '1990-12-31'
                  DisabilityResponse: 1
                  DisabilityType: 6
                  DocumentationOnFile: 99
                  IndefiniteAndImpairs: 1
                  PATHHowConfirmed: 99
                  ReceivingServices: 0
                  PathSMInformation: 8
                  DataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/disabilities/{disabilityid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    disabilities:
                      disabilitiesId: 813153a1-860a-43bd-b7dd-b938062ffaff
                      disabilityresponse: -1732327101
                      disabilitytype: 6
                      documentationonfile: 99
                      indefiniteandimpairs: 1
                      pathhowconfirmed: 99
                      receivingservices: 0
                      pathsmiinformation: 8
                      dataCollectionStage: 1
                      informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a disability using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-disabilities-disabilityid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific disability specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-disabilities-disabilityid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  InformationDate: '1990-12-31'
                  DisabilityResponse: 1
                  DisabilityType: 6
                  DocumentationOnFile: 99
                  IndefiniteAndImpairs: 1
                  PATHHowConfirmed: 99
                  ReceivingServices: 0
                  PathSMInformation: 8
                  DataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific disability specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-disabilities-disabilityid
    parameters:
      - name: disabilityid
        in: path
        required: true
        schema:
          type: string
        description: Disability Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    DomesticViolences:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      domesticViolences:
                        - domesticViolenceId: 81b6e3f4-5d11-47c6-93c5-5b13c0c2779e
                          domesticviolencevictim: '1'
                          dataCollectionStage: 1
                          informationDate: 03-16-2016
                          whenoccurred: '3'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for domesticviolence.  Returns a list of domesticviolence ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-domesticviolences
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  domesticViolence:
                    domesticViolenceId: 73f7cd052ed1458eb445f26741d3f4ad
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a domesticviolence
      operationId: POST_clients-clientid-enrollments-enrollmentid-domesticviolences
      requestBody:
        content:
          application/json:
            schema:
              example:
                  domesticViolence:
                    informationDate: 03-16-2017
                    domesticViolenceVictim: 1
                    whenOccurred: 3
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences/{domesticviolenceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    domesticViolence:
                      domesticViolenceId: 73f7cd052ed1458eb445f26741d3f4ad
                      informationDate: 03-16-2017
                      domesticViolenceVictim: 1
                      whenOccurred: 3
                      dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a domesticviolence using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-domesticviolences-domesticviolenceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific domesticviolence specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-domesticviolences-domesticviolenceid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  domesticViolence:
                    informationDate: 03-16-2017
                    domesticViolenceVictim: 1
                    whenOccurred: 3
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific domesticviolence specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-domesticviolences-domesticviolenceid
    parameters:
      - name: domesticviolenceid
        in: path
        required: true
        schema:
          type: string
        description: Domesticviolence Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/employments':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    employments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      employments:
                        - employmentId: 3d01bf85-75f0-4ee3-89aa-c603380afea2
                          employed: 9
                          employmentType: 2
                          notEmployedReason: 2
                          dataCollectionStage: 1
                          informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for employment.  Returns a list of employment ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-employments
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  employment:
                    employmentId: 3d01bf85-75f0-4ee3-89aa-c603380afea2
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a employment
      operationId: POST_clients-clientid-enrollments-enrollmentid-employments
      requestBody:
        content:
          application/json:
            schema:
              example:
                  employment:
                    employed: '9'
                    employmentType: '2'
                    notEmployedReason: '2'
                    informationDate: 03-16-2016
                    dataCollectionStage: '1'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/employments/{employmentid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    employment:
                      employmentId: 3d01bf85-75f0-4ee3-89aa-c603380afea2
                      employed: '9'
                      employmentType: '2'
                      notEmployedReason: '2'
                      dataCollectionStage: 1
                      informationDate: 1458124933736
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a employment using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-employments-employmentid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific employment specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-employments-employmentid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  employment:
                    employed: '9'
                    employmentType: '2'
                    notEmployedReason: '2'
                    informationDate: 03-16-2016
                    dataCollectionStage: '1'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific employment specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-employments-employmentid
    parameters:
      - name: employmentid
        in: path
        required: true
        schema:
          type: string
        description: Employment Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    enrollmentCocs:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollmentCocs:
                        - enrollmentCocId: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
                          dataCollectionStage: 1
                          informationDate: 03-15-2016
                          clientCode: abc-123
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollmentcoc.  Returns a list of enrollmentcoc ids, based
        on the query parameters sent.  The query parameters are cumulative, so
        each additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-enrollmentcocs
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  enrollmentCoc:
                    enrollmentCocId: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
                    clientCode: abc-123
                    dataCollectionStage: 1
                    informationDate: 03-15-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a enrollmentcoc
      operationId: POST_clients-clientid-enrollments-enrollmentid-enrollmentcocs
      requestBody:
        content:
          application/json:
            schema:
              example:
                  enrollmentCoc:
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    clientCode: abc-123
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs/{enrollmentcocid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    enrollmentCoc:
                      enrollmentCocId: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
                      clientCode: abc-123
                      dataCollectionStage: 1
                      informationDate: 03-15-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a enrollmentcoc using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-enrollmentcocs-enrollmentcocid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific enrollmentcoc specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-enrollmentcocs-enrollmentcocid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  enrollmentCoc:
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    clientCode: abc-123
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific enrollmentcoc specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-enrollmentcocs-enrollmentcocid
    parameters:
      - name: enrollmentcocid
        in: path
        required: true
        schema:
          type: string
        description: Enrollmentcoc Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json: 
              schema:
                example:
                  exits:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exits:
                        - exitId: 14c70311-2701-4c74-af47-2bb4fdfe48cd
                          exitDate: '03-17-2016'
                          destination: 24
                          otherDestination: Test destination
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exit.  Returns a list of exit ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  exitID: 9d57c33f-cc4e-47ff-8bbd-0580e7a0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exit
      operationId: POST_clients-clientid-enrollments-enrollmentid-exits
      requestBody:
        content:
          application/json:
            schema:
              example:
                  exitDate: '03-17-2016'
                  destination: 24
                  otherDestination: Test destination
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                  exitID: 9d57c33f-cc4e-47ff-8bbd-0580e7a0
                  exitDate: '03-17-2016'
                  destination: 24
                  otherDestination: Test destination
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exit using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits-exitid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific exit specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-exits-exitid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  exitDate: '03-17-2016'
                  destination: 24
                  otherDestination: Test destination
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific exit specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/connectionwithsoars':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    connectionwithsoars:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      connectionwithsoars:
                        - connectionwithsoarId: 14c70311-2701-4c74-af47-2bb4fdfe48cd
                          connectionwithsoar: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for connectionwithsoar.  Returns a list of connectionwithsoar
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-connectionwithsoars
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  connectionwithsoar:
                    connectionwithsoarId: 14c70311-2701-4c74-af47-2bb4fdfe48cd
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a connectionwithsoar
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-connectionwithsoars
      requestBody:
        content:
          application/json:
            schema:
              example:
                  connectionwithsoar:
                    connectionwithsoar: 1
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/connectionwithsoars/{connectionwithsoarid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    connectionwithsoar:
                      connectionwithsoarId: 14c70311-2701-4c74-af47-2bb4fdfe48cd
                      connectionwithsoar: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a connectionwithsoar using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-connectionwithsoars-connectionwithsoarid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific connectionwithsoar specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-connectionwithsoars-connectionwithsoarid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  connectionwithsoar:
                    connectionwithsoar: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific connectionwithsoar specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-connectionwithsoars-connectionwithsoarid
    parameters:
      - name: connectionwithsoarid
        in: path
        required: true
        schema:
          type: string
        description: Connectionwithsoar Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exithousingassessments':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    exithousingassessments:
                      pagination:
                        from: 0
                        returned: 2
                        total: 2
                        maximum: 30
                        sort: {}
                      exithousingassessments:
                        - exithousingassessmentId: a246781e-f38a-4b41-80a4-7cc0b28f74b1
                          housingassessment: 0
                          subsidyinformation: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exithousingassessment.  Returns a list of
        exithousingassessment ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassessments
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  housingassessment:
                    housingassessmentId: 4233d1db-4961-4730-a690-3bc17c3e310a
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exithousingassessment
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassessments
      requestBody:
        content:
          application/json:
            schema:
              example:
                  housingassessment:
                    housingassessment: 1
                    subsidyinformation: 2
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exithousingassessments/{exithousingassessmentid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    housingassessment:
                      housingassessmentId: 4233d1db-4961-4730-a690-3bc17c3e310a
                      housingassessment: 1
                      subsidyinformation: 2
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exithousingassessment using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassessments-exithousingassessmentid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific exithousingassessment specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassessments-exithousingassessmentid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  housingassessment:
                    housingassessment: 1
                    subsidyinformation: 2
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific exithousingassessment specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassessments-exithousingassessmentid
    parameters:
      - name: exithousingassessmentid
        in: path
        required: true
        schema:
          type: string
        description: Exithousingassessment Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitplansactions':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    exitPlansActionsList:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      exitPlansActionsList:
                        - exitPlansActionsId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          assistancemainstreambenefits: 1
                          exitcounseling: 1
                          furtherfollowupservices: 2
                          otheraftercareplanoraction: 3
                          permanenthousingplacement: 1
                          resourcepackage: 2
                          scheduledfollowupcontacts: 3
                          temporaryshelterplacement: 2
                          writtenaftercareplan: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitplansaction.  Returns a list of exitplansaction ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exitplansactions
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  exitPlansActions:
                    exitPlansActionsId: 4233d1db-4961-4730-a690-3bc17c3e310a
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exitplansaction
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-exitplansactions
      requestBody:
        content:
          application/json:
            schema:
              example:
                  exitPlansActions:
                    assistancemainstreambenefits: 1
                    exitcounseling: 1
                    furtherfollowupservices: 2
                    otheraftercareplanoraction: 3
                    permanenthousingplacement: 1
                    resourcepackage: 2
                    scheduledfollowupcontacts: 3
                    temporaryshelterplacement: 2
                    writtenaftercareplan: 1
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitplansactions/{exitplansactionid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    exitPlansActions:
                      exitPlansActionsId: 4233d1db-4961-4730-a690-3bc17c3e310a
                      assistancemainstreambenefits: 1
                      exitcounseling: 1
                      furtherfollowupservices: 2
                      otheraftercareplanoraction: 3
                      permanenthousingplacement: 1
                      resourcepackage: 2
                      scheduledfollowupcontacts: 3
                      temporaryshelterplacement: 2
                      writtenaftercareplan: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exitplansaction using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exitplansactions-exitplansactionid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific exitplansaction specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-exitplansactions-exitplansactionid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  exitPlansActions:
                    assistancemainstreambenefits: 1
                    exitcounseling: 1
                    furtherfollowupservices: 2
                    otheraftercareplanoraction: 3
                    permanenthousingplacement: 1
                    resourcepackage: 2
                    scheduledfollowupcontacts: 3
                    temporaryshelterplacement: 2
                    writtenaftercareplan: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific exitplansaction specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-exitplansactions-exitplansactionid
    parameters:
      - name: exitplansactionid
        in: path
        required: true
        schema:
          type: string
        description: Exitplansaction Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/familyreunifications':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    familyReunifications:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      familyReunifications:
                        - familyReunificationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          familyreunificationachieved: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for familyreunification.  Returns a list of familyreunification
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-familyreunifications
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  familyReunification:
                    familyReunificationId: a87d4463-7e25-4df8-a079-b5f3dcecc6cc
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a familyreunification
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-familyreunifications
      requestBody:
        content:
          application/json:
            schema:
              example:
                  familyReunification:
                    familyreunificationachieved: 0
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/familyreunifications/{familyreunificationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    familyReunification:
                      familyReunificationId: a87d4463-7e25-4df8-a079-b5f3dcecc6cc
                      familyreunificationachieved: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a familyreunification using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-familyreunifications-familyreunificationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific familyreunification specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-familyreunifications-familyreunificationid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  familyReunification:
                    familyreunificationachieved: 0
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific familyreunification specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-familyreunifications-familyreunificationid
    parameters:
      - name: familyreunificationid
        in: path
        required: true
        schema:
          type: string
        description: Familyreunification Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/housingassessmentdispositions':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    HousingAssessmentDispositions:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      HousingAssessmentDispositions:
                        - housingassessmentDispositionId: ff97e480-75ca-4040-b3a2-59078cadf548
                          assessmentdisposition: 1
                          otherdisposition: some disposition
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for housingassessmentdisposition.  Returns a list of
        housingassessmentdisposition ids, based on the query parameters sent. 
        The query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  housingAssessmentDisposition:
                    housingAssessmentDispositionId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a housingassessmentdisposition
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions
      requestBody:
        content:
          application/json:
            schema:
              example:
                  housingAssessmentDisposition:
                    assessmentdisposition: 0
                    otherdisposition: otherdisposition
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/housingassessmentdispositions/{housingassessmentdispositionid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    housingAssessmentDisposition:
                      housingAssessmentDispositionId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      assessmentdisposition: 0
                      otherdisposition: otherdisposition
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a housingassessmentdisposition using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions-housingassessmentdispositionid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific housingassessmentdisposition specified by the URI
        resource parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions-housingassessmentdispositionid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  housingAssessmentDisposition:
                    assessmentdisposition: 0
                    otherdisposition: otherdisposition
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific housingassessmentdisposition specified by the URI
        resource parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions-housingassessmentdispositionid
    parameters:
      - name: housingassessmentdispositionid
        in: path
        required: true
        schema:
          type: string
        description: Housingassessmentdisposition Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/projectcompletionstatuses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    projectCompletionStatuses:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      projectCompletionStatuses:
                        - projectCompletionStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          earlyExitReason: 0
                          projectCompletionStatus: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for projectcompletionstatus.  Returns a list of
        projectcompletionstatus ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-projectcompletionstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  projectCompletionStatus:
                    projectCompletionStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a projectcompletionstatus
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-projectcompletionstatuses
      requestBody:
        content:
          application/json:
            schema:
              example:
                  projectCompletionStatus:
                    earlyExitReason: 0
                    projectCompletionStatus: 1
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/projectcompletionstatuses/{projectcompletionstatusid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    projectCompletionStatus:
                      projectCompletionStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      earlyExitReason: 0
                      projectCompletionStatus: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a projectcompletionstatus using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-projectcompletionstatuses-projectcompletionstatusid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific projectcompletionstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-projectcompletionstatuses-projectcompletionstatusid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  projectCompletionStatus:
                    earlyExitReason: 0
                    projectCompletionStatus: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific projectcompletionstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-projectcompletionstatuses-projectcompletionstatusid
    parameters:
      - name: projectcompletionstatusid
        in: path
        required: true
        schema:
          type: string
        description: Projectcompletionstatus Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/formerwardchildwelfares':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    formerwardchildwelfares:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      formerwardchildwelfares:
                        - childwelfaremonths: 0
                          childwelfareyears: 0
                          formerwardchildwelfare: 0
                          informationDate: 03-15-2016
                          dataCollectionStage: 1
                          formerwardchildwelfareid: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for formerwardchildwelfare.  Returns a list of
        formerwardchildwelfare ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-formerwardchildwelfares
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  formerwardchildwelfare:
                    formerwardchildwelfareid: 5c025aea-ecdc-4902-b451-4436b64a83ea
                    childwelfaremonths: 0
                    childwelfareyears: 0
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    formerwardchildwelfare: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a formerwardchildwelfare
      operationId: POST_clients-clientid-enrollments-enrollmentid-formerwardchildwelfares
      requestBody:
        content:
          application/json:
            schema:
              example:
                  formerwardchildwelfare:
                    childwelfaremonths: 0
                    childwelfareyears: 0
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    formerwardchildwelfare: 0
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/formerwardchildwelfares/{formerwardchildwelfareid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    formerwardchildwelfare:
                      formerwardchildwelfareid: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      childwelfaremonths: 0
                      childwelfareyears: 0
                      informationDate: 03-15-2016
                      dataCollectionStage: 1
                      formerwardchildwelfare: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a formerwardchildwelfare using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-formerwardchildwelfares-formerwardchildwelfareid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific formerwardchildwelfare specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-formerwardchildwelfares-formerwardchildwelfareid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  formerwardchildwelfare:
                    childwelfaremonths: 0
                    childwelfareyears: 0
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    formerwardchildwelfare: 0
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific formerwardchildwelfare specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-formerwardchildwelfares-formerwardchildwelfareid
    parameters:
      - name: formerwardchildwelfareid
        in: path
        required: true
        schema:
          type: string
        description: Formerwardchildwelfare Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/formerwardjuvenilejustices':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    formerwardjuvenilejustices:
                      pagination:
                        from: 0
                        returned: 1
                        total: 0
                        maximum: 30
                        sort: {}
                      formerwardjuvenilejustices:
                        - formerwardjuvenilejusticeid: ee9c668d-6d77-425d-b734-e3f6e858c445
                          formerwardjuvenilejustice: 0
                          juvenilejusticemonths: 0
                          informationDate: 03-15-2016
                          dataCollectionStage: 1
                          juvenilejusticeyears: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for formerwardjuvenilejustice.  Returns a list of
        formerwardjuvenilejustice ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-formerwardjuvenilejustices
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  formerwardjuvenilejustice:
                    formerwardjuvenilejusticeid: ee9c668d-6d77-425d-b734-e3f6e858c445
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a formerwardjuvenilejustice
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-formerwardjuvenilejustices
      requestBody:
        content:
          application/json:
            schema:
              example:
                  formerwardjuvenilejustice:
                    formerwardjuvenilejustice: 0
                    juvenilejusticemonths: 0
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    juvenilejusticeyears: 0
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/formerwardjuvenilejustices/{formerwardjuvenilejusticeid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    formerwardjuvenilejustice:
                      formerwardjuvenilejusticeid: ee9c668d-6d77-425d-b734-e3f6e858c445
                      formerwardjuvenilejustice: 0
                      juvenilejusticemonths: 0
                      informationDate: 03-15-2016
                      dataCollectionStage: 1
                      juvenilejusticeyears: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a formerwardjuvenilejustice using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-formerwardjuvenilejustices-formerwardjuvenilejusticeid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific formerwardjuvenilejustice specified by the URI
        resource parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-formerwardjuvenilejustices-formerwardjuvenilejusticeid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  formerwardjuvenilejustice:
                    formerwardjuvenilejustice: 0
                    juvenilejusticemonths: 0
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    juvenilejusticeyears: 0
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific formerwardjuvenilejustice specified by the URI
        resource parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-formerwardjuvenilejustices-formerwardjuvenilejusticeid
    parameters:
      - name: formerwardjuvenilejusticeid
        in: path
        required: true
        schema:
          type: string
        description: Formerwardjuvenilejustice Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthinsurances':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    healthInsurances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthInsurances:
                        - healthInsuranceId: 50a50523-e1ba-458f-a37e-66c9922b0204
                          cobra: -918045701
                          employerprovided: 49269345
                          insurancefromanysource: 9
                          medicaid: 99
                          medicare: 99
                          nocobrareason: 99
                          noemployerprovidedreason: 3
                          nomedicaidreason: 8
                          nomedicarereason: 2
                          noprivatepayreason: 8
                          noschipreason: 2
                          nostatehealthinsreason: 1
                          novamedreason: 1
                          privatepay: 1
                          schip: 0
                          statehealthins: 99
                          vamedicalservices: 1
                          informationDate: 03-15-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthinsurance.  Returns a list of healthinsurance ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-healthinsurances
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  healthInsurance:
                    healthInsuranceId: 50a50523-e1ba-458f-a37e-66c9922b0204
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a healthinsurance
      operationId: POST_clients-clientid-enrollments-enrollmentid-healthinsurances
      requestBody:
        content:
          application/json:
            schema:
              example:
                  healthInsurance:
                    cobra: -918045701
                    employerprovided: 49269345
                    insurancefromanysource: 9
                    medicaid: 99
                    medicare: 99
                    nocobrareason: 99
                    noemployerprovidedreason: 3
                    nomedicaidreason: 8
                    nomedicarereason: 2
                    noprivatepayreason: 8
                    noschipreason: 2
                    nostatehealthinsreason: 1
                    novamedreason: 1
                    privatepay: 1
                    schip: 0
                    statehealthins: 99
                    vamedicalservices: 1
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    dateCreated: 03-17-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthinsurances/{healthinsuranceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    healthInsurance:
                      healthInsuranceId: 50a50523-e1ba-458f-a37e-66c9922b0204
                      cobra: -918045701
                      employerprovided: 49269345
                      insurancefromanysource: 9
                      medicaid: 99
                      medicare: 99
                      nocobrareason: 99
                      noemployerprovidedreason: 3
                      nomedicaidreason: 8
                      nomedicarereason: 2
                      noprivatepayreason: 8
                      noschipreason: 2
                      nostatehealthinsreason: 1
                      novamedreason: 1
                      privatepay: 1
                      schip: 0
                      statehealthins: 99
                      vamedicalservices: 1
                      informationDate: 03-15-2016
                      dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a healthinsurance using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-healthinsurances-healthinsuranceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific healthinsurance specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-healthinsurances-healthinsuranceid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  healthInsurance:
                    cobra: -918045701
                    employerprovided: 49269345
                    insurancefromanysource: 9
                    medicaid: 99
                    medicare: 99
                    nocobrareason: 99
                    noemployerprovidedreason: 3
                    nomedicaidreason: 8
                    nomedicarereason: 2
                    noprivatepayreason: 8
                    noschipreason: 2
                    nostatehealthinsreason: 1
                    novamedreason: 1
                    privatepay: 1
                    schip: 0
                    statehealthins: 99
                    vamedicalservices: 1
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific healthinsurance specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-healthinsurances-healthinsuranceid
    parameters:
      - name: healthinsuranceid
        in: path
        required: true
        schema:
          type: string
        description: Healthinsurance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    healthStatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthStatuses:
                        - healthStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
                          healthCategory: 27
                          healthStatus: 1
                          dueDate: 04-18-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthstatus.  Returns a list of healthstatus ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-healthstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  healthStatus:
                    healthStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a healthstatus
      operationId: POST_clients-clientid-enrollments-enrollmentid-healthstatuses
      requestBody:
        content:
          application/json:
            schema:
              example:
                  healthStatus:
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
                    healthCategory: 27
                    healthStatus: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses/{healthstatusid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    healthStatus:
                      healthStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      informationDate: 04-18-2016
                      dataCollectionStage: 1
                      healthCategory: 27
                      healthStatus: 1
                      dueDate: 04-18-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a healthstatus using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-healthstatuses-healthstatusid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific healthstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-healthstatuses-healthstatusid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  healthStatus:
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
                    healthCategory: 27
                    healthStatus: 1
                    dueDate: 04-18-2016
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific healthstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-healthstatuses-healthstatusid
    parameters:
      - name: healthstatusid
        in: path
        required: true
        schema:
          type: string
        description: Healthstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    IncomeAndSources:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      incomeAndSources:
                        - incomeAndSourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          alimony: 99
                          alimonyamount: 15
                          childsupport: 1
                          childsupportamount: 3
                          earned: 99
                          earnedamount: 15
                          ga: 0
                          gaamount: 3
                          incomefromanysource: 8
                          othersource: 0
                          othersourceamount: 15
                          othersourceidentify: test
                          pension: 99
                          pensionamount: 3
                          privatedisability: 1
                          privatedisabilityamount: 15
                          socsecretirement: 99
                          socsecretirementamount: 15
                          ssdi: 0
                          ssdiamount: 3
                          ssi: 99
                          ssiamount: 3
                          tanf: 0
                          tanfamount: 3
                          totalmonthlyincome: 3
                          unemployment: 99
                          unemploymentamount: 15
                          vadisabilitynonservice: 0
                          vadisabilitynonserviceamount: 3
                          vadisabilityservice: 1
                          vadisabilityserviceamount: 15
                          workerscomp: 0
                          workerscompamount: 15
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for incomeandsource.  Returns a list of incomeandsource ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-incomeandsources
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  incomeAndSource:
                    incomeAndSourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a incomeandsource
      operationId: POST_clients-clientid-enrollments-enrollmentid-incomeandsources
      requestBody:
        content:
          application/json:
            schema:
              example:
                  incomeAndSource:
                    alimony: 99
                    alimonyamount: 15
                    childsupport: 1
                    childsupportamount: 3
                    earned: 99
                    earnedamount: 15
                    ga: 0
                    gaamount: 3
                    incomefromanysource: 8
                    othersource: 0
                    othersourceamount: 15
                    othersourceidentify: test
                    pension: 99
                    pensionamount: 3
                    privatedisability: 1
                    privatedisabilityamount: 15
                    socsecretirement: 99
                    socsecretirementamount: 15
                    ssdi: 0
                    ssdiamount: 3
                    ssi: 99
                    ssiamount: 3
                    tanf: 0
                    tanfamount: 3
                    totalmonthlyincome: 3
                    unemployment: 99
                    unemploymentamount: 15
                    vadisabilitynonservice: 0
                    vadisabilitynonserviceamount: 3
                    vadisabilityservice: 1
                    vadisabilityserviceamount: 15
                    workerscomp: 0
                    workerscompamount: 15
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources/{incomeandsourceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    incomeAndSource:
                      incomeAndSourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      alimony: 99
                      alimonyamount: 15
                      childsupport: 1
                      childsupportamount: 3
                      earned: 99
                      earnedamount: 15
                      ga: 0
                      gaamount: 3
                      incomefromanysource: 8
                      othersource: 0
                      othersourceamount: 15
                      othersourceidentify: test
                      pension: 99
                      pensionamount: 3
                      privatedisability: 1
                      privatedisabilityamount: 15
                      socsecretirement: 99
                      socsecretirementamount: 15
                      ssdi: 0
                      ssdiamount: 3
                      ssi: 99
                      ssiamount: 3
                      tanf: 0
                      tanfamount: 3
                      totalmonthlyincome: 3
                      unemployment: 99
                      unemploymentamount: 15
                      vadisabilitynonservice: 0
                      vadisabilitynonserviceamount: 3
                      vadisabilityservice: 1
                      vadisabilityserviceamount: 15
                      workerscomp: 0
                      workerscompamount: 15
                      informationDate: 03-17-2016
                      dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a incomeandsource using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-incomeandsources-incomeandsourceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific incomeandsource specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-incomeandsources-incomeandsourceid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  incomeAndSource:
                    alimony: 99
                    alimonyamount: 15
                    childsupport: 1
                    childsupportamount: 3
                    earned: 99
                    earnedamount: 15
                    ga: 0
                    gaamount: 3
                    incomefromanysource: 8
                    othersource: 0
                    othersourceamount: 15
                    othersourceidentify: test
                    pension: 99
                    pensionamount: 3
                    privatedisability: 1
                    privatedisabilityamount: 15
                    socsecretirement: 99
                    socsecretirementamount: 15
                    ssdi: 0
                    ssdiamount: 3
                    ssi: 99
                    ssiamount: 3
                    tanf: 0
                    tanfamount: 3
                    totalmonthlyincome: 3
                    unemployment: 99
                    unemploymentamount: 15
                    vadisabilitynonservice: 0
                    vadisabilitynonserviceamount: 3
                    vadisabilityservice: 1
                    vadisabilityserviceamount: 15
                    workerscomp: 0
                    workerscompamount: 15
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific incomeandsource specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-incomeandsources-incomeandsourceid
    parameters:
      - name: incomeandsourceid
        in: path
        required: true
        schema:
          type: string
        description: Incomeandsource Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/lastgradecompleteds':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    lastgradecompletedList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      lastgradecompletedList:
                        - lastgradecompletedId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          lastgradecompleted: 1458186668375
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for lastgradecompleted.  Returns a list of lastgradecompleted
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-lastgradecompleteds
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  lastgradecompleted:
                    lastgradecompletedId: 90d02def-0df7-4d9f-ad54-21f57e9d6e25
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a lastgradecompleted
      operationId: POST_clients-clientid-enrollments-enrollmentid-lastgradecompleteds
      requestBody:
        content:
          application/json:
            schema:
              example:
                  lastgradecompleted:
                    lastgradecompleted: 6
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/lastgradecompleteds/{lastgradecompletedid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    lastgradecompleted:
                      lastgradecompletedId: 90d02def-0df7-4d9f-ad54-21f57e9d6e25
                      lastgradecompleted: 6
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a lastgradecompleted using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-lastgradecompleteds-lastgradecompletedid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific lastgradecompleted specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-lastgradecompleteds-lastgradecompletedid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  lastgradecompleted:
                    lastgradecompleted: 6
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific lastgradecompleted specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-lastgradecompleteds-lastgradecompletedid
    parameters:
      - name: lastgradecompletedid
        in: path
        required: true
        schema:
          type: string
        description: Lastgradecompleted Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/lastpermanentaddresses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    LastPermanentAddresses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 0
                        maximum: 30
                        sort: {}
                      lastPermanentAddresses:
                        - lastPermanentAddressId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          addressdataquality: 1
                          lastpermanentcity: test
                          lastpermanentstate: 2
                          lastpermanentstreet: street
                          lastpermanentzip: '53324'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for lastpermanentaddress.  Returns a list of
        lastpermanentaddress ids, based on the query parameters sent.  The query
        parameters are cumulative, so each additional query parameter narrows
        the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-lastpermanentaddresses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  lastPermanentAddress:
                    lastPermanentAddressId: 90d02def-0df7-4d9f-ad54-21f57e9d6e
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a lastpermanentaddress
      operationId: POST_clients-clientid-enrollments-enrollmentid-lastpermanentaddresses
      requestBody:
        content:
          application/json:
            schema:
              example:
                  lastPermanentAddress:
                    addressdataquality: 1
                    lastpermanentcity: Douglas
                    lastpermanentstate: GA
                    lastpermanentstreet: 1008 Fairwood ln
                    lastpermanentzip: '30105'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/lastpermanentaddresses/{lastpermanentaddressid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    lastPermanentAddress:
                      lastPermanentAddressId: 90d02def-0df7-4d9f-ad54-21f57e9d6e25
                      addressdataquality: 1
                      lastpermanentcity: Douglas
                      lastpermanentstate: GA
                      lastpermanentstreet: 1008 Fairwood ln
                      lastpermanentzip: '30105'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a lastpermanentaddress using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-lastpermanentaddresses-lastpermanentaddressid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific lastpermanentaddress specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-lastpermanentaddresses-lastpermanentaddressid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  lastPermanentAddress:
                    addressdataquality: 1
                    lastpermanentcity: Douglas
                    lastpermanentstate: GA
                    lastpermanentstreet: 1008 Fairwood ln
                    lastpermanentzip: '30105'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific lastpermanentaddress specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-lastpermanentaddresses-lastpermanentaddressid
    parameters:
      - name: lastpermanentaddressid
        in: path
        required: true
        schema:
          type: string
        description: Lastpermanentaddress Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/medicalassistances':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    medicalassistances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      medicalassistances:
                        - medicalassistanceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          adap: 0
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for medicalassistance.  Returns a list of medicalassistance
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-medicalassistances
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  medicalassistance:
                    medicalassistanceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a medicalassistance
      operationId: POST_clients-clientid-enrollments-enrollmentid-medicalassistances
      requestBody:
        content:
          application/json:
            schema:
              example:
                  medicalassistance:
                    adap: 0
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/medicalassistances/{medicalassistanceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    medicalassistance:
                      medicalassistanceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      adap: 0
                      informationDate: 03-17-2016
                      dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a medicalassistance using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-medicalassistances-medicalassistanceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific medicalassistance specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-medicalassistances-medicalassistanceid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  medicalassistance:
                    adap: 0
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific medicalassistance specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-medicalassistances-medicalassistanceid
    parameters:
      - name: medicalassistanceid
        in: path
        required: true
        schema:
          type: string
        description: Medicalassistance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    nonCashBenefits:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      nonCashBenefits:
                        - nonCashBenefitId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          othersource: 99
                          othersourceidentify: test
                          othertanf: 1
                          rentalassistanceongoing: 99
                          rentalassistancetemp: 99
                          snap: 0
                          tanfchildcare: 99
                          tanftransportation: 99
                          wic: 1
                          benefitsfromanysource: 0
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for noncashbenefit.  Returns a list of noncashbenefit ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-noncashbenefits
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  nonCashBenefit:
                    nonCashBenefitId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a noncashbenefit
      operationId: POST_clients-clientid-enrollments-enrollmentid-noncashbenefits
      requestBody:
        content:
          application/json:
            schema:
              example:
                  nonCashBenefit:
                    othersource: 99
                    othersourceidentify: test
                    othertanf: 1
                    rentalassistanceongoing: 99
                    rentalassistancetemp: 99
                    snap: 0
                    tanfchildcare: 99
                    tanftransportation: 99
                    wic: 1
                    benefitsfromanysource: 0
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits/{noncashbenefitid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    nonCashBenefit:
                      nonCashBenefitId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      othersource: 99
                      othersourceidentify: test
                      othertanf: 1
                      rentalassistanceongoing: 99
                      rentalassistancetemp: 99
                      snap: 0
                      tanfchildcare: 99
                      tanftransportation: 99
                      wic: 1
                      benefitsfromanysource: 0
                      informationDate: 03-17-2016
                      dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a noncashbenefit using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-noncashbenefits-noncashbenefitid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific noncashbenefit specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-noncashbenefits-noncashbenefitid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  nonCashBenefit:
                    othersource: 99
                    othersourceidentify: test
                    othertanf: 1
                    rentalassistanceongoing: 99
                    rentalassistancetemp: 99
                    snap: 0
                    tanfchildcare: 99
                    tanftransportation: 99
                    wic: 1
                    benefitsfromanysource: 0
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific noncashbenefit specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-noncashbenefits-noncashbenefitid
    parameters:
      - name: noncashbenefitid
        in: path
        required: true
        schema:
          type: string
        description: Noncashbenefit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/referralsources':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    referralsources:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      referralsources:
                        - referralsourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          countoutreachreferralapproaches: 1
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for referralsource.  Returns a list of referralsource ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-referralsources
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  referralsource:
                    referralsourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a referralsource
      operationId: POST_clients-clientid-enrollments-enrollmentid-referralsources
      requestBody:
        content:
          application/json:
            schema:
              example:
                  referralsource:
                    countoutreachreferralapproaches: 1
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/referralsources/{referralsourceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    referralsource:
                      referralsourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      countoutreachreferralapproaches: 1
                      informationDate: 03-17-2016
                      dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a referralsource using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-referralsources-referralsourceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific referralsource specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-referralsources-referralsourceid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  referralsource:
                    countoutreachreferralapproaches: 1
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific referralsource specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-referralsources-referralsourceid
    parameters:
      - name: referralsourceid
        in: path
        required: true
        schema:
          type: string
        description: Referralsource Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveins':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    residentialmoveins:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      residentialmoveins:
                        - residentialmoveinId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          inpermanenthousing: 99
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for residentialmovein.  Returns a list of residentialmovein
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-residentialmoveins
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  residentialmovein:
                    residentialmoveinId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a residentialmovein
      operationId: POST_clients-clientid-enrollments-enrollmentid-residentialmoveins
      requestBody:
        content:
          application/json:
            schema:
              example:
                  residentialmovein:
                    residentialmoveinId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                    inpermanenthousing: 99
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveins/{residentialmoveinid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    residentialmovein:
                      residentialmoveinId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      inpermanenthousing: 99
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a residentialmovein using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-residentialmoveins-residentialmoveinid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific residentialmovein specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-residentialmoveins-residentialmoveinid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  residentialmovein:
                    inpermanenthousing: 99
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific residentialmovein specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-residentialmoveins-residentialmoveinid
    parameters:
      - name: residentialmoveinid
        in: path
        required: true
        schema:
          type: string
        description: Residentialmovein Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/rhybcpstatuses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    rhybcpstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      rhybcpstatuses:
                        - rhybcpstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          statusDate: '2016-03-17T09:21:08.375'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for rhybcpstatus.  Returns a list of rhybcpstatus ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-rhybcpstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  rhybcpstatus:
                    rhybcpstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a rhybcpstatus
      operationId: POST_clients-clientid-enrollments-enrollmentid-rhybcpstatuses
      requestBody:
        content:
          application/json:
            schema:
              example:
                  rhybcpstatus:
                    statusDate: '2016-03-17T09:21:08.375'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/rhybcpstatuses/{rhybcpstatusid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    rhybcpstatus:
                      rhybcpstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      statusDate: '2016-03-17T09:21:08.375'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a rhybcpstatus using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-rhybcpstatuses-rhybcpstatusid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific rhybcpstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-rhybcpstatuses-rhybcpstatusid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  rhybcpstatus:
                    statusDate: '2016-03-17T09:21:08.375'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific rhybcpstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-rhybcpstatuses-rhybcpstatusid
    parameters:
      - name: rhybcpstatusid
        in: path
        required: true
        schema:
          type: string
        description: Rhybcpstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    pathstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      pathstatuses:
                        - pathstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          clientenrolledinpath: 122355
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for pathstatus.  Returns a list of pathstatus ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-pathstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  pathstatus:
                    pathstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a pathstatus
      operationId: POST_clients-clientid-enrollments-enrollmentid-pathstatuses
      requestBody:
        content:
          application/json:
            schema:
              example:
                  pathstatus:
                    clientenrolledinpath: 122355
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses/{pathstatusid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    pathstatus:
                      pathstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      clientenrolledinpath: 122355
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a pathstatus using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-pathstatuses-pathstatusid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific pathstatus specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-pathstatuses-pathstatusid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  pathstatus:
                    clientenrolledinpath: 122355
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific pathstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-pathstatuses-pathstatusid
    parameters:
      - name: pathstatusid
        in: path
        required: true
        schema:
          type: string
        description: Pathstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/percentamis':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    percentamis:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      percentamis:
                        - percentamiId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          percentage: 12
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for percentami.  Returns a list of percentami ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-percentamis
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  percentami:
                    percentamiId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a percentami
      operationId: POST_clients-clientid-enrollments-enrollmentid-percentamis
      requestBody:
        content:
          application/json:
            schema:
              example:
                  percentami:
                    percentage: 12
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/percentamis/{percentamiid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    percentami:
                      percentamiId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      percentage: 12
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a percentami using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-percentamis-percentamiid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific percentami specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-percentamis-percentamiid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  percentami:
                    percentage: 12
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific percentami specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-percentamis-percentamiid
    parameters:
      - name: percentamiid
        in: path
        required: true
        schema:
          type: string
        description: Percentami Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/schoolstatuses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    schoolstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      schoolstatuses:
                        - schoolstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          informationDate: '2016-03-17T09:21:08.375'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for schoolstatus.  Returns a list of schoolstatus ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-schoolstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  schoolstatus:
                    schoolstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a schoolstatus
      operationId: POST_clients-clientid-enrollments-enrollmentid-schoolstatuses
      requestBody:
        content:
          application/json:
            schema:
              example:
                  schoolstatus:
                    informationDate: '2016-03-17T09:21:08.375'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/schoolstatuses/{schoolstatusid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    schoolstatus:
                      schoolstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      informationDate: '2016-03-17T09:21:08.375'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a schoolstatus using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-schoolstatuses-schoolstatusid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific schoolstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-schoolstatuses-schoolstatusid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  schoolstatus:
                    informationDate: '2016-03-17T09:21:08.375'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific schoolstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-schoolstatuses-schoolstatusid
    parameters:
      - name: schoolstatusid
        in: path
        required: true
        schema:
          type: string
        description: Schoolstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/services':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    servicesList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      servicesList:
                        - servicesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          dateprovided: 1458186668375
                          faamount: 15
                          recordtype: 15
                          referraloutcome: 3
                          subtypeprovided: 11
                          typeprovided: 10
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for service.  Returns a list of service ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-services
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  services:
                    servicesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a service
      operationId: POST_clients-clientid-enrollments-enrollmentid-services
      requestBody:
        content:
          application/json:
            schema:
              example:
                  services:
                    dateprovided: 1458186668375
                    faamount: 15
                    recordtype: 15
                    referraloutcome: 3
                    subtypeprovided: 11
                    typeprovided: 10
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/services/{serviceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    services:
                      servicesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      dateprovided: 1458186668375
                      faamount: 15
                      recordtype: 15
                      referraloutcome: 3
                      subtypeprovided: 11
                      typeprovided: 10
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a service using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-services-serviceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific service specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-services-serviceid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  services:
                    dateprovided: 1458186668375
                    faamount: 15
                    recordtype: 15
                    referraloutcome: 3
                    subtypeprovided: 11
                    typeprovided: 10
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific service specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid-services-serviceid
    parameters:
      - name: serviceid
        in: path
        required: true
        schema:
          type: string
        description: Service Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/sexualorientations':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    sexualorientations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      sexualorientations:
                        - sexualorientationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          sexualorientation: 99
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for sexualorientation.  Returns a list of sexualorientation
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-sexualorientations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  sexualorientation:
                    sexualorientationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a sexualorientation
      operationId: POST_clients-clientid-enrollments-enrollmentid-sexualorientations
      requestBody:
        content:
          application/json:
            schema:
              example:
                  sexualorientation:
                    sexualorientation: 99
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/sexualorientations/{sexualorientationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    sexualorientation:
                      sexualorientationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      sexualorientation: 99
                      informationDate: 03-17-2016
                      dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a sexualorientation using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-sexualorientations-sexualorientationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific sexualorientation specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-sexualorientations-sexualorientationid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  sexualorientation:
                    sexualorientation: 99
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific sexualorientation specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-sexualorientations-sexualorientationid
    parameters:
      - name: sexualorientationid
        in: path
        required: true
        schema:
          type: string
        description: Sexualorientation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/worsthousingsituations':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    worstHousingSituations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      worstHousingSituations:
                        - worstHousingSituationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          worsthousingsituation: 9
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for worsthousingsituation.  Returns a list of
        worsthousingsituation ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-worsthousingsituations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  worstHousingSituation:
                    worstHousingSituationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a worsthousingsituation
      operationId: POST_clients-clientid-enrollments-enrollmentid-worsthousingsituations
      requestBody:
        content:
          application/json:
            schema:
              example:
                  worstHousingSituation:
                    worsthousingsituation: 9
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/worsthousingsituations/{worsthousingsituationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    worstHousingSituation:
                      worstHousingSituationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      worsthousingsituation: 9
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a worsthousingsituation using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-worsthousingsituations-worsthousingsituationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific worsthousingsituation specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-worsthousingsituations-worsthousingsituationid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  worstHousingSituation:
                    worsthousingsituation: 9
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific worsthousingsituation specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-worsthousingsituations-worsthousingsituationid
    parameters:
      - name: worsthousingsituationid
        in: path
        required: true
        schema:
          type: string
        description: Worsthousingsituation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/youthcriticalissues':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    youthCriticalIssues:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      youthCriticalIssues:
                        - youthCriticalIssuesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          abuseandneglectfam: 0
                          abuseandneglectyouth: 99
                          activemilitaryparent: 1
                          alcoholdrugabusefam: 99
                          alcoholdrugabuseyouth: 1
                          healthissuesfam: 99
                          healthissuesyouth: 1
                          householddynamics: 0
                          housingissuesfam: 99
                          housingissuesyouth: 0
                          incarceratedparent: 99
                          incarceratedparentstatus: 3
                          insufficientincome: 0
                          mentaldisabilityfam: 99
                          mentaldisabilityyouth: 0
                          mentalhealthissuesfam: 1
                          mentalhealthissuesyouth: 99
                          physicaldisabilityfam: 0
                          physicaldisabilityyouth: 99
                          schooleducationalissuesfam: 0
                          schooleducationalissuesyouth: 0
                          sexualorientationgenderidfam: 1
                          sexualorientationgenderidyouth: 1
                          unemploymentfam: 99
                          unemploymentyouth: 99
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for youthcriticalissue.  Returns a list of youthcriticalissue
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-youthcriticalissues
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  youthCriticalIssue:
                    youthCriticalIssuesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a youthcriticalissue
      operationId: POST_clients-clientid-enrollments-enrollmentid-youthcriticalissues
      requestBody:
        content:
          application/json:
            schema:
              example:
                  youthCriticalIssue:
                    abuseandneglectfam: 0
                    abuseandneglectyouth: 99
                    activemilitaryparent: 1
                    alcoholdrugabusefam: 99
                    alcoholdrugabuseyouth: 1
                    healthissuesfam: 99
                    healthissuesyouth: 1
                    householddynamics: 0
                    housingissuesfam: 99
                    housingissuesyouth: 0
                    incarceratedparent: 99
                    incarceratedparentstatus: 3
                    insufficientincome: 0
                    mentaldisabilityfam: 99
                    mentaldisabilityyouth: 0
                    mentalhealthissuesfam: 1
                    mentalhealthissuesyouth: 99
                    physicaldisabilityfam: 0
                    physicaldisabilityyouth: 99
                    schooleducationalissuesfam: 0
                    schooleducationalissuesyouth: 0
                    sexualorientationgenderidfam: 1
                    sexualorientationgenderidyouth: 1
                    unemploymentfam: 99
                    unemploymentyouth: 99
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/youthcriticalissues/{youthcriticalissueid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    youthCriticalIssue:
                      youthCriticalIssuesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      abuseandneglectfam: 0
                      abuseandneglectyouth: 99
                      activemilitaryparent: 1
                      alcoholdrugabusefam: 99
                      alcoholdrugabuseyouth: 1
                      healthissuesfam: 99
                      healthissuesyouth: 1
                      householddynamics: 0
                      housingissuesfam: 99
                      housingissuesyouth: 0
                      incarceratedparent: 99
                      incarceratedparentstatus: 3
                      insufficientincome: 0
                      mentaldisabilityfam: 99
                      mentaldisabilityyouth: 0
                      mentalhealthissuesfam: 1
                      mentalhealthissuesyouth: 99
                      physicaldisabilityfam: 0
                      physicaldisabilityyouth: 99
                      schooleducationalissuesfam: 0
                      schooleducationalissuesyouth: 0
                      sexualorientationgenderidfam: 1
                      sexualorientationgenderidyouth: 1
                      unemploymentfam: 99
                      unemploymentyouth: 99
                      informationDate: 03-17-2016
                      dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a youthcriticalissue using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-youthcriticalissues-youthcriticalissueid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific youthcriticalissue specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-youthcriticalissues-youthcriticalissueid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  youthCriticalIssue:
                    abuseandneglectfam: 0
                    abuseandneglectyouth: 99
                    activemilitaryparent: 1
                    alcoholdrugabusefam: 99
                    alcoholdrugabuseyouth: 1
                    healthissuesfam: 99
                    healthissuesyouth: 1
                    householddynamics: 0
                    housingissuesfam: 99
                    housingissuesyouth: 0
                    incarceratedparent: 99
                    incarceratedparentstatus: 3
                    insufficientincome: 0
                    mentaldisabilityfam: 99
                    mentaldisabilityyouth: 0
                    mentalhealthissuesfam: 1
                    mentalhealthissuesyouth: 99
                    physicaldisabilityfam: 0
                    physicaldisabilityyouth: 99
                    schooleducationalissuesfam: 0
                    schooleducationalissuesyouth: 0
                    sexualorientationgenderidfam: 1
                    sexualorientationgenderidyouth: 1
                    unemploymentfam: 99
                    unemploymentyouth: 99
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific youthcriticalissue specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-youthcriticalissues-youthcriticalissueid
    parameters:
      - name: youthcriticalissueid
        in: path
        required: true
        schema:
          type: string
        description: Youthcriticalissue Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/veteraninfos':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    veteranInfos:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      veteranInfos:
                        - veteranInfoId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          yearEntrdService: 12
                          yearSeperated: 2
                          worldWar2: 9
                          koreanWar: 8
                          vietnamWar: 8
                          desertStorm: 99
                          afghanistanOef: 9
                          iraqOif: 1
                          iraqOnd: 8
                          otherTheater: 99
                          militaryBranch: 6
                          dischargeStatus: 2
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for veteraninfo.  Returns a list of veteraninfo ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-veteraninfos
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  veteranInfo:
                    veteranInfoId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a veteraninfo
      operationId: POST_clients-clientid-veteraninfos
      requestBody:
        content:
          application/json:
            schema:
              example:
                  veteranInfo:
                    yearEntrdService: 12
                    yearSeperated: 2
                    worldWar2: 9
                    koreanWar: 8
                    vietnamWar: 8
                    desertStorm: 99
                    afghanistanOef: 9
                    iraqOif: 1
                    iraqOnd: 8
                    otherTheater: 99
                    militaryBranch: 6
                    dischargeStatus: 2
        required: true
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/veteraninfos/{veteraninfoid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    veteranInfo:
                      veteranInfoId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      yearEntrdService: 12
                      yearSeperated: 2
                      worldWar2: 9
                      koreanWar: 8
                      vietnamWar: 8
                      desertStorm: 99
                      afghanistanOef: 9
                      iraqOif: 1
                      iraqOnd: 8
                      otherTheater: 99
                      militaryBranch: 6
                      dischargeStatus: 2
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a veteraninfo using a URI resource parameter/ID.
      operationId: GET_clients-clientid-veteraninfos-veteraninfoid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific veteraninfo specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-veteraninfos-veteraninfoid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  veteranInfo:
                    yearEntrdService: 12
                    yearSeperated: 2
                    worldWar2: 9
                    koreanWar: 8
                    vietnamWar: 8
                    desertStorm: 99
                    afghanistanOef: 9
                    iraqOif: 1
                    iraqOnd: 8
                    otherTheater: 99
                    militaryBranch: 6
                    dischargeStatus: 2
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific veteraninfo specified by the URI resource
        parameter/ID.
      operationId: DELETE_clients-clientid-veteraninfos-veteraninfoid
    parameters:
      - name: veteraninfoid
        in: path
        required: true
        schema:
          type: string
        description: Veteraninfo Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  /organizations:
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    Organizations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      organizations:
                        - organizationId: 81a20cb3-e000-473c-a3e6-cddcba15a02f
                          organizationName: BBjksdjgjdR                        
                          organizationCommonName: BBR
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for organization.  Returns a list of organization ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_organizations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  organization:
                    organizationId: 8dff4029-09b7-4293-b24b-b077b39ee673
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a organization
      operationId: POST_organizations
      requestBody:
        content:
          application/json:
            schema:
              example:
                  organization:
                    organizationName: BBjksdjgjdR
                    organizationCommonName: BBR
        required: true
  '/organizations/{organizationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    organization:
                      organizationId: 8dff4029-09b7-4293-b24b-b077b39ee673
                      organizationName: BBjksdjgjR
                      organizationCommonName: BBR
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a organization using a URI resource parameter/ID.
      operationId: GET_organizations-organizationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific organization specified by the URI resource
        parameter/ID.
      operationId: PUT_organizations-organizationid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  organization:
                    organizationName: BBjksdjgjdR
                    organizationCommonName: BBR
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific organization specified by the URI resource
        parameter/ID.
      operationId: DELETE_organizations-organizationid
    parameters:
      - name: organizationid
        in: path
        required: true
        schema:
          type: string
        description: Organization Identifier
  /projects:
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    projects:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      projects:
                        - projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                          projectName: Homeless People Project
                          projectCommonName: Homeless People Project
                          continuumProject: 0
                          projectType: 1
                          residentialAffiliation: 0
                          targetPopulation: 1
                          trackingMethod: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for project.  Returns a list of project ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  project:
                    projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a project
      operationId: POST_projects
      requestBody:
        content:
          application/json:
            schema:
              example:
                  project:
                    projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                    projectName: Homeless People Project
                    projectCommonName: Homeless People Project
                    continuumProject: 0
                    projectType: 1
                    residentialAffiliation: 0
                    targetPopulation: 1
                    trackingMethod: 0
        required: true
  '/projects/{projectid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    project:
                      projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                      projectName: Homeless People Project
                      projectCommonName: Homeless People Project
                      continuumProject: 0
                      projectType: 1
                      residentialAffiliation: 0
                      targetPopulation: 1
                      trackingMethod: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a project using a URI resource parameter/ID.
      operationId: GET_projects-projectid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific project specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  project:
                    projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                    projectName: Homeless People Project
                    projectCommonName: Homeless People Project
                    continuumProject: 0
                    projectType: 1
                    residentialAffiliation: 0
                    targetPopulation: 1
                    trackingMethod: 0
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific project specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/affiliations':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    affiliations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      affiliations:
                        - affiliationId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                          resprojectid: response project
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for affiliation.  Returns a list of affiliation ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-affiliations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  affiliation:
                    affiliationId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a affiliation
      operationId: POST_projects-projectid-affiliations
      requestBody:
        content:
          application/json:
            schema:
              example:
                  affiliation:
                    resprojectid: 34da7333-0592-4fa7-ba79-1fe2dfaaff4e
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/affiliations/{affiliationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    affiliation:
                      affiliationId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                      resprojectid: 34da7333-0592-4fa7-ba79-1fe2dfaaff4e
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a affiliation using a URI resource parameter/ID.
      operationId: GET_projects-projectid-affiliations-affiliationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific affiliation specified by the URI resource
        parameter/ID.
      operationId: PUT_projects-projectid-affiliations-affiliationid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  affiliation:
                    resprojectid: 34da7333-0592-4fa7-ba79-1fe2dfaaff4e
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific affiliation specified by the URI resource
        parameter/ID.
      operationId: DELETE_projects-projectid-affiliations-affiliationid
    parameters:
      - name: affiliationid
        in: path
        required: true
        schema:
          type: string
        description: Affiliation Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/funders':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    funders:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      funders:
                        - funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                          funder: 8
                          grantid: a2cac563-e852-487b-996d-b1bae8225234
                          enddate: 04-16-2016
                          startdate: 02-04-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for funder.  Returns a list of funder ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-funders
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  funder:
                    funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a funder
      operationId: POST_projects-projectid-funders
      requestBody:
        content:
          application/json:
            schema:
              example:
                  funder:
                    enddate: '04-16-2016 11:11'
                    funder: 8
                    grantid: a2cac563-e852-487b-996d-b1bae8225234
                    startdate: '02-04-2016 12:12'
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/funders/{funderid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    funder:
                      funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                      funder: 8
                      grantid: a2cac563-e852-487b-996d-b1bae8225234
                      enddate: 04-16-2016
                      startdate: 02-04-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a funder using a URI resource parameter/ID.
      operationId: GET_projects-projectid-funders-funderid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific funder specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid-funders-funderid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  funder:
                    enddate: '04-16-2016 11:11'
                    funder: 8
                    grantid: a2cac563-e852-487b-996d-b1bae8225234
                    startdate: '02-04-2016 12:12'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific funder specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid-funders-funderid
    parameters:
      - name: funderid
        in: path
        required: true
        schema:
          type: string
        description: Funder Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/inventories':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    inventories:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      inventories:
                        - inventoryId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
                          availabilty: ONE
                          bedtype: 1
                          hmisparticipatingbeds: 1
                          householdtype: 1
                          unitinventory: 123
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for inventory.  Returns a list of inventory ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-inventories
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  inventory:
                    inventoryId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a inventory
      operationId: POST_projects-projectid-inventories
      requestBody:
        content:
          application/json:
            schema:
              example:
                  inventory:
                    availabilty: ONE
                    bedtype: 1
                    hmisparticipatingbeds: 1
                    householdtype: 1
                    unitinventory: 123
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/inventories/{inventoryid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    inventory:
                      inventoryId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
                      availabilty: ONE
                      bedtype: 1
                      hmisparticipatingbeds: 1
                      householdtype: 1
                      unitinventory: 123
                      informationDate: 03-17-2016
                      dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a inventory using a URI resource parameter/ID.
      operationId: GET_projects-projectid-inventories-inventoryid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific inventory specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid-inventories-inventoryid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  inventory:
                    availabilty: ONE
                    bedtype: 1
                    hmisparticipatingbeds: 1
                    householdtype: 1
                    unitinventory: 123
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific inventory specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid-inventories-inventoryid
    parameters:
      - name: inventoryid
        in: path
        required: true
        schema:
          type: string
        description: Inventory Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    projectcocs:
                      pagination:
                        from: 0
                        returned: 2
                        total: 2
                        maximum: 30
                        sort: {}
                      projectcocs:
                        - projectcocId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                          coccode: coc code
                        - projectcocId: 62caffe5-dd48-4acd-9b48-cadf9a68205c
                          coccode: coc new code
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for projectcoc.  Returns a list of projectcoc ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  projectcoc:
                    projectcocId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a projectcoc
      operationId: POST_projects-projectid-projectcocs
      requestBody:
        content:
          application/json:
            schema:
              example:
                  projectcoc:
                    coccode: coc code
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    projectcoc:
                      projectcocId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                      coccode: coc code
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a projectcoc using a URI resource parameter/ID.
      operationId: GET_projects-projectid-projectcocs-projectcocid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific projectcoc specified by the URI resource
        parameter/ID.
      operationId: PUT_projects-projectid-projectcocs-projectcocid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  projectcoc:
                    coccode: coc code
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific projectcoc specified by the URI resource
        parameter/ID.
      operationId: DELETE_projects-projectid-projectcocs-projectcocid
    parameters:
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/sites':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    sites:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      sites:
                        - siteId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
                          address: address
                          city: address
                          geocode: 2500
                          principalsite: 0
                          state: AK
                          zip: '1212'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for site.  Returns a list of site ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-sites
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                example:
                  site:
                    siteId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a site
      operationId: POST_projects-projectid-sites
      requestBody:
        content:
          application/json:
            schema:
              example:
                  site:
                    address: address
                    city: address
                    geocode: 2500
                    principalsite: 0
                    state: AK
                    zip: '1212'
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/sites/{siteid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                example:
                    site:
                      siteId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
                      address: address
                      city: address
                      geocode: 2500
                      principalsite: 0
                      state: AK
                      zip: '1212'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a site using a URI resource parameter/ID.
      operationId: GET_projects-projectid-sites-siteid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific site specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid-sites-siteid
      requestBody:
        content:
          application/json:
            schema:
              example:
                  site:
                    address: address
                    city: address
                    geocode: 2500
                    principalsite: 0
                    state: AK
                    zip: '1212'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific site specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid-sites-siteid
    parameters:
      - name: siteid
        in: path
        required: true
        schema:
          type: string
        description: Site Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/search/{searchentity}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                  searchResults:
                    pagination:
                      total: '2'
                      from: '0'
                      maximum: '50'
                      returned: '2'
                    items:
                      - clientId: 65e3df62-dd22-4d07-83ef-6858a6322839
                        firstName: Eric
                        middleName: Eric
                        lastName: Eric
                        nameSuffix: 'NS '
                        nameDataQuality: '1'
                        ssn: 'ssn '
                        ssnDataQuality: '1'
                        dob: '1459498034983'
                        dobDataQuality: '1'
                        race: '1'
                        ethnicity: '1'
                        gender: '1'
                        otherGender: Test
                        veteranStatus: '8'
                        link: >-
                          /hmis-clientapi/rest/v2015/clients/65e3df62-dd22-4d07-83ef-6858a6322839
                      - clientId: cf98b9b2-9a77-4133-99a3-b60f05a12ad1
                        firstName: Eric
                        middleName: Eric
                        lastName: Eric
                        nameSuffix: 'NS '
                        nameDataQuality: '1'
                        ssn: 'ssn '
                        ssnDataQuality: '1'
                        dob: '1459498034983'
                        dobDataQuality: '1'
                        race: '1'
                        ethnicity: '1'
                        gender: '1'
                        otherGender: Test
                        veteranStatus: '8'
                        link: >-
                          /hmis-clientapi/rest/v2014/clients/cf98b9b2-9a77-4133-99a3-b60f05a12ad1
      operationId: GET_search-searchentity
      parameters:
        - name: q
          in: query
          required: true
          description: >
            The search keywords, as well as any qualifiers. Currently supported
            search fields are first name,middle name,last name,dob,source system
            id and ssn. For search on "date of birth" field the format
            MM-dd-YYYY should be used for the search keyword.
          schema:
            type: string
        - name: sort
          in: query
          required: true
          description: The sort field. Default- results are sorted by "created date".
          schema:
            type: string
        - name: order
          in: query
          required: true
          description: >-
            The sort order if sort parameter is provided. One of asc or desc.
            Default- desc.
          schema:
            default: desc
            type: string
        - name: startIndex
          in: query
          required: true
          description: >-
            The start Index from where the search results should be returned.
            Default - 0
          schema:
            default: 0
            type: integer
        - name: maxItems
          in: query
          required: true
          description: >-
            the number or Items that should be included in the results . Default
            - 50
          schema:
            default: 50
            type: integer
        - name: exclude
          in: query
          required: true
          description: >
            Excludes fields from the search.  Currently its only supported value
            is "ssi" (to exclude source system id) only.
          schema:
            type: string
    parameters:
      - name: searchentity
        in: path
        required: true
        schema:
          type: string
  /dataelements:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                  dataElements:
                    dataElements:
                      - name: trackingmethod
                      - name: afghanistan_oef
                      - name: projectcompletionstatus
                      - name: nohivaidsassistancereason
                      - name: not_employed_reason
                      - name: noemployerprovidedreason
                      - name: novamedreason
                      - name: health_category
                      - name: employment_type
                      - name: lastgradecompleted
                      - name: referraloutcome
                      - name: housingstatus
                      - name: monthsHomelessThisTime
                      - name: pathsmiinformation
                      - name: timesHomelesspastthreeyears
                      - name: targetpopulation
                      - name: nostatehealthinsreason
                      - name: incarceratedparentstatus
                      - name: youth_age_group
                      - name: juvenilejusticeyears
                      - name: subsidyinformation
                      - name: whenoccurred
                      - name: nomedicaidreason
                      - name: monthsHomelessPastThreeYears
                      - name: sexualorientation
                      - name: childwelfareyears
                      - name: nocobrareason
                      - name: discharge_status
                      - name: gender
                      - name: availabilty
                      - name: military_branch
                      - name: referralsource
                      - name: noprivatepayreason
                      - name: householdtype
                      - name: pathhowconfirmed
                      - name: reason_no_services
                      - name: name_data_quality
                      - name: countofexchangeforsex
                      - name: askedorforcedtoexchangeforsex
                      - name: residencepriorlengthofstay
                      - name: dob_data_quality
                      - name: destination
                      - name: projecttype
                      - name: assessmentdisposition
                      - name: earlyexitreason
                      - name: reason_not_enrolled
                      - name: bedtype
                      - name: veteran_status
                      - name: funder
                      - name: relationshiptohoh
                      - name: health_status
                      - name: ethnicity
                      - name: noschipreason
                      - name: address_data_quality
                      - name: disabilitytype
                      - name: nomedicarereason
                      - name: housingassessment
                      - name: residencePrior
                      - name: ssn_data_quality
                      - name: noadapreason
                      - name: race
      operationId: GET_dataelements
  '/dataelements/{name}/values':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                  dataElements:
                    dataElements:
                      - name: address_data_quality
                        value: '1'
                        description: Full address reported
                      - name: address_data_quality
                        value: '2'
                        description: Incomplete or estimated address reported
                      - name: address_data_quality
                        value: '8'
                        description: Client doesn't know
                      - name: address_data_quality
                        value: '9'
                        description: Client refused
                      - name: address_data_quality
                        value: '99'
                        description: Data not collected
      operationId: GET_dataelements-name-values
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
  /questions:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                  questions:
                    pagination:
                      from: 0
                      returned: 1
                      total: 2
                      maximum: 200
                      sort: {}
                    questions:
                      - questionId: 273ec115-4a6a-4919-84e3-b8a0515fd2a7
                        questionDescription: >-
                          How long has it been since you lived in permanent
                          stable housing?
                        displayText: >-
                          2. How long has it been since you lived in permanent
                          stable housing ?
                        questionDataType: STRING
                        questionType: TEXT
                        picklistGroupName: housingstatus
                        hudQuestionId: '2'
                        links:
                          - rel: pickList
                            href: >-
                              /hmis-clientapi/rest/v2014/hmistypes/housingstatus/values
                          - rel: updateUriTemplate
                            href: '/v2014/clients/{clientid}/enrollments'
      operationId: GET_questions
      parameters:
        - name: text
          in: query
          description: filter on actual question text ( displayText )
          schema:
            type: string
  '/questions/{hudQuestionId}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                example:
                  question:
                    questionId: 273ec115-4a6a-4919-84e3-b8a0515fd2a7
                    questionDescription: >-
                      How long has it been since you lived in permanent stable
                      housing?
                    displayText: >-
                      2. How long has it been since you lived in permanent
                      stable housing ?
                    questionDataType: STRING
                    questionType: TEXT
                    picklistGroupName: housingstatus
                    hudQuestionId: '2'
                    links:
                      - rel: pickList
                        href: >-
                          /hmis-clientapi/rest/v2014/hmistypes/housingstatus/values
                      - rel: updateUriTemplate
                        href: '/v2014/clients/{clientid}/enrollments'
      operationId: GET_questions-hudQuestionId
    parameters:
      - name: hudQuestionId
        in: path
        required: true
        schema:
          type: string
components:
  schemas:
    affiliation:
      required:
        - affiliation
      type: object
      properties:
        affiliation:
          required:
            - resprojectid
          type: object
          properties:
            resprojectid:
              type: string
    affiliation_id:
      required:
        - affiliation
      type: object
      properties:
        affiliation:
          required:
            - affiliationId
            - resprojectid
          type: object
          properties:
            affiliationId:
              type: string
            resprojectid:
              type: string
    affiliations_ids:
      required:
        - affiliations
      type: object
      properties:
        affiliations:
          required:
            - pagination
            - affiliations
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            affiliations:
              type: array
              items:
                type: object
                properties:
                  affiliationId:
                    type: string
                  resprojectid:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - affiliationId
                  - resprojectid
                  - dateCreated
                  - dateUpdated
    client:
      required:
        - PersonalID
        - DateCreated
        - DateUpdated
        - UserID
      type: object
      properties:
        PersonalID:
          minLength: 32
          maxLength: 32
          type: string
        FirstName:
          maxLength: 50
          type: string
        MiddleName:
          maxLength: 50
          type: string
        LastName:
          maxLength: 50
          type: string
        NameSuffix:
          maxLength: 50
          type: string
        NameDataQuality:
          type: integer
        SSN:
          maxLength: 9
          type: string
        SSNDataQuality:
          type: integer
        DOB:
          format: date-time
          type: string
        DOBDataQuality:
          type: integer
        AmIndAKNative:
          type: integer
        Asian:
          type: integer
        BlackAfAmerican:
          type: integer
        NativeHIOtherPacific:
          type: integer
        White:
          type: integer
        RaceNone:
          type: integer
        Ethnicity:
          type: integer
        Gender:
          type: integer
        OtherGender:
          maxLength: 50
          type: string
        VeteranStatus:
          type: integer
        DateCreated:
          format: date-time
          type: string
        DateUpdated:
          format: date-time
          type: string
        UserID:
          maxLength: 32
          type: string
        DateDeleted:
          format: date-time
          type: string
        phoneNumber:
          type: string
        emailAddress:
          type: string
    client_id:
      required:
        - client
      type: object
      properties:
        client:
          required:
            - clientId
          type: object
          properties:
            clientId:
              type: string
    clients:
      title: clients
      type: array
      items:
        $ref: '#/components/schemas/client'
    clients_ids:
      required:
        - Clients
      type: object
      properties:
        Clients:
          required:
            - pagination
            - clients
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            clients:
              type: array
              items:
                type: object
                properties:
                  clientId:
                    type: string
                  firstName:
                    type: string
                  middleName:
                    type: string
                  lastName:
                    type: string
                  nameSuffix:
                    type: string
                  nameDataQuality:
                    type: string
                  ssn:
                    type: string
                  ssnDataQuality:
                    type: string
                  dob:
                    type: integer
                  dobDataQuality:
                    type: string
                  race:
                    type: string
                  ethnicity:
                    type: string
                  gender:
                    type: string
                  otherGender:
                    type: string
                  dateCreated:
                    type: string
                  phoneNumber:
                    type: string
                  emailAddress:
                    type: string
                required:
                  - clientId
                  - firstName
                  - middleName
                  - lastName
                  - nameSuffix
                  - nameDataQuality
                  - ssn
                  - ssnDataQuality
                  - dob
                  - dobDataQuality
                  - race
                  - ethnicity
                  - gender
                  - otherGender
                  - dateCreated
                  - phoneNumber
                  - emailAddress
    commercial_sexual_exploitation:
      required:
        - commercialSexualExploitation
      type: object
      properties:
        commercialSexualExploitation:
          required:
            - askedorforcedtoexchangeforsex
            - countofexchangeforsex
            - exchangeforsexpastthreemonths
            - dataCollectionStage
            - informationDate
            - dateCreated
          type: object
          properties:
            askedorforcedtoexchangeforsex:
              type: integer
            countofexchangeforsex:
              type: integer
            exchangeforsexpastthreemonths:
              type: integer
            dataCollectionStage:
              type: integer
            informationDate:
              type: string
            dateCreated:
              type: string
    commercial_sexual_exploitation_id:
      required:
        - commercialSexualExploitation
      type: object
      properties:
        commercialSexualExploitation:
          required:
            - commercialsexualexploitationId
          type: object
          properties:
            commercialsexualexploitationId:
              type: string
    commercial_sexual_exploitations_ids:
      required:
        - commercialSexualExploitations
      type: object
      properties:
        commercialSexualExploitations:
          required:
            - pagination
            - CommercialSexualExploitations
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            CommercialSexualExploitations:
              type: array
              items:
                type: object
                properties:
                  commercialsexualexploitationId:
                    type: string
                  askedorforcedtoexchangeforsex:
                    type: integer
                  countofexchangeforsex:
                    type: integer
                  exchangeforsexpastthreemonths:
                    type: integer
                  dateCreated:
                    type: string
                required:
                  - commercialsexualexploitationId
                  - askedorforcedtoexchangeforsex
                  - countofexchangeforsex
                  - exchangeforsexpastthreemonths
                  - dateCreated
    connection_with_soar:
      type: string
    connection_with_soar_id:
      required:
        - connectionwithsoar
      type: object
      properties:
        connectionwithsoar:
          required:
            - connectionwithsoarId
          type: object
          properties:
            connectionwithsoarId:
              type: string
    connection_with_soars_ids:
      required:
        - Connectionwithsoars
      type: object
      properties:
        Connectionwithsoars:
          required:
            - pagination
            - connectionwithsoars
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            connectionwithsoars:
              type: array
              items:
                type: object
                properties:
                  connectionwithsoarId:
                    type: string
                  connectionwithsoar:
                    type: integer
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - connectionwithsoarId
                  - connectionwithsoar
                  - dateCreated
                  - dateUpdated
    date_of_engagement:
      required:
        - dateofengagement
      type: object
      properties:
        dateofengagement:
          required:
            - dateofengagement
            - dateCreated
          type: object
          properties:
            dateofengagement:
              type: integer
            dateCreated:
              type: string
    date_of_engagement_id:
      required:
        - dateofengagement
      type: object
      properties:
        dateofengagement:
          required:
            - dateofengagementId
          type: object
          properties:
            dateofengagementId:
              type: string
    date_of_engagements_ids:
      required:
        - Dateofengagements
      type: object
      properties:
        Dateofengagements:
          required:
            - pagination
            - dateofengagements
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            dateofengagements:
              type: array
              items:
                type: object
                properties:
                  dateofengagementId:
                    type: string
                  dateofengagement:
                    type: integer
                  dateCreated:
                    type: string
                required:
                  - dateofengagementId
                  - dateofengagement
                  - dateCreated
    disabilities_ids:
      required:
        - disabilitiesList
      type: object
      properties:
        disabilitiesList:
          required:
            - pagination
            - disabilitiesList
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            disabilitiesList:
              type: array
              items:
                type: object
                properties:
                  disabilitiesId:
                    type: string
                  disabilityresponse:
                    type: integer
                  disabilitytype:
                    type: string
                  documentationonfile:
                    type: string
                  indefiniteandimpairs:
                    type: string
                  pathhowconfirmed:
                    type: string
                  receivingservices:
                    type: string
                  pathsmiinformation:
                    type: string
                  dataCollectionStage:
                    type: integer
                  informationDate:
                    type: string
                  dateCreated:
                    type: string
                required:
                  - disabilitiesId
                  - disabilityresponse
                  - disabilitytype
                  - documentationonfile
                  - indefiniteandimpairs
                  - pathhowconfirmed
                  - receivingservices
                  - pathsmiinformation
                  - dataCollectionStage
                  - informationDate
                  - dateCreated
    disability:
      title: disabilities
      required:
        - InformationDate
        - DataCollectionStage
        - DateCreated
        - DateUpdated
        - UserID
      type: object
      properties:
        ProjectEntryID:
          maxLength: 32
          minLength: 32
          type: string
        InformationDate:
          type: string
        DisabilityType:
          type: integer
        DisabilityResponse:
          type: integer
        IndefiniteAndImpairs:
          type: integer
        DocumentationOnFile:
          type: integer
        ReceivingServices:
          type: integer
        PATHHowConfirmed:
          type: integer
        PATHSMIInformation:
          type: integer
        DataCollectionStage:
          type: integer
        DateCreated:
          type: string
        DateUpdated:
          type: string
        DateDeleted:
          type: string
        UserID:
          maxLength: 32
          minLength: 32
          type: string
    disability_id:
      required:
        - disabilities
      type: object
      properties:
        disabilities:
          required:
            - disabilitiesId
          type: object
          properties:
            disabilitiesId:
              type: string
    domestic_violence:
      title: domesticViolence
      type: object
      properties:
        InformationDate:
          format: date-time
          type: string
        DomesticViolenceVictim:
          type: integer
        WhenOccurred:
          type: integer
        DataCollectionStage:
          type: integer
        DateCreated:
          format: date-time
          type: string
        DateUpdated:
          format: date-time
          type: string
        DateDeleted:
          format: date-time
          type: string
        UserID:
          maxLength: 32
          minLength: 32
          type: string
      required:
        - InformationDate
        - DomesticViolenceVictim
        - WhenOccurred
        - DataCollectionStage
        - DateCreated
        - DateUpdated
        - DateDeleted
        - UserID
    domestic_violence_id:
      title: domesticViolence
      type: object
      properties:
        DomesticViolenceID:
          maxLength: 32
          minLength: 32
          type: string
        ProjectEntryID:
          maxLength: 32
          minLength: 32
          type: string
        InformationDate:
          format: date-time
          type: string
        DomesticViolenceVictim:
          type: integer
        WhenOccurred:
          type: integer
        DataCollectionStage:
          type: integer
        DateCreated:
          format: date-time
          type: string
        DateUpdated:
          format: date-time
          type: string
        DateDeleted:
          format: date-time
          type: string
        UserID:
          maxLength: 32
          minLength: 32
          type: string
      required:
        - DomesticViolenceID
        - ProjectEntryID
        - InformationDate
        - DomesticViolenceVictim
        - WhenOccurred
        - DataCollectionStage
        - DateCreated
        - DateUpdated
        - DateDeleted
        - UserID
    domestic_violences_ids:
      required:
        - DomesticViolences
      type: object
      properties:
        DomesticViolences:
          required:
            - pagination
            - domesticViolences
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            domesticViolences:
              type: array
              items:
                type: object
                properties:
                  domesticViolenceId:
                    type: string
                  domesticviolencevictim:
                    type: string
                  whenoccurred:
                    type: string
                  dataCollectionStage:
                    type: integer
                  informationDate:
                    type: string
                  dateCreated:
                    type: string
                required:
                  - domesticViolenceId
                  - domesticviolencevictim
                  - whenoccurred
                  - dataCollectionStage
                  - informationDate
                  - dateCreated
    employment:
      required:
        - employment
      type: object
      properties:
        employment:
          required:
            - employed
            - employmentType
            - notEmployedReason
            - informationDate
            - dataCollectionStage
          type: object
          properties:
            employed:
              type: string
            employmentType:
              type: string
            notEmployedReason:
              type: string
            informationDate:
              type: string
            dataCollectionStage:
              type: string
    employment_id:
      required:
        - employment
      type: object
      properties:
        employment:
          required:
            - employmentId
          type: object
          properties:
            employmentId:
              type: string
    employments:
      required:
        - employments
      type: object
      properties:
        employments:
          required:
            - pagination
            - employments
          type: object
          properties:
            pagination:
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
              required:
                - from
                - returned
                - total
                - maximum
                - sort
            employments:
              type: array
              items:
                type: object
                properties:
                  employmentId:
                    type: string
                  employed:
                    type: string
                  employmentType:
                    type: string
                  notEmployedReason:
                    type: string
                  informationDate:
                    type: integer
                  dataCollectionStage:
                    type: integer
                  dateCreated:
                    type: string
                required:
                  - employmentId
                  - employed
                  - employmentType
                  - notEmployedReason
                  - informationDate
                  - dataCollectionStage
                  - dateCreated
    employments_ids:
      required:
        - employments
      type: object
      properties:
        employments:
          required:
            - pagination
            - employments
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            employments:
              type: array
              items:
                type: object
                properties:
                  employmentId:
                    type: string
                  employed:
                    type: integer
                  employmentType:
                    type: integer
                  notEmployedReason:
                    type: integer
                  informationDate:
                    type: string
                  dataCollectionStage:
                    type: integer
                  dateCreated:
                    type: string
                required:
                  - employmentId
                  - employed
                  - employmentType
                  - notEmployedReason
                  - informationDate
                  - dataCollectionStage
                  - dateCreated
    enrollment:
      required:
        - enrollment
      type: object
      properties:
        enrollment:
          required:
            - continuouslyhomelessoneyear
            - disablingcondition
            - entrydate
            - householdid
            - housingstatus
            - monthshomelesspastthreeyears
            - monthshomelessthistime
            - otherresidenceprior
            - personalid
            - projectentryid
            - relationshiptohoh
            - residenceprior
            - residencepriorlengthofstay
            - statusdocumented
            - yearshomeless
            - dateCreated
          type: object
          properties:
            continuouslyhomelessoneyear:
              type: integer
            disablingcondition:
              type: integer
            entrydate:
              type: integer
            householdid:
              type: string
            housingstatus:
              type: integer
            monthshomelesspastthreeyears:
              type: integer
            monthshomelessthistime:
              type: integer
            otherresidenceprior:
              type: string
            personalid:
              type: string
            projectentryid:
              type: string
            relationshiptohoh:
              type: integer
            residenceprior:
              type: integer
            residencepriorlengthofstay:
              type: integer
            statusdocumented:
              type: integer
            yearshomeless:
              type: integer
            dateCreated:
              type: string
    enrollment_coc:
      required:
        - enrollmentCoc
      type: object
      properties:
        enrollmentCoc:
          required:
            - informationDate
            - dataCollectionStage
            - clientCode
          type: object
          properties:
            informationDate:
              type: string
            dataCollectionStage:
              type: integer
            clientCode:
              type: string
    enrollment_coc_id:
      required:
        - enrollmentCoc
      type: object
      properties:
        enrollmentCoc:
          required:
            - enrollmentCocId
            - clientCode
            - informationDate
            - dataCollectionStage
          type: object
          properties:
            enrollmentCocId:
              type: string
            clientCode:
              type: string
            informationDate:
              type: string
            dataCollectionStage:
              type: integer
    enrollment_cocs_ids:
      required:
        - enrollmentCocs
      type: object
      properties:
        enrollmentCocs:
          required:
            - pagination
            - enrollmentCocs
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            enrollmentCocs:
              type: array
              items:
                required:
                  - enrollmentCocId
                  - informationDate
                  - dataCollectionStage
                  - clientCode
                type: object
                properties:
                  enrollmentCocId:
                    type: string
                  informationDate:
                    type: string
                  dataCollectionStage:
                    type: integer
                  clientCode:
                    type: string
    enrollment_id:
      required:
        - enrollment
      type: object
      properties:
        enrollment:
          required:
            - enrollmentid
            - continuouslyhomelessoneyear
            - disablingcondition
            - entrydate
            - householdid
            - housingstatus
            - monthshomelesspastthreeyears
            - monthshomelessthistime
            - otherresidenceprior
            - personalid
            - projectentryid
            - relationshiptohoh
            - residenceprior
            - residencepriorlengthofstay
            - statusdocumented
            - yearshomeless
            - dateCreated
          type: object
          properties:
            enrollmentid:
              type: string
            continuouslyhomelessoneyear:
              type: integer
            disablingcondition:
              type: integer
            entrydate:
              type: integer
            householdid:
              type: string
            housingstatus:
              type: integer
            monthshomelesspastthreeyears:
              type: integer
            monthshomelessthistime:
              type: integer
            otherresidenceprior:
              type: string
            personalid:
              type: string
            projectentryid:
              type: string
            relationshiptohoh:
              type: integer
            residenceprior:
              type: integer
            residencepriorlengthofstay:
              type: integer
            statusdocumented:
              type: integer
            yearshomeless:
              type: integer
            dateCreated:
              type: string
    enrollments_ids:
      required:
        - enrollments
      type: object
      properties:
        enrollments:
          required:
            - pagination
            - enrollments
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            enrollments:
              type: array
              items:
                type: object
                properties:
                  enrollmentId:
                    type: string
                  continuouslyhomelessoneyear:
                    type: string
                  disablingcondition:
                    type: string
                  entrydate:
                    type: integer
                  householdid:
                    type: string
                  housingstatus:
                    type: string
                  monthshomelesspastthreeyears:
                    type: string
                  monthshomelessthistime:
                    type: string
                  otherresidenceprior:
                    type: string
                  personalid:
                    type: string
                  projectentryid:
                    type: string
                  relationshiptohoh:
                    type: string
                  residenceprior:
                    type: string
                  residencepriorlengthofstay:
                    type: string
                  statusdocumented:
                    type: string
                  yearshomeless:
                    type: integer
                  dateCreated:
                    type: string
                required:
                  - enrollmentId
                  - continuouslyhomelessoneyear
                  - disablingcondition
                  - entrydate
                  - householdid
                  - housingstatus
                  - monthshomelesspastthreeyears
                  - monthshomelessthistime
                  - otherresidenceprior
                  - personalid
                  - projectentryid
                  - relationshiptohoh
                  - residenceprior
                  - residencepriorlengthofstay
                  - statusdocumented
                  - yearshomeless
                  - dateCreated
    exit:
      title: exit
      required:
        - ProjectEntryID
        - DateCreated
        - ExitDate
        - DateUpdated
        - UserID
      type: object
      properties:
        ProjectEntryID:
          maxLength: 32
          minLength: 32
          type: string
        ExitDate:
          format: date-time
          type: string
        Destination:
          type: integer
        OtherDestination:
          maxLength: 50
          type: string
        DateCreated:
          format: date-time
          type: string
        DateUpdated:
          format: date-time
          type: string
        DateDeleted:
          format: date-time
          type: string
        UserID:
          maxLength: 32
          minLength: 32
          type: string
    exit_housing_assessment:
      required:
        - housingassessment
      type: object
      properties:
        housingassessment:
          required:
            - housingassessment
            - subsidyinformation
          type: object
          properties:
            housingassessment:
              type: integer
            subsidyinformation:
              type: integer
    exit_housing_assessment_id:
      required:
        - housingassessment
      type: object
      properties:
        housingassessment:
          required:
            - housingassessmentId
          type: object
          properties:
            housingassessmentId:
              type: string
    exit_housing_assessments_ids:
      required:
        - exithousingassessments
      type: object
      properties:
        exithousingassessments:
          required:
            - pagination
            - exithousingassessments
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            exithousingassessments:
              type: array
              items:
                type: object
                properties:
                  exithousingassessmentId:
                    type: string
                  exithousingassessment:
                    type: integer
                  subsidyinformation:
                    type: integer
                required:
                  - exithousingassessmentId
                  - exithousingassessment
                  - subsidyinformation
    exit_id:
      title: exit
      required:
        - ExitID
        - ExitDate
        - DateCreated
        - DateUpdated
        - UserID
      type: object
      properties:
        ExitID:
          maxLength: 32
          minLength: 32
          type: string
        ProjectEntryID:
          maxLength: 32
          minLength: 32
          type: string
        ExitDate:
          format: date-time
          type: string
        Destination:
          type: integer
        OtherDestination:
          maxLength: 50
          type: string
        DateCreated:
          format: date-time
          type: string
        DateUpdated:
          format: date-time
          type: string
        DateDeleted:
          format: date-time
          type: string
        UserID:
          maxLength: 32
          minLength: 32
          type: string
    exit_plans_action:
      required:
        - exitPlansActions
      type: object
      properties:
        exitPlansActions:
          required:
            - assistancemainstreambenefits
            - exitcounseling
            - furtherfollowupservices
            - otheraftercareplanoraction
            - permanenthousingplacement
            - resourcepackage
            - scheduledfollowupcontacts
            - temporaryshelterplacement
            - writtenaftercareplan
          type: object
          properties:
            assistancemainstreambenefits:
              type: integer
            exitcounseling:
              type: integer
            furtherfollowupservices:
              type: integer
            otheraftercareplanoraction:
              type: integer
            permanenthousingplacement:
              type: integer
            resourcepackage:
              type: integer
            scheduledfollowupcontacts:
              type: integer
            temporaryshelterplacement:
              type: integer
            writtenaftercareplan:
              type: integer
    exit_plans_action_id:
      required:
        - exitPlansActions
      type: object
      properties:
        exitPlansActions:
          required:
            - exitPlansActionsId
          type: object
          properties:
            exitPlansActionsId:
              type: string
    exit_plans_actions_ids:
      required:
        - ExitPlansActionsList
      type: object
      properties:
        ExitPlansActionsList:
          required:
            - pagination
            - exitPlansActionsList
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            exitPlansActionsList:
              type: array
              items:
                type: object
                properties:
                  exitPlansActionsId:
                    type: string
                  assistancemainstreambenefits:
                    type: integer
                  exitcounseling:
                    type: integer
                  furtherfollowupservices:
                    type: integer
                  otheraftercareplanoraction:
                    type: integer
                  permanenthousingplacement:
                    type: integer
                  resourcepackage:
                    type: integer
                  scheduledfollowupcontacts:
                    type: integer
                  temporaryshelterplacement:
                    type: integer
                  writtenaftercareplan:
                    type: integer
                required:
                  - exitPlansActionsId
                  - assistancemainstreambenefits
                  - exitcounseling
                  - furtherfollowupservices
                  - otheraftercareplanoraction
                  - permanenthousingplacement
                  - resourcepackage
                  - scheduledfollowupcontacts
                  - temporaryshelterplacement
                  - writtenaftercareplan
    exits_ids:
      required:
        - exits
      type: object
      properties:
        exits:
          required:
            - pagination
            - exits
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            exits:
              type: array
              items:
                type: object
                properties:
                  exitId:
                    type: string
                  exitDate:
                    type: integer
                  otherDestination:
                    type: string
                  destination:
                    type: string
                  dateCreated:
                    type: string
                required:
                  - exitId
                  - exitDate
                  - otherDestination
                  - destination
                  - dateCreated
    family_reunification:
      required:
        - familyReunification
      type: object
      properties:
        familyReunification:
          required:
            - familyreunificationachieved
          type: object
          properties:
            familyreunificationachieved:
              type: integer
    family_reunification_id:
      required:
        - familyReunification
      type: object
      properties:
        familyReunification:
          required:
            - familyReunificationId
            - familyreunificationachieved
          type: object
          properties:
            familyReunificationId:
              type: string
            familyreunificationachieved:
              type: integer
    family_reunifications_ids:
      required:
        - FamilyReunifications
      type: object
      properties:
        FamilyReunifications:
          required:
            - pagination
            - familyReunifications
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            familyReunifications:
              type: array
              items:
                type: object
                properties:
                  familyReunificationId:
                    type: string
                  familyreunificationachieved:
                    type: integer
                required:
                  - familyReunificationId
                  - familyreunificationachieved
    former_ward_child_welfare:
      required:
        - formerwardchildwelfare
      type: object
      properties:
        formerwardchildwelfare:
          required:
            - childwelfaremonths
            - childwelfareyears
            - formerwardchildwelfare
            - informationDate
            - dataCollectionStage
          type: object
          properties:
            childwelfaremonths:
              type: integer
            childwelfareyears:
              type: integer
            formerwardchildwelfare:
              type: integer
            formerwardchildwelfareid:
              type: string
            informationDate:
              type: string
            dataCollectionStage:
              type: integer
    former_ward_child_welfare_id:
      required:
        - formerwardchildwelfare
      type: object
      properties:
        formerwardchildwelfare:
          required:
            - formerwardchildwelfareid
          type: object
          properties:
            formerwardchildwelfareid:
              type: string
    former_ward_child_welfares_ids:
      required:
        - formerwardchildwelfares
      type: object
      properties:
        formerwardchildwelfares:
          required:
            - pagination
            - formerwardchildwelfares
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            formerwardchildwelfares:
              type: array
              items:
                type: object
                properties:
                  childwelfaremonths:
                    type: integer
                  childwelfareyears:
                    type: integer
                  formerwardchildwelfare:
                    type: integer
                  formerwardchildwelfareid:
                    type: string
                  informationDate:
                    type: string
                  dataCollectionStage:
                    type: integer
                required:
                  - childwelfaremonths
                  - childwelfareyears
                  - formerwardchildwelfare
                  - formerwardchildwelfareid
                  - informationDate
                  - dataCollectionStage
    former_ward_juvenile_justice:
      required:
        - formerwardjuvenilejustice
      type: object
      properties:
        formerwardjuvenilejustice:
          required:
            - formerwardjuvenilejustice
            - juvenilejusticemonths
            - juvenilejusticeyears
            - informationDate
            - dataCollectionStage
          type: object
          properties:
            formerwardjuvenilejustice:
              type: integer
            juvenilejusticemonths:
              type: integer
            juvenilejusticeyears:
              type: integer
            informationDate:
              type: string
            dataCollectionStage:
              type: integer
    former_ward_juvenile_justice_id:
      required:
        - formerwardjuvenilejustice
      type: object
      properties:
        formerwardjuvenilejustice:
          required:
            - formerwardjuvenilejusticeid
          type: object
          properties:
            formerwardjuvenilejusticeid:
              type: string
    former_ward_juvenile_justices_ids:
      required:
        - formerwardjuvenilejustices
      type: object
      properties:
        formerwardjuvenilejustices:
          required:
            - pagination
            - formerwardjuvenilejustices
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            formerwardjuvenilejustices:
              type: array
              items:
                type: object
                properties:
                  formerwardjuvenilejusticeid:
                    type: string
                  formerwardjuvenilejustice:
                    type: integer
                  juvenilejusticemonths:
                    type: integer
                  juvenilejusticeyears:
                    type: integer
                  informationDate:
                    type: string
                  dataCollectionStage:
                    type: integer
                required:
                  - formerwardjuvenilejusticeid
                  - formerwardjuvenilejustice
                  - juvenilejusticemonths
                  - juvenilejusticeyears
                  - informationDate
                  - dataCollectionStage
    funder:
      required:
        - funder
      type: object
      properties:
        funder:
          required:
            - enddate
            - funder
            - grantid
            - startdate
            - dateCreated
            - dateUpdated
          type: object
          properties:
            enddate:
              type: string
            funder:
              type: integer
            grantid:
              type: string
            startdate:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
    funder_id:
      required:
        - funder
      type: object
      properties:
        funder:
          required:
            - funderId
            - enddate
            - funder
            - grantid
            - startdate
            - dateCreated
            - dateUpdated
          type: object
          properties:
            funderId:
              type: string
            enddate:
              type: string
            funder:
              type: integer
            grantid:
              type: string
            startdate:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
    funders_ids:
      required:
        - funders
      type: object
      properties:
        funders:
          required:
            - pagination
            - funders
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            funders:
              type: array
              items:
                type: object
                properties:
                  funderId:
                    type: string
                  funder:
                    type: integer
                  grantid:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                  enddate:
                    type: string
                  startdate:
                    type: string
                required:
                  - funderId
                  - funder
                  - grantid
                  - dateCreated
                  - dateUpdated
                  - enddate
                  - startdate
    get_all_hmis_type_names:
      required:
        - dataElements
      type: object
      properties:
        dataElements:
          required:
            - dataElements
          type: object
          properties:
            dataElements:
              uniqueItems: true
              minItems: 1
              type: array
              items:
                required:
                  - name
                properties:
                  name:
                    minLength: 1
                    type: string
                type: object
    get_all_hmis_type_value_of_hmis_type:
      required:
        - dataElements
      type: object
      properties:
        dataElements:
          required:
            - dataElements
          type: object
          properties:
            dataElements:
              uniqueItems: true
              minItems: 1
              type: array
              items:
                required:
                  - name
                  - value
                  - description
                properties:
                  name:
                    minLength: 1
                    type: string
                  value:
                    minLength: 1
                    type: string
                  description:
                    minLength: 1
                    type: string
                type: object
    get_all_survey_questions:
      required:
        - questions
      type: object
      properties:
        questions:
          required:
            - pagination
            - questions
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: number
                returned:
                  type: number
                total:
                  type: number
                maximum:
                  type: number
                sort:
                  type: object
            questions:
              uniqueItems: true
              minItems: 1
              type: array
              items:
                required:
                  - questionId
                  - questionDescription
                  - displayText
                  - questionDataType
                  - questionType
                  - picklistGroupName
                  - hudQuestionId
                properties:
                  questionId:
                    minLength: 1
                    type: string
                  questionDescription:
                    minLength: 1
                    type: string
                  displayText:
                    minLength: 1
                    type: string
                  questionDataType:
                    minLength: 1
                    type: string
                  questionType:
                    minLength: 1
                    type: string
                  picklistGroupName:
                    minLength: 1
                    type: string
                  hudQuestionId:
                    minLength: 1
                    type: string
                  links:
                    uniqueItems: true
                    minItems: 1
                    type: array
                    items:
                      required:
                        - rel
                        - href
                      properties:
                        rel:
                          minLength: 1
                          type: string
                        href:
                          minLength: 1
                          type: string
                      type: object
                type: object
    get_survey_question_by_hud_id:
      required:
        - question
      type: object
      properties:
        question:
          required:
            - questionId
            - questionDescription
            - displayText
            - questionDataType
            - questionType
            - picklistGroupName
            - hudQuestionId
            - links
          type: object
          properties:
            questionId:
              minLength: 1
              type: string
            questionDescription:
              minLength: 1
              type: string
            displayText:
              minLength: 1
              type: string
            questionDataType:
              minLength: 1
              type: string
            questionType:
              minLength: 1
              type: string
            picklistGroupName:
              minLength: 1
              type: string
            hudQuestionId:
              minLength: 1
              type: string
            links:
              uniqueItems: true
              minItems: 1
              type: array
              items:
                required:
                  - rel
                  - href
                properties:
                  rel:
                    minLength: 1
                    type: string
                  href:
                    minLength: 1
                    type: string
                type: object
    health_insurance:
      required:
        - healthInsurance
      type: object
      properties:
        healthInsurance:
          required:
            - cobra
            - employerprovided
            - insurancefromanysource
            - medicaid
            - medicare
            - nocobrareason
            - noemployerprovidedreason
            - nomedicaidreason
            - nomedicarereason
            - noprivatepayreason
            - noschipreason
            - nostatehealthinsreason
            - novamedreason
            - privatepay
            - schip
            - statehealthins
            - vamedicalservices
            - informationDate
            - dataCollectionStage
            - dateCreated
          type: object
          properties:
            cobra:
              type: integer
            employerprovided:
              type: integer
            insurancefromanysource:
              type: integer
            medicaid:
              type: integer
            medicare:
              type: integer
            nocobrareason:
              type: integer
            noemployerprovidedreason:
              type: integer
            nomedicaidreason:
              type: integer
            nomedicarereason:
              type: integer
            noprivatepayreason:
              type: integer
            noschipreason:
              type: integer
            nostatehealthinsreason:
              type: integer
            novamedreason:
              type: integer
            privatepay:
              type: integer
            schip:
              type: integer
            statehealthins:
              type: integer
            vamedicalservices:
              type: integer
            informationDate:
              type: string
            dataCollectionStage:
              type: integer
            dateCreated:
              type: string
    health_insurance_id:
      required:
        - healthInsurance
      type: object
      properties:
        healthInsurance:
          required:
            - healthInsuranceId
          type: object
          properties:
            healthInsuranceId:
              type: string
    health_insurances_ids:
      required:
        - HealthInsurances
      type: object
      properties:
        HealthInsurances:
          required:
            - pagination
            - healthInsurances
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            healthInsurances:
              type: array
              items:
                type: object
                properties:
                  healthInsuranceId:
                    type: string
                  cobra:
                    type: integer
                  employerprovided:
                    type: integer
                  insurancefromanysource:
                    type: integer
                  medicaid:
                    type: integer
                  medicare:
                    type: integer
                  nocobrareason:
                    type: integer
                  noemployerprovidedreason:
                    type: integer
                  nomedicaidreason:
                    type: integer
                  nomedicarereason:
                    type: integer
                  noprivatepayreason:
                    type: integer
                  noschipreason:
                    type: integer
                  nostatehealthinsreason:
                    type: integer
                  novamedreason:
                    type: integer
                  privatepay:
                    type: integer
                  schip:
                    type: integer
                  statehealthins:
                    type: integer
                  vamedicalservices:
                    type: integer
                  informationDate:
                    type: string
                  dataCollectionStage:
                    type: integer
                  dateCreated:
                    type: string
                required:
                  - healthInsuranceId
                  - cobra
                  - employerprovided
                  - insurancefromanysource
                  - medicaid
                  - medicare
                  - nocobrareason
                  - noemployerprovidedreason
                  - nomedicaidreason
                  - nomedicarereason
                  - noprivatepayreason
                  - noschipreason
                  - nostatehealthinsreason
                  - novamedreason
                  - privatepay
                  - schip
                  - statehealthins
                  - vamedicalservices
                  - informationDate
                  - dataCollectionStage
                  - dateCreated
    health_status:
      required:
        - healthStatus
      type: object
      properties:
        healthStatus:
          required:
            - informationDate
            - healthCategory
            - healthStatus
            - dueDate
            - dataCollectionStage
            - dateCreated
            - dateUpdated
          type: object
          properties:
            informationDate:
              type: string
            healthCategory:
              type: integer
            healthStatus:
              type: integer
            dueDate:
              type: string
            dataCollectionStage:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
    health_status_id:
      required:
        - healthStatus
      type: object
      properties:
        healthStatus:
          required:
            - healthStatusId
          type: object
          properties:
            healthStatusId:
              type: string
    health_statuses_ids:
      required:
        - healthStatuses
      type: object
      properties:
        healthStatuses:
          required:
            - pagination
            - healthStatuses
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            healthStatuses:
              type: array
              items:
                type: object
                properties:
                  healthStatusId:
                    type: string
                  informationDate:
                    type: string
                  healthCategory:
                    type: integer
                  healthStatus:
                    type: integer
                  dueDate:
                    type: string
                  dataCollectionStage:
                    type: integer
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - healthStatusId
                  - informationDate
                  - healthCategory
                  - healthStatus
                  - dueDate
                  - dataCollectionStage
                  - dateCreated
                  - dateUpdated
    housing_assessment_disposition:
      required:
        - housingAssessmentDisposition
      type: object
      properties:
        housingAssessmentDisposition:
          required:
            - assessmentdisposition
            - otherdisposition
          type: object
          properties:
            assessmentdisposition:
              type: integer
            otherdisposition:
              type: string
    housing_assessment_disposition_id:
      required:
        - housingAssessmentDisposition
      type: object
      properties:
        housingAssessmentDisposition:
          required:
            - housingAssessmentDispositionId
          type: object
          properties:
            housingAssessmentDispositionId:
              type: string
    housing_assessment_dispositions_ids:
      required:
        - HousingAssessmentDispositions
      type: object
      properties:
        HousingAssessmentDispositions:
          required:
            - pagination
            - HousingAssessmentDispositions
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            HousingAssessmentDispositions:
              type: array
              items:
                type: object
                properties:
                  housingAssessmentDispositionId:
                    type: string
                  assessmentdisposition:
                    type: integer
                  otherdisposition:
                    type: string
                required:
                  - housingAssessmentDispositionId
                  - assessmentdisposition
                  - otherdisposition
    income_and_source:
      required:
        - incomeAndSource
      type: object
      properties:
        incomeAndSource:
          required:
            - alimony
            - alimonyamount
            - childsupport
            - childsupportamount
            - earned
            - earnedamount
            - ga
            - gaamount
            - incomefromanysource
            - othersource
            - othersourceamount
            - othersourceidentify
            - pension
            - pensionamount
            - privatedisability
            - privatedisabilityamount
            - socsecretirement
            - socsecretirementamount
            - ssdi
            - ssdiamount
            - ssi
            - ssiamount
            - tanf
            - tanfamount
            - totalmonthlyincome
            - unemployment
            - unemploymentamount
            - vadisabilitynonservice
            - vadisabilitynonserviceamount
            - vadisabilityservice
            - vadisabilityserviceamount
            - workerscomp
            - workerscompamount
            - informationDate
            - dataCollectionStage
            - dateCreated
            - dateUpdated
          type: object
          properties:
            alimony:
              type: integer
            alimonyamount:
              type: integer
            childsupport:
              type: integer
            childsupportamount:
              type: integer
            earned:
              type: integer
            earnedamount:
              type: integer
            ga:
              type: integer
            gaamount:
              type: integer
            incomefromanysource:
              type: integer
            othersource:
              type: integer
            othersourceamount:
              type: integer
            othersourceidentify:
              type: string
            pension:
              type: integer
            pensionamount:
              type: integer
            privatedisability:
              type: integer
            privatedisabilityamount:
              type: integer
            socsecretirement:
              type: integer
            socsecretirementamount:
              type: integer
            ssdi:
              type: integer
            ssdiamount:
              type: integer
            ssi:
              type: integer
            ssiamount:
              type: integer
            tanf:
              type: integer
            tanfamount:
              type: integer
            totalmonthlyincome:
              type: integer
            unemployment:
              type: integer
            unemploymentamount:
              type: integer
            vadisabilitynonservice:
              type: integer
            vadisabilitynonserviceamount:
              type: integer
            vadisabilityservice:
              type: integer
            vadisabilityserviceamount:
              type: integer
            workerscomp:
              type: integer
            workerscompamount:
              type: integer
            informationDate:
              type: string
            dataCollectionStage:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
    income_and_source_id:
      required:
        - incomeAndSource
      type: object
      properties:
        incomeAndSource:
          required:
            - incomeAndSourceId
          type: object
          properties:
            incomeAndSourceId:
              type: string
    income_and_sources_ids:
      required:
        - IncomeAndSources
      type: object
      properties:
        IncomeAndSources:
          required:
            - pagination
            - incomeAndSources
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            incomeAndSources:
              type: array
              items:
                type: object
                properties:
                  incomeAndSourceId:
                    type: string
                  alimony:
                    type: integer
                  alimonyamount:
                    type: integer
                  childsupport:
                    type: integer
                  childsupportamount:
                    type: integer
                  earned:
                    type: integer
                  earnedamount:
                    type: integer
                  ga:
                    type: integer
                  gaamount:
                    type: integer
                  incomefromanysource:
                    type: integer
                  othersource:
                    type: integer
                  othersourceamount:
                    type: integer
                  othersourceidentify:
                    type: string
                  pension:
                    type: integer
                  pensionamount:
                    type: integer
                  privatedisability:
                    type: integer
                  privatedisabilityamount:
                    type: integer
                  socsecretirement:
                    type: integer
                  socsecretirementamount:
                    type: integer
                  ssdi:
                    type: integer
                  ssdiamount:
                    type: integer
                  ssi:
                    type: integer
                  ssiamount:
                    type: integer
                  tanf:
                    type: integer
                  tanfamount:
                    type: integer
                  totalmonthlyincome:
                    type: integer
                  unemployment:
                    type: integer
                  unemploymentamount:
                    type: integer
                  vadisabilitynonservice:
                    type: integer
                  vadisabilitynonserviceamount:
                    type: integer
                  vadisabilityservice:
                    type: integer
                  vadisabilityserviceamount:
                    type: integer
                  workerscomp:
                    type: integer
                  workerscompamount:
                    type: integer
                  dataCollectionStage:
                    type: integer
                  informationDate:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - incomeAndSourceId
                  - alimony
                  - alimonyamount
                  - childsupport
                  - childsupportamount
                  - earned
                  - earnedamount
                  - ga
                  - gaamount
                  - incomefromanysource
                  - othersource
                  - othersourceamount
                  - othersourceidentify
                  - pension
                  - pensionamount
                  - privatedisability
                  - privatedisabilityamount
                  - socsecretirement
                  - socsecretirementamount
                  - ssdi
                  - ssdiamount
                  - ssi
                  - ssiamount
                  - tanf
                  - tanfamount
                  - totalmonthlyincome
                  - unemployment
                  - unemploymentamount
                  - vadisabilitynonservice
                  - vadisabilitynonserviceamount
                  - vadisabilityservice
                  - vadisabilityserviceamount
                  - workerscomp
                  - workerscompamount
                  - dataCollectionStage
                  - informationDate
                  - dateCreated
                  - dateUpdated
    inventories_ids:
      required:
        - inventories
      type: object
      properties:
        inventories:
          required:
            - pagination
            - inventories
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            inventories:
              type: array
              items:
                type: object
                properties:
                  inventoryId:
                    type: string
                  availabilty:
                    type: string
                  bedtype:
                    type: integer
                  hmisparticipatingbeds:
                    type: integer
                  householdtype:
                    type: integer
                  unitinventory:
                    type: integer
                  informationDate:
                    type: string
                  dataCollectionStage:
                    type: integer
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - inventoryId
                  - availabilty
                  - bedtype
                  - hmisparticipatingbeds
                  - householdtype
                  - unitinventory
                  - informationDate
                  - dataCollectionStage
                  - dateCreated
                  - dateUpdated
    inventory:
      required:
        - inventory
      type: object
      properties:
        inventory:
          required:
            - availabilty
            - bedtype
            - hmisparticipatingbeds
            - householdtype
            - unitinventory
            - informationDate
            - dataCollectionStage
          type: object
          properties:
            availabilty:
              type: string
            bedtype:
              type: integer
            hmisparticipatingbeds:
              type: integer
            householdtype:
              type: integer
            unitinventory:
              type: integer
            informationDate:
              type: string
            dataCollectionStage:
              type: integer
    inventory_id:
      required:
        - inventory
      type: object
      properties:
        inventory:
          required:
            - inventoryId
          type: object
          properties:
            inventoryId:
              type: string
    last_grade_completed:
      required:
        - lastgradecompleted
      type: object
      properties:
        lastgradecompleted:
          required:
            - lastgradecompleted
          type: object
          properties:
            lastgradecompleted:
              type: integer
    last_grade_completed_id:
      required:
        - lastgradecompleted
      type: object
      properties:
        lastgradecompleted:
          required:
            - lastgradecompletedId
          type: object
          properties:
            lastgradecompletedId:
              type: string
    last_grade_completeds_ids:
      required:
        - lastgradecompletedList
      type: object
      properties:
        lastgradecompletedList:
          required:
            - pagination
            - lastgradecompletedList
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            lastgradecompletedList:
              type: array
              items:
                type: object
                properties:
                  lastgradecompletedId:
                    type: string
                  lastgradecompleted:
                    type: integer
                required:
                  - lastgradecompletedId
                  - lastgradecompleted
    last_permanent_address:
      required:
        - lastPermanentAddress
      type: object
      properties:
        lastPermanentAddress:
          required:
            - addressdataquality
            - lastpermanentcity
            - lastpermanentstate
            - lastpermanentstreet
            - lastpermanentzip
          type: object
          properties:
            addressdataquality:
              type: integer
            lastpermanentcity:
              type: string
            lastpermanentstate:
              type: string
            lastpermanentstreet:
              type: string
            lastpermanentzip:
              type: string
    last_permanent_address_id:
      required:
        - lastPermanentAddress
      type: object
      properties:
        lastPermanentAddress:
          required:
            - lastPermanentAddressId
          type: object
          properties:
            lastPermanentAddressId:
              type: string
    last_permanent_addresses_ids:
      required:
        - LastPermanentAddresses
      type: object
      properties:
        LastPermanentAddresses:
          required:
            - pagination
            - lastPermanentAddresses
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            lastPermanentAddresses:
              type: array
              items:
                type: string
    medical_assistance:
      required:
        - medicalassistance
      type: object
      properties:
        medicalassistance:
          required:
            - adap
            - informationDate
            - dataCollectionStage
            - dateCreated
            - dateUpdated
          type: object
          properties:
            adap:
              type: integer
            informationDate:
              type: string
            dataCollectionStage:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
    medical_assistance_id:
      required:
        - medicalassistance
      type: object
      properties:
        medicalassistance:
          required:
            - medicalassistanceId
          type: object
          properties:
            medicalassistanceId:
              type: string
    medical_assistances_ids:
      required:
        - medicalassistances
      type: object
      properties:
        medicalassistances:
          required:
            - pagination
            - medicalassistances
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            medicalassistances:
              type: array
              items:
                type: object
                properties:
                  medicalassistanceId:
                    type: string
                  adap:
                    type: integer
                  dataCollectionStage:
                    type: integer
                  informationDate:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - medicalassistanceId
                  - adap
                  - dataCollectionStage
                  - informationDate
                  - dateCreated
                  - dateUpdated
    non_cash_benefits:
      required:
        - nonCashBenefit
      type: object
      properties:
        nonCashBenefit:
          required:
            - othersource
            - othersourceidentify
            - othertanf
            - rentalassistanceongoing
            - rentalassistancetemp
            - snap
            - tanfchildcare
            - tanftransportation
            - wic
            - benefitsfromanysource
            - dataCollectionStage
            - informationDate
            - dateCreated
            - dateUpdated
          type: object
          properties:
            othersource:
              type: integer
            othersourceidentify:
              type: string
            othertanf:
              type: integer
            rentalassistanceongoing:
              type: integer
            rentalassistancetemp:
              type: integer
            snap:
              type: integer
            tanfchildcare:
              type: integer
            tanftransportation:
              type: integer
            wic:
              type: integer
            benefitsfromanysource:
              type: integer
            dataCollectionStage:
              type: integer
            informationDate:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
    non_cash_benefits_id:
      required:
        - nonCashBenefit
      type: object
      properties:
        nonCashBenefit:
          required:
            - nonCashBenefitId
            - othersource
            - othersourceidentify
            - othertanf
            - rentalassistanceongoing
            - rentalassistancetemp
            - snap
            - tanfchildcare
            - tanftransportation
            - wic
            - benefitsfromanysource
            - dataCollectionStage
            - informationDate
            - dateCreated
            - dateUpdated
          type: object
          properties:
            nonCashBenefitId:
              type: string
            othersource:
              type: integer
            othersourceidentify:
              type: string
            othertanf:
              type: integer
            rentalassistanceongoing:
              type: integer
            rentalassistancetemp:
              type: integer
            snap:
              type: integer
            tanfchildcare:
              type: integer
            tanftransportation:
              type: integer
            wic:
              type: integer
            benefitsfromanysource:
              type: integer
            dataCollectionStage:
              type: integer
            informationDate:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
    non_cash_benefitses_ids:
      required:
        - nonCashBenefits
      type: object
      properties:
        nonCashBenefits:
          required:
            - pagination
            - nonCashBenefits
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            nonCashBenefits:
              type: array
              items:
                type: object
                properties:
                  nonCashBenefitId:
                    type: string
                  othersource:
                    type: integer
                  othersourceidentify:
                    type: string
                  othertanf:
                    type: integer
                  rentalassistanceongoing:
                    type: integer
                  rentalassistancetemp:
                    type: integer
                  snap:
                    type: integer
                  tanfchildcare:
                    type: integer
                  tanftransportation:
                    type: integer
                  wic:
                    type: integer
                  benefitsfromanysource:
                    type: integer
                  dataCollectionStage:
                    type: integer
                  informationDate:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - nonCashBenefitId
                  - othersource
                  - othersourceidentify
                  - othertanf
                  - rentalassistanceongoing
                  - rentalassistancetemp
                  - snap
                  - tanfchildcare
                  - tanftransportation
                  - wic
                  - benefitsfromanysource
                  - dataCollectionStage
                  - informationDate
                  - dateCreated
                  - dateUpdated
    organization:
      required:
        - organization
      type: object
      properties:
        organization:
          required:
            - organizationName
            - organizationCommonName
          type: object
          properties:
            organizationName:
              type: string
            organizationCommonName:
              type: string
    organization_id:
      required:
        - organization
      type: object
      properties:
        organization:
          required:
            - organizationId
            - organizationCommonName
          type: object
          properties:
            organizationId:
              type: string
            organizationCommonName:
              type: string
    organization_id_only:
      required:
        - organization
      type: object
      properties:
        organization:
          required:
            - organizationId
            - organizationName
            - organizationCommonName
          type: object
          properties:
            organizationId:
              type: string
            organizationName:
              type: string
            organizationCommonName:
              type: string
    organizations_ids:
      required:
        - Organizations
      type: object
      properties:
        Organizations:
          required:
            - pagination
            - organizations
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            organizations:
              type: array
              items:
                required:
                  - organizationId
                  - organizationCommonName
                type: object
                properties:
                  organizationId:
                    type: string
                  organizationCommonName:
                    type: string
    path_status:
      required:
        - pathstatus
      type: object
      properties:
        pathstatus:
          required:
            - clientenrolledinpath
            - dateCreated
            - dateUpdated
          type: object
          properties:
            clientenrolledinpath:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
    path_status_id:
      required:
        - pathstatus
      type: object
      properties:
        pathstatus:
          required:
            - pathstatusId
            - clientenrolledinpath
            - dateCreated
            - dateUpdated
          type: object
          properties:
            pathstatusId:
              type: string
            clientenrolledinpath:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
    path_statuses_ids:
      required:
        - pathstatuses
      type: object
      properties:
        pathstatuses:
          required:
            - pagination
            - pathstatuses
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            pathstatuses:
              type: array
              items:
                type: object
                properties:
                  pathstatusId:
                    type: string
                  clientenrolledinpath:
                    type: integer
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - pathstatusId
                  - clientenrolledinpath
                  - dateCreated
                  - dateUpdated
    percent_ami:
      required:
        - percentami
      type: object
      properties:
        percentami:
          required:
            - percentage
            - dateCreated
            - dateUpdated
          type: object
          properties:
            percentage:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
    percent_ami_id:
      required:
        - percentami
      type: object
      properties:
        percentami:
          required:
            - percentamiId
            - percentage
            - dateCreated
            - dateUpdated
          type: object
          properties:
            percentamiId:
              type: string
            percentage:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
    percent_amis_ids:
      required:
        - percentamis
      type: object
      properties:
        percentamis:
          required:
            - pagination
            - percentamis
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            percentamis:
              type: array
              items:
                type: object
                properties:
                  percentamiId:
                    type: string
                  percentage:
                    type: integer
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - percentamiId
                  - percentage
                  - dateCreated
                  - dateUpdated
    project:
      required:
        - project
      type: object
      properties:
        project:
          required:
            - projectName
            - projectCommonName
            - continuumProject
            - projectType
            - residentialAffiliation
            - targetPopulation
            - trackingMethod
          type: object
          properties:
            projectName:
              type: string
            projectCommonName:
              type: string
            continuumProject:
              type: integer
            projectType:
              type: integer
            residentialAffiliation:
              type: integer
            targetPopulation:
              type: integer
            trackingMethod:
              type: integer
    project_coc:
      required:
        - projectcoc
      type: object
      properties:
        projectcoc:
          required:
            - coccode
          type: object
          properties:
            coccode:
              type: string
    project_coc_id:
      required:
        - projectcoc
      type: object
      properties:
        projectcoc:
          required:
            - projectcocId
            - coccode
          type: object
          properties:
            projectcocId:
              type: string
            coccode:
              type: string
    project_cocs_ids:
      required:
        - projectcocs
      type: object
      properties:
        projectcocs:
          required:
            - pagination
            - projectcocs
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            projectcocs:
              type: array
              items:
                type: object
                properties:
                  projectcocId:
                    type: string
                  coccode:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - projectcocId
                  - coccode
                  - dateCreated
                  - dateUpdated
    project_completion_status:
      required:
        - projectCompletionStatus
      type: object
      properties:
        projectCompletionStatus:
          required:
            - earlyExitReason
            - projectCompletionStatus
          type: object
          properties:
            earlyExitReason:
              type: integer
            projectCompletionStatus:
              type: integer
    project_completion_status_id:
      required:
        - projectCompletionStatus
      type: object
      properties:
        projectCompletionStatus:
          required:
            - projectCompletionStatusId
          type: object
          properties:
            projectCompletionStatusId:
              type: string
    project_completion_statuses_ids:
      required:
        - ProjectCompletionStatuses
      type: object
      properties:
        ProjectCompletionStatuses:
          required:
            - pagination
            - ProjectCompletionStatuses
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            ProjectCompletionStatuses:
              type: array
              items:
                type: object
                properties:
                  projectCompletionStatusId:
                    type: string
                  earlyExitReason:
                    type: integer
                  projectCompletionStatus:
                    type: integer
                required:
                  - projectCompletionStatusId
                  - earlyExitReason
                  - projectCompletionStatus
    project_id:
      required:
        - project
      type: object
      properties:
        project:
          required:
            - projectId
            - projectName
            - projectCommonName
            - continuumProject
            - projectType
            - residentialAffiliation
            - targetPopulation
            - trackingMethod
          type: object
          properties:
            projectId:
              type: string
            projectName:
              type: string
            projectCommonName:
              type: string
            continuumProject:
              type: integer
            projectType:
              type: integer
            residentialAffiliation:
              type: integer
            targetPopulation:
              type: integer
            trackingMethod:
              type: integer
    projects_ids:
      required:
        - projects
      type: object
      properties:
        projects:
          required:
            - pagination
            - projects
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            projects:
              type: array
              items:
                type: object
                properties:
                  projectId:
                    type: string
                  projectName:
                    type: string
                  projectCommonName:
                    type: string
                  continuumProject:
                    type: integer
                  projectType:
                    type: integer
                  residentialAffiliation:
                    type: integer
                  targetPopulation:
                    type: integer
                  trackingMethod:
                    type: integer
                  dateCreated:
                    type: string
                required:
                  - projectId
                  - projectName
                  - projectCommonName
                  - continuumProject
                  - projectType
                  - residentialAffiliation
                  - targetPopulation
                  - trackingMethod
                  - dateCreated
    referral_source:
      required:
        - referralsource
      type: object
      properties:
        referralsource:
          required:
            - countoutreachreferralapproaches
            - dataCollectionStage
            - informationDate
            - dateCreated
            - dateUpdated
          type: object
          properties:
            countoutreachreferralapproaches:
              type: integer
            dataCollectionStage:
              type: integer
            informationDate:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
    referral_source_id:
      required:
        - referralsource
      type: object
      properties:
        referralsource:
          required:
            - referralsourceId
            - countoutreachreferralapproaches
            - dataCollectionStage
            - informationDate
            - dateCreated
            - dateUpdated
          type: object
          properties:
            referralsourceId:
              type: string
            countoutreachreferralapproaches:
              type: integer
            dataCollectionStage:
              type: integer
            informationDate:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
    referral_sources_ids:
      required:
        - referralsources
      type: object
      properties:
        referralsources:
          required:
            - pagination
            - referralsources
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            referralsources:
              type: array
              items:
                type: object
                properties:
                  referralsourceId:
                    type: string
                  countoutreachreferralapproaches:
                    type: integer
                  dataCollectionStage:
                    type: integer
                  informationDate:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - referralsourceId
                  - countoutreachreferralapproaches
                  - dataCollectionStage
                  - informationDate
                  - dateCreated
                  - dateUpdated
    residential_move_in:
      required:
        - residentialmovein
      type: object
      properties:
        residentialmovein:
          required:
            - residentialmoveinId
            - inpermanenthousing
            - dateCreated
            - dateUpdated
          type: object
          properties:
            residentialmoveinId:
              type: string
            inpermanenthousing:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
    residential_move_in_id:
      required:
        - residentialmovein
      type: object
      properties:
        residentialmovein:
          required:
            - residentialmoveindateId
          type: object
          properties:
            residentialmoveindateId:
              type: string
    residential_move_ins_ids:
      required:
        - residentialmoveins
      type: object
      properties:
        residentialmoveindates:
          required:
            - pagination
            - residentialmoveins
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            residentialmoveins:
              type: array
              items:
                type: object
                properties:
                  residentialmoveinId:
                    type: string
                  inpermanenthousing:
                    type: integer
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - residentialmoveinId
                  - inpermanenthousing
                  - dateCreated
                  - dateUpdated
    rhy_bcp_status:
      required:
        - rhybcpstatus
      type: object
      properties:
        rhybcpstatus:
          required:
            - dateCreated
            - dateUpdated
            - statusDate
          type: object
          properties:
            dateCreated:
              type: string
            dateUpdated:
              type: string
            statusDate:
              type: string
    rhy_bcp_status_id:
      required:
        - rhybcpstatus
      type: object
      properties:
        rhybcpstatus:
          required:
            - rhybcpstatusId
          type: object
          properties:
            rhybcpstatusId:
              type: string
    rhy_bcp_statuses_ids:
      required:
        - rhybcpstatuses
      type: object
      properties:
        rhybcpstatuses:
          required:
            - pagination
            - rhybcpstatuses
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            rhybcpstatuses:
              type: array
              items:
                type: object
                properties:
                  rhybcpstatusId:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                  statusDate:
                    type: string
                required:
                  - rhybcpstatusId
                  - dateCreated
                  - dateUpdated
                  - statusDate
    school_status:
      required:
        - schoolstatus
      type: object
      properties:
        schoolstatus:
          required:
            - dateCreated
            - dateUpdated
            - informationDate
          type: object
          properties:
            dateCreated:
              type: string
            dateUpdated:
              type: string
            informationDate:
              type: string
    school_status_id:
      required:
        - schoolstatus
      type: object
      properties:
        schoolstatus:
          required:
            - schoolstatusId
            - dateCreated
            - dateUpdated
            - informationDate
          type: object
          properties:
            schoolstatusId:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
            informationDate:
              type: string
    school_statuses_ids:
      required:
        - schoolstatuses
      type: object
      properties:
        schoolstatuses:
          required:
            - pagination
            - schoolstatuses
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            schoolstatuses:
              type: array
              items:
                type: object
                properties:
                  schoolstatusId:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                  informationDate:
                    type: string
                required:
                  - schoolstatusId
                  - dateCreated
                  - dateUpdated
                  - informationDate
    service:
      required:
        - services
      type: object
      properties:
        services:
          required:
            - dateprovided
            - faamount
            - recordtype
            - referraloutcome
            - subtypeprovided
            - typeprovided
            - dateCreated
            - dateUpdated
          type: object
          properties:
            dateprovided:
              type: integer
            faamount:
              type: integer
            recordtype:
              type: integer
            referraloutcome:
              type: integer
            subtypeprovided:
              type: integer
            typeprovided:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
    service_id:
      required:
        - services
      type: object
      properties:
        services:
          required:
            - servicesId
            - dateprovided
            - faamount
            - recordtype
            - referraloutcome
            - subtypeprovided
            - typeprovided
            - dateCreated
            - dateUpdated
          type: object
          properties:
            servicesId:
              type: string
            dateprovided:
              type: integer
            faamount:
              type: integer
            recordtype:
              type: integer
            referraloutcome:
              type: integer
            subtypeprovided:
              type: integer
            typeprovided:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
    services_ids:
      required:
        - ServicesList
      type: object
      properties:
        ServicesList:
          required:
            - pagination
            - servicesList
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            servicesList:
              type: array
              items:
                type: object
                properties:
                  servicesId:
                    type: string
                  dateprovided:
                    type: integer
                  faamount:
                    type: integer
                  recordtype:
                    type: integer
                  referraloutcome:
                    type: integer
                  subtypeprovided:
                    type: integer
                  typeprovided:
                    type: integer
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - servicesId
                  - dateprovided
                  - faamount
                  - recordtype
                  - referraloutcome
                  - subtypeprovided
                  - typeprovided
                  - dateCreated
                  - dateUpdated
    sexual_orientation:
      required:
        - sexualorientation
      type: object
      properties:
        sexualorientation:
          required:
            - sexualorientation
            - dataCollectionStage
            - informationDate
            - dateCreated
            - dateUpdated
          type: object
          properties:
            sexualorientation:
              type: integer
            dataCollectionStage:
              type: integer
            informationDate:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
    sexual_orientation_id:
      required:
        - sexualorientation
      type: object
      properties:
        sexualorientation:
          required:
            - sexualorientationId
            - sexualorientation
            - dataCollectionStage
            - informationDate
            - dateCreated
            - dateUpdated
          type: object
          properties:
            sexualorientationId:
              type: string
            sexualorientation:
              type: integer
            dataCollectionStage:
              type: integer
            informationDate:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
    sexual_orientations_ids:
      required:
        - sexualorientations
      type: object
      properties:
        sexualorientations:
          required:
            - pagination
            - sexualorientations
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            sexualorientations:
              type: array
              items:
                type: object
                properties:
                  sexualorientationId:
                    type: string
                  sexualorientation:
                    type: integer
                  dataCollectionStage:
                    type: integer
                  informationDate:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - sexualorientationId
                  - sexualorientation
                  - dataCollectionStage
                  - informationDate
                  - dateCreated
                  - dateUpdated
    site:
      required:
        - site
      type: object
      properties:
        site:
          type: object
          properties:
            address:
              type: string
            city:
              type: string
            geocode:
              type: integer
            principalsite:
              type: integer
            state:
              type: string
            zip:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
          required:
            - address
            - city
            - geocode
            - principalsite
            - state
            - zip
            - dateCreated
            - dateUpdated
    site_id:
      required:
        - site
      type: object
      properties:
        site:
          required:
            - siteId
          type: object
          properties:
            siteId:
              type: string
            address:
              type: string
            city:
              type: string
            geocode:
              type: integer
            principalsite:
              type: integer
            state:
              type: string
            zip:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
    sites_ids:
      required:
        - sites
      type: object
      properties:
        sites:
          required:
            - pagination
            - sites
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            sites:
              type: array
              items:
                type: object
                properties:
                  siteId:
                    type: string
                  address:
                    type: string
                  city:
                    type: string
                  geocode:
                    type: integer
                  principalsite:
                    type: integer
                  state:
                    type: string
                  zip:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - siteId
                  - address
                  - city
                  - geocode
                  - principalsite
                  - state
                  - zip
                  - dateCreated
                  - dateUpdated
    veteran_info:
      required:
        - veteranInfo
      type: object
      properties:
        veteranInfo:
          required:
            - yearEntrdService
            - yearSeperated
            - worldWar2
            - koreanWar
            - vietnamWar
            - desertStorm
            - afghanistanOef
            - iraqOif
            - iraqOnd
            - otherTheater
            - militaryBranch
            - dischargeStatus
          type: object
          properties:
            yearEntrdService:
              type: integer
            yearSeperated:
              type: integer
            worldWar2:
              type: integer
            koreanWar:
              type: integer
            vietnamWar:
              type: integer
            desertStorm:
              type: integer
            afghanistanOef:
              type: integer
            iraqOif:
              type: integer
            iraqOnd:
              type: integer
            otherTheater:
              type: integer
            militaryBranch:
              type: integer
            dischargeStatus:
              type: integer
    veteran_info_id:
      required:
        - veteranInfo
      type: object
      properties:
        veteranInfo:
          required:
            - veteranInfoId
            - yearEntrdService
            - yearSeperated
            - worldWar2
            - koreanWar
            - vietnamWar
            - desertStorm
            - afghanistanOef
            - iraqOif
            - iraqOnd
            - otherTheater
            - militaryBranch
            - dischargeStatus
          type: object
          properties:
            veteranInfoId:
              type: string
            yearEntrdService:
              type: integer
            yearSeperated:
              type: integer
            worldWar2:
              type: integer
            koreanWar:
              type: integer
            vietnamWar:
              type: integer
            desertStorm:
              type: integer
            afghanistanOef:
              type: integer
            iraqOif:
              type: integer
            iraqOnd:
              type: integer
            otherTheater:
              type: integer
            militaryBranch:
              type: integer
            dischargeStatus:
              type: integer
    veteran_infos_ids:
      required:
        - veteranInfos
      type: object
      properties:
        veteranInfos:
          required:
            - pagination
            - veteranInfos
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            veteranInfos:
              type: array
              items:
                type: object
                properties:
                  veteranInfoId:
                    type: string
                  yearEntrdService:
                    type: integer
                  yearSeperated:
                    type: integer
                  worldWar2:
                    type: integer
                  koreanWar:
                    type: integer
                  vietnamWar:
                    type: integer
                  desertStorm:
                    type: integer
                  afghanistanOef:
                    type: integer
                  iraqOif:
                    type: integer
                  iraqOnd:
                    type: integer
                  otherTheater:
                    type: integer
                  militaryBranch:
                    type: integer
                  dischargeStatus:
                    type: integer
                required:
                  - veteranInfoId
                  - yearEntrdService
                  - yearSeperated
                  - worldWar2
                  - koreanWar
                  - vietnamWar
                  - desertStorm
                  - afghanistanOef
                  - iraqOif
                  - iraqOnd
                  - otherTheater
                  - militaryBranch
                  - dischargeStatus
    worst_housing_situation:
      required:
        - worstHousingSituation
      type: object
      properties:
        worstHousingSituation:
          required:
            - worsthousingsituation
            - dateCreated
            - dateUpdated
          type: object
          properties:
            worsthousingsituation:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
    worst_housing_situation_id:
      required:
        - worstHousingSituation
      type: object
      properties:
        worstHousingSituation:
          type: object
          properties:
            worstHousingSituationId:
              type: string
            worsthousingsituation:
              type: integer
            dateCreated:
              type: string
            dateUpdated:
              type: string
          required:
            - worstHousingSituationId
            - worsthousingsituation
            - dateCreated
            - dateUpdated
    worst_housing_situations_ids:
      required:
        - worstHousingSituations
      type: object
      properties:
        worstHousingSituations:
          required:
            - pagination
            - worstHousingSituations
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            worstHousingSituations:
              type: array
              items:
                type: object
                properties:
                  worstHousingSituationId:
                    type: string
                  worsthousingsituation:
                    type: integer
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - worstHousingSituationId
                  - worsthousingsituation
                  - dateCreated
                  - dateUpdated
    youth_critical_issue:
      required:
        - youthCriticalIssue
      type: object
      properties:
        youthCriticalIssue:
          required:
            - abuseandneglectfam
            - abuseandneglectyouth
            - activemilitaryparent
            - alcoholdrugabusefam
            - alcoholdrugabuseyouth
            - healthissuesfam
            - healthissuesyouth
            - householddynamics
            - housingissuesfam
            - housingissuesyouth
            - incarceratedparent
            - incarceratedparentstatus
            - insufficientincome
            - mentaldisabilityfam
            - mentaldisabilityyouth
            - mentalhealthissuesfam
            - mentalhealthissuesyouth
            - physicaldisabilityfam
            - physicaldisabilityyouth
            - schooleducationalissuesfam
            - schooleducationalissuesyouth
            - sexualorientationgenderidfam
            - sexualorientationgenderidyouth
            - unemploymentfam
            - unemploymentyouth
            - dataCollectionStage
            - informationDate
            - dateCreated
            - dateUpdated
          type: object
          properties:
            abuseandneglectfam:
              type: integer
            abuseandneglectyouth:
              type: integer
            activemilitaryparent:
              type: integer
            alcoholdrugabusefam:
              type: integer
            alcoholdrugabuseyouth:
              type: integer
            healthissuesfam:
              type: integer
            healthissuesyouth:
              type: integer
            householddynamics:
              type: integer
            housingissuesfam:
              type: integer
            housingissuesyouth:
              type: integer
            incarceratedparent:
              type: integer
            incarceratedparentstatus:
              type: integer
            insufficientincome:
              type: integer
            mentaldisabilityfam:
              type: integer
            mentaldisabilityyouth:
              type: integer
            mentalhealthissuesfam:
              type: integer
            mentalhealthissuesyouth:
              type: integer
            physicaldisabilityfam:
              type: integer
            physicaldisabilityyouth:
              type: integer
            schooleducationalissuesfam:
              type: integer
            schooleducationalissuesyouth:
              type: integer
            sexualorientationgenderidfam:
              type: integer
            sexualorientationgenderidyouth:
              type: integer
            unemploymentfam:
              type: integer
            unemploymentyouth:
              type: integer
            dataCollectionStage:
              type: integer
            informationDate:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
    youth_critical_issue_id:
      required:
        - youthCriticalIssue
      type: object
      properties:
        youthCriticalIssue:
          required:
            - youthCriticalIssuesId
            - abuseandneglectfam
            - abuseandneglectyouth
            - activemilitaryparent
            - alcoholdrugabusefam
            - alcoholdrugabuseyouth
            - healthissuesfam
            - healthissuesyouth
            - householddynamics
            - housingissuesfam
            - housingissuesyouth
            - incarceratedparent
            - incarceratedparentstatus
            - insufficientincome
            - mentaldisabilityfam
            - mentaldisabilityyouth
            - mentalhealthissuesfam
            - mentalhealthissuesyouth
            - physicaldisabilityfam
            - physicaldisabilityyouth
            - schooleducationalissuesfam
            - schooleducationalissuesyouth
            - sexualorientationgenderidfam
            - sexualorientationgenderidyouth
            - unemploymentfam
            - unemploymentyouth
            - dataCollectionStage
            - informationDate
            - dateCreated
            - dateUpdated
          type: object
          properties:
            youthCriticalIssuesId:
              type: string
            abuseandneglectfam:
              type: integer
            abuseandneglectyouth:
              type: integer
            activemilitaryparent:
              type: integer
            alcoholdrugabusefam:
              type: integer
            alcoholdrugabuseyouth:
              type: integer
            healthissuesfam:
              type: integer
            healthissuesyouth:
              type: integer
            householddynamics:
              type: integer
            housingissuesfam:
              type: integer
            housingissuesyouth:
              type: integer
            incarceratedparent:
              type: integer
            incarceratedparentstatus:
              type: integer
            insufficientincome:
              type: integer
            mentaldisabilityfam:
              type: integer
            mentaldisabilityyouth:
              type: integer
            mentalhealthissuesfam:
              type: integer
            mentalhealthissuesyouth:
              type: integer
            physicaldisabilityfam:
              type: integer
            physicaldisabilityyouth:
              type: integer
            schooleducationalissuesfam:
              type: integer
            schooleducationalissuesyouth:
              type: integer
            sexualorientationgenderidfam:
              type: integer
            sexualorientationgenderidyouth:
              type: integer
            unemploymentfam:
              type: integer
            unemploymentyouth:
              type: integer
            dataCollectionStage:
              type: integer
            informationDate:
              type: string
            dateCreated:
              type: string
            dateUpdated:
              type: string
    youth_critical_issues_ids:
      required:
        - youthCriticalIssues
      type: object
      properties:
        youthCriticalIssues:
          required:
            - pagination
            - youthCriticalIssues
          type: object
          properties:
            pagination:
              required:
                - from
                - returned
                - total
                - maximum
                - sort
              type: object
              properties:
                from:
                  type: integer
                returned:
                  type: integer
                total:
                  type: integer
                maximum:
                  type: integer
                sort:
                  type: object
            youthCriticalIssues:
              type: array
              items:
                type: object
                properties:
                  youthCriticalIssuesId:
                    type: string
                  abuseandneglectfam:
                    type: integer
                  abuseandneglectyouth:
                    type: integer
                  activemilitaryparent:
                    type: integer
                  alcoholdrugabusefam:
                    type: integer
                  alcoholdrugabuseyouth:
                    type: integer
                  healthissuesfam:
                    type: integer
                  healthissuesyouth:
                    type: integer
                  householddynamics:
                    type: integer
                  housingissuesfam:
                    type: integer
                  housingissuesyouth:
                    type: integer
                  incarceratedparent:
                    type: integer
                  incarceratedparentstatus:
                    type: integer
                  insufficientincome:
                    type: integer
                  mentaldisabilityfam:
                    type: integer
                  mentaldisabilityyouth:
                    type: integer
                  mentalhealthissuesfam:
                    type: integer
                  mentalhealthissuesyouth:
                    type: integer
                  physicaldisabilityfam:
                    type: integer
                  physicaldisabilityyouth:
                    type: integer
                  schooleducationalissuesfam:
                    type: integer
                  schooleducationalissuesyouth:
                    type: integer
                  sexualorientationgenderidfam:
                    type: integer
                  sexualorientationgenderidyouth:
                    type: integer
                  unemploymentfam:
                    type: integer
                  unemploymentyouth:
                    type: integer
                  dataCollectionStage:
                    type: integer
                  informationDate:
                    type: string
                  dateCreated:
                    type: string
                  dateUpdated:
                    type: string
                required:
                  - youthCriticalIssuesId
                  - abuseandneglectfam
                  - abuseandneglectyouth
                  - activemilitaryparent
                  - alcoholdrugabusefam
                  - alcoholdrugabuseyouth
                  - healthissuesfam
                  - healthissuesyouth
                  - householddynamics
                  - housingissuesfam
                  - housingissuesyouth
                  - incarceratedparent
                  - incarceratedparentstatus
                  - insufficientincome
                  - mentaldisabilityfam
                  - mentaldisabilityyouth
                  - mentalhealthissuesfam
                  - mentalhealthissuesyouth
                  - physicaldisabilityfam
                  - physicaldisabilityyouth
                  - schooleducationalissuesfam
                  - schooleducationalissuesyouth
                  - sexualorientationgenderidfam
                  - sexualorientationgenderidyouth
                  - unemploymentfam
                  - unemploymentyouth
                  - dataCollectionStage
                  - informationDate
                  - dateCreated
                  - dateUpdated
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    oauth_2_0:
      description: |
        The HMIS API supports OAuth 2.0 for authenticating all API requests.
      type: oauth2
      flows:
        password:
          tokenUrl: 'https://hmislynk.com/hmis-authorization-service/rest/token'
          scopes:
            user: ''
            administrator: ''
  links: {}
  callbacks: {}