openapi: 3.0.0
info:
  title: 2014 HMIS
  version: 1.3.0
  description: |
       **Note :**
              Please note that the partial updates are supported via PUT APIs. However, Note that If "null" value is passed for any element, in the PUT request body, it will be ignored. An empty string value should be sent (instead of "null" value) for the elements that need to be updated with NULL values.
servers:
  - url: 'https://api.hslynk.com/hmis-clientapi/rest/v2014'
paths:
  /clients:
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "clients"
                  ],
                  "properties": {
                    "clients": {
                      "type": "object",
                      "required": [
                        "pagination",
                        "clients"
                      ],
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "required": [
                            "from",
                            "returned",
                            "total",
                            "maximum",
                            "sort"
                          ],
                          "properties": {
                            "from": {
                              "type": "integer"
                            },
                            "returned": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            },
                            "maximum": {
                              "type": "integer"
                            },
                            "sort": {
                              "type": "object"
                            }
                          }
                        },
                        "clients": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "links",
                              "clientId",
                              "dedupClientId",
                              "firstName",
                              "middleName",
                              "lastName",
                              "nameSuffix",
                              "nameDataQuality",
                              "ssn",
                              "ssnDataQuality",
                              "dob",
                              "dobDataQuality",
                              "race",
                              "ethnicity",
                              "gender",
                              "otherGender",
                              "phoneNumber",
                              "emailAddress"
                            ],
                            "properties": {
                              "links": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "rel",
                                    "href"
                                  ],
                                  "properties": {
                                    "rel": {
                                      "type": "string",
                                    },
                                    "href": {
                                      "type": "string",
                                    }
                                  }
                                }
                              },
                              "clientId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "dedupClientId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "firstName": {
                                "type": "string",
                              },
                              "middleName": {
                                "type": "string",
                              },
                              "lastName": {
                                "type": "string",
                              },
                              "nameSuffix": {
                                "type": "string",
                              },
                              "nameDataQuality": {
                                "type": "string",
                              },
                              "ssn": {
                                "type": "string",
                              },
                              "ssnDataQuality": {
                                "type": "string",
                              },
                              "dob": {
                                "type": "integer"
                              },
                              "dobDataQuality": {
                                "type": "string",
                              },
                              "race": {
                                "type": "string",
                              },
                              "ethnicity": {
                                "type": "string",
                              },
                              "gender": {
                                "type": "string",
                              },
                              "otherGender": {
                                "type": "string",
                              },
                              "phoneNumber": {
                                "type": "string",
                              },
                              "emailAddress": {
                                "type": "string",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              example:
                    clients:
                      pagination:
                        from: 0
                        returned: 1
                        total: 3
                        maximum: 30
                        sort: {}
                      clients:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/history"
                          clientId: 717661f4-eaa3-4298-8739-789ab8a1f3d1
                          dedupClientId: b7eb6be3-1ed3-49f4-a0c9-ae78d7f386fd
                          firstName: 'FirstName '
                          middleName: Middle Name
                          lastName: LAST NAME
                          nameSuffix: NS
                          nameDataQuality: '1'
                          ssn: 'ssn      '
                          ssnDataQuality: '1'
                          dob: 1458035236115
                          dobDataQuality: '1'
                          race: '1'
                          ethnicity: '1'
                          gender: '1'
                          otherGender: 'Test      '
                          phoneNumber: 1-541-754-3010
                          emailAddress: Jeanette@gmail.com
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for client.  Returns a list of client ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "clients"
                  ],
                  "properties": {
                    "clients": {
                      "type": "object",
                      "required": [
                        "clientId"
                      ],
                      "properties": {
                        "clientId": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              example:

                  client:
                    clientId: 717661f4-eaa3-4298-8739-789ab8a1f3d1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
                    1)  an SSN value submitted as an empty string (not null) will be treatedand stored by HSLynk as a nullified/deleted SSN data element
                    2) a full 9 digit SSN may be submitted
                    3) a partial SSN may be submitted, but one or more lower case 'x'(s) must be present in the locations of the missing actual SSN digits.
      operationId: POST_clients
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "client"
                  ],
                  "properties": {
                    "client": {
                      "type": "object",
                      "required": [
                        "firstName",
                        "middleName",
                        "lastName",
                        "nameSuffix",
                        "nameDataQuality",
                        "ssn",
                        "ssnDataQuality",
                        "dob",
                        "dobDataQuality",
                        "race",
                        "ethnicity",
                        "gender",
                        "otherGender",
                        "phoneNumber",
                        "emailAddress"
                      ],
                      "properties": {
                        "firstName": {
                          "type": "string",
                        },
                        "middleName": {
                          "type": "string",
                        },
                        "lastName": {
                          "type": "string",
                        },
                        "nameSuffix": {
                          "type": "string",
                        },
                        "nameDataQuality": {
                          "type": "string",
                        },
                        "ssn": {
                          "type": "string",
                        },
                        "ssnDataQuality": {
                          "type": "string",
                        },
                        "dob": {
                          "type": "integer"
                        },
                        "dobDataQuality": {
                          "type": "string",
                        },
                        "race": {
                          "type": "string",
                        },
                        "ethnicity": {
                          "type": "string",
                        },
                        "gender": {
                          "type": "string",
                        },
                        "otherGender": {
                          "type": "string",
                        },
                        "phoneNumber": {
                          "type": "string",
                        },
                        "emailAddress": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  client:
                    firstName: ' first name'
                    middleName: Middle Name
                    lastName: LAST NAME
                    nameSuffix: NS
                    nameDataQuality: '1'
                    ssn: 123-45-6789
                    ssnDataQuality: '1'
                    dob: 1458035236115
                    dobDataQuality: '1'
                    race: '1'
                    ethnicity: '1'
                    gender: '1'
                    otherGender: 'Test      '
                    phoneNumber: 1-541-754-3010
                    emailAddress: Jeanette@gmail.com
        required: true
  '/clients/{clientid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "client"
                    ],
                    "properties": {
                      "client": {
                        "type": "object",
                        "required": [
                          "links",
                          "clientId",
                          "firstName",
                          "middleName",
                          "lastName",
                          "nameSuffix",
                          "nameDataQuality",
                          "ssn",
                          "ssnDataQuality",
                          "dob",
                          "dobDataQuality",
                          "race",
                          "ethnicity",
                          "gender",
                          "otherGender",
                          "phoneNumber",
                          "emailAddress"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "clientId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "firstName": {
                            "type": "string",
                          },
                          "middleName": {
                            "type": "string",
                          },
                          "lastName": {
                            "type": "string",
                          },
                          "nameSuffix": {
                            "type": "string",
                          },
                          "nameDataQuality": {
                            "type": "string",
                          },
                          "ssn": {
                            "type": "string",
                          },
                          "ssnDataQuality": {
                            "type": "string",
                          },
                          "dob": {
                            "type": "integer"
                          },
                          "dobDataQuality": {
                            "type": "string",
                          },
                          "race": {
                            "type": "string",
                          },
                          "ethnicity": {
                            "type": "string",
                          },
                          "gender": {
                            "type": "string",
                          },
                          "otherGender": {
                            "type": "string",
                          },
                          "phoneNumber": {
                            "type": "string",
                          },
                          "emailAddress": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    client:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/history"
                        clientId: 717661f4-eaa3-4298-8739-789ab8a1f3d1
                        firstName: ' first name'
                        middleName: Middle Name
                        lastName: LAST NAME
                        nameSuffix: NS
                        nameDataQuality: '1'
                        ssn: 123-45-6789
                        ssnDataQuality: '1'
                        dob: 1458035236115
                        dobDataQuality: '1'
                        race: '1'
                        ethnicity: '1'
                        gender: '1'
                        otherGender: 'Test      '
                        phoneNumber: 1-541-754-3010
                        emailAddress: Jeanette@gmail.com
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a client using a URI resource parameter/ID.
      operationId: GET_clients-clientid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: |
                      Updates a specific client specified by the URI resource parameter/ID.
                      1)  an SSN value submitted as an empty string (not null) will be treate dand stored by HSLynk as a nullified/deleted SSN data element
                      2) a full 9 digit SSN may be submitted
                      3) a partial SSN may be submitted, but one or more lower case 'x'(s) must be present in the locations of the missing actual SSN digits.
      operationId: PUT_clients-clientid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "client"
                  ],
                  "properties": {
                    "client": {
                      "type": "object",
                      "required": [
                        "firstName",
                        "middleName",
                        "lastName",
                        "nameSuffix",
                        "nameDataQuality",
                        "ssn",
                        "ssnDataQuality",
                        "dob",
                        "dobDataQuality",
                        "race",
                        "ethnicity",
                        "gender",
                        "otherGender",
                        "phoneNumber",
                        "emailAddress"
                      ],
                      "properties": {
                        "firstName": {
                          "type": "string",
                        },
                        "middleName": {
                          "type": "string",
                        },
                        "lastName": {
                          "type": "string",
                        },
                        "nameSuffix": {
                          "type": "string",
                        },
                        "nameDataQuality": {
                          "type": "string",
                        },
                        "ssn": {
                          "type": "string",
                        },
                        "ssnDataQuality": {
                          "type": "string",
                        },
                        "dob": {
                          "type": "integer"
                        },
                        "dobDataQuality": {
                          "type": "string",
                        },
                        "race": {
                          "type": "string",
                        },
                        "ethnicity": {
                          "type": "string",
                        },
                        "gender": {
                          "type": "string",
                        },
                        "otherGender": {
                          "type": "string",
                        },
                        "phoneNumber": {
                          "type": "string",
                        },
                        "emailAddress": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  client:
                    firstName: ' first name'
                    middleName: Middle Name
                    lastName: LAST NAME
                    nameSuffix: NS
                    nameDataQuality: '1'
                    ssn: 123-45-6789
                    ssnDataQuality: '1'
                    dob: 1458035236115
                    dobDataQuality: '1'
                    race: '1'
                    ethnicity: '1'
                    gender: '1'
                    otherGender: 'Test      '
                    phoneNumber: 1-541-754-3010
                    emailAddress: Jeanette@gmail.com
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific client specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Clients"
                    ],
                    "properties": {
                      "Clients": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "clients"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "clients": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "clientId",
                                "dedupClientId",
                                "firstName",
                                "middleName",
                                "lastName",
                                "nameSuffix",
                                "nameDataQuality",
                                "ssn",
                                "ssnDataQuality",
                                "dob",
                                "dobDataQuality",
                                "race",
                                "ethnicity",
                                "gender",
                                "otherGender",
                                "phoneNumber",
                                "emailAddress"
                              ],
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dedupClientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "firstName": {
                                  "type": "string",
                                },
                                "middleName": {
                                  "type": "string",
                                },
                                "lastName": {
                                  "type": "string",
                                },
                                "nameSuffix": {
                                  "type": "string",
                                },
                                "nameDataQuality": {
                                  "type": "string",
                                },
                                "ssn": {
                                  "type": "string",
                                },
                                "ssnDataQuality": {
                                  "type": "string",
                                },
                                "dob": {
                                  "type": "integer"
                                },
                                "dobDataQuality": {
                                  "type": "string",
                                },
                                "race": {
                                  "type": "string",
                                },
                                "ethnicity": {
                                  "type": "string",
                                },
                                "gender": {
                                  "type": "string",
                                },
                                "otherGender": {
                                  "type": "string",
                                },
                                "phoneNumber": {
                                  "type": "string",
                                },
                                "emailAddress": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    Clients:
                      pagination:
                        from: 0
                        returned: 1
                        total: 3
                        maximum: 30
                        sort: {}
                      clients:
                        - clientId: 717661f4-eaa3-4298-8739-789ab8a1f3d1
                          dedupClientId: b7eb6be3-1ed3-49f4-a0c9-ae78d7f386fd
                          firstName: 'FirstName '
                          middleName: Middle Name
                          lastName: LAST NAME
                          nameSuffix: NS
                          nameDataQuality: '1'
                          ssn: 'ssn      '
                          ssnDataQuality: '1'
                          dob: 1458035236115
                          dobDataQuality: '1'
                          race: '1'
                          ethnicity: '1'
                          gender: '1'
                          otherGender: 'Test      '
                          phoneNumber: 1-541-754-3010
                          emailAddress: Jeanette@gmail.com
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for client history.  Returns a list of client ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollments"
                    ],
                    "properties": {
                      "enrollments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "enrollments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "enrollments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "enrollmentId",
                                "continuouslyhomelessoneyear",
                                "disablingcondition",
                                "entrydate",
                                "householdid",
                                "housingstatus",
                                "monthshomelesspastthreeyears",
                                "monthshomelessthistime",
                                "otherresidenceprior",
                                "personalid",
                                "projectentryid",
                                "relationshiptohoh",
                                "residenceprior",
                                "residencepriorlengthofstay",
                                "statusdocumented",
                                "yearshomeless",
                                "chronicHomeless"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "continuouslyhomelessoneyear": {
                                  "type": "string",
                                },
                                "disablingcondition": {
                                  "type": "string",
                                },
                                "entrydate": {
                                  "type": "integer"
                                },
                                "householdid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingstatus": {
                                  "type": "string",
                                },
                                "monthshomelesspastthreeyears": {
                                  "type": "string",
                                },
                                "monthshomelessthistime": {
                                  "type": "string",
                                },
                                "otherresidenceprior": {
                                  "type": "string",
                                },
                                "personalid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "projectentryid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "relationshiptohoh": {
                                  "type": "string",
                                },
                                "residenceprior": {
                                  "type": "string",
                                },
                                "residencepriorlengthofstay": {
                                  "type": "string",
                                },
                                "statusdocumented": {
                                  "type": "string",
                                },
                                "yearshomeless": {
                                  "type": "integer"
                                },
                                "chronicHomeless" : {
                                  "type": "integer"
                                },
                                "hmisHouseholdId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "genericHouseHoldId":{
                                  "type": "string",
                                  "format": "uuid",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollments:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/history"
                          - rel: hmisHouseHold
                            href: "/hmis-clientapi/rest/v2014/hmishouseholds/8e956388-b909-41ea-b1d0-203e9cc15c45/"
                          enrollmentId: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1                          
                          continuouslyhomelessoneyear: '1'
                          disablingcondition: '0'
                          entrydate: 1458035288480
                          householdid: 14aa2237-f147-4751-997b-040d9c023998
                          housingstatus: '1'
                          monthshomelesspastthreeyears: '7'
                          monthshomelessthistime: '1'
                          otherresidenceprior: '1'
                          personalid: a8b1ac45-f3c9-4d12-9ac7-46bccbf14a7e
                          projectentryid: 93284e88-515c-4bb8-9246-b1f419106649
                          relationshiptohoh: '2'
                          residenceprior: '2'
                          residencepriorlengthofstay: '2'
                          statusdocumented: '1'
                          yearshomeless: 2
                          chronicHomeless: 1
                          hmisHouseholdId: 8e956388-b909-41ea-b1d0-203e9cc15c45
                          genericHouseHoldId: 1520d4ac-2998-4825-80a6-2f550c37f3f1                          
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollment.  Returns a list of enrollment ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollment"
                    ],
                    "properties": {
                      "enrollment": {
                        "type": "object",
                        "required": [
                          "enrollmentid"
                        ],
                        "properties": {
                          "enrollmentid": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  enrollment:
                    enrollmentid: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a enrollment
      operationId: POST_clients-clientid-enrollments
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollment"
                  ],
                  "properties": {
                    "enrollment": {
                      "type": "object",
                      "required": [
                        "continuouslyhomelessoneyear",
                        "disablingcondition",
                        "entrydate",
                        "householdid",
                        "housingstatus",
                        "monthshomelesspastthreeyears",
                        "monthshomelessthistime",
                        "otherresidenceprior",
                        "personalid",
                        "projectentryid",
                        "relationshiptohoh",
                        "residenceprior",
                        "residencepriorlengthofstay",
                        "statusdocumented",
                        "yearshomeless",
                        "chronicHomeless"
                      ],
                      "properties": {
                        "continuouslyhomelessoneyear": {
                          "type": "integer"
                        },
                        "disablingcondition": {
                          "type": "integer"
                        },
                        "entrydate": {
                          "type": "integer"
                        },
                        "householdid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "housingstatus": {
                          "type": "integer"
                        },
                        "monthshomelesspastthreeyears": {
                          "type": "integer"
                        },
                        "monthshomelessthistime": {
                          "type": "integer"
                        },
                        "otherresidenceprior": {
                          "type": "string",
                        },
                        "personalid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "projectentryid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "relationshiptohoh": {
                          "type": "integer"
                        },
                        "residenceprior": {
                          "type": "integer"
                        },
                        "residencepriorlengthofstay": {
                          "type": "integer"
                        },
                        "statusdocumented": {
                          "type": "integer"
                        },
                        "yearshomeless": {
                          "type": "integer"
                        },
                        "chronicHomeless" : {
                            "type": "integer"
                        },
                        "hmisHouseholdId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "genericHouseHoldId":{
                              "type": "string",
                              "format": "uuid",
                        }
                        
                      }
                    }
                  }
                }
              example:
                  enrollment:
                    continuouslyhomelessoneyear: 1
                    disablingcondition: 0
                    entrydate: 1458035288480
                    householdid: 14aa2237-f147-4751-997b-040d9c023998
                    housingstatus: 1
                    monthshomelesspastthreeyears: 7
                    monthshomelessthistime: 1
                    otherresidenceprior: '1'
                    personalid: a8b1ac45-f3c9-4d12-9ac7-46bccbf14a7e
                    projectentryid: 93284e88-515c-4bb8-9246-b1f419106649
                    relationshiptohoh: 2
                    residenceprior: 2
                    residencepriorlengthofstay: 2
                    statusdocumented: 1
                    yearshomeless: 2
                    chronicHomeless: 1
                    hmisHouseholdId: 8e956388-b909-41ea-b1d0-203e9cc15c45
                    genericHouseHoldId: 1520d4ac-2998-4825-80a6-2f550c37f3f1                    
        required: true
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollment"
                    ],
                    "properties": {
                      "enrollment": {
                        "type": "object",
                        "required": [
                          "links",
                          "enrollmentid",
                          "continuouslyhomelessoneyear",
                          "disablingcondition",
                          "entrydate",
                          "householdid",
                          "housingstatus",
                          "monthshomelesspastthreeyears",
                          "monthshomelessthistime",
                          "otherresidenceprior",
                          "personalid",
                          "projectentryid",
                          "relationshiptohoh",
                          "residenceprior",
                          "residencepriorlengthofstay",
                          "statusdocumented",
                          "yearshomeless",
                          "chronicHomeless"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "enrollmentid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "continuouslyhomelessoneyear": {
                            "type": "integer"
                          },
                          "disablingcondition": {
                            "type": "integer"
                          },
                          "entrydate": {
                            "type": "integer"
                          },
                          "householdid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "housingstatus": {
                            "type": "integer"
                          },
                          "monthshomelesspastthreeyears": {
                            "type": "integer"
                          },
                          "monthshomelessthistime": {
                            "type": "integer"
                          },
                          "otherresidenceprior": {
                            "type": "string",
                          },
                          "personalid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "projectentryid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "relationshiptohoh": {
                            "type": "integer"
                          },
                          "residenceprior": {
                            "type": "integer"
                          },
                          "residencepriorlengthofstay": {
                            "type": "integer"
                          },
                          "statusdocumented": {
                            "type": "integer"
                          },
                          "yearshomeless": {
                            "type": "integer"
                          },
                          "chronicHomeless" : {
                            "type": "integer"
                          },
                            "hmisHouseholdId": {
                              "type": "string",
                              "format": "uuid",
                            },
                                "genericHouseHoldId":{
                                  "type": "string",
                                  "format": "uuid",
                                }                            
                        }
                      }
                    }
                  }
                example:
                    enrollment:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/history"
                        - rel: hmisHouseHold
                          href: "/hmis-clientapi/rest/v2014/hmishouseholds/8e956388-b909-41ea-b1d0-203e9cc15c45/"                          
                        enrollmentid: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
                        continuouslyhomelessoneyear: 1
                        disablingcondition: 0
                        entrydate: 1458035288480
                        householdid: 14aa2237-f147-4751-997b-040d9c023998
                        housingstatus: 1
                        monthshomelesspastthreeyears: 7
                        monthshomelessthistime: 1
                        otherresidenceprior: '1'
                        personalid: a8b1ac45-f3c9-4d12-9ac7-46bccbf14a7e
                        projectentryid: 93284e88-515c-4bb8-9246-b1f419106649
                        relationshiptohoh: 2
                        residenceprior: 2
                        residencepriorlengthofstay: 2
                        statusdocumented: 1
                        yearshomeless: 1
                        chronicHomeless: 1
                        hmisHouseholdId: 8e956388-b909-41ea-b1d0-203e9cc15c45     
                        genericHouseHoldId: 1520d4ac-2998-4825-80a6-2f550c37f3f1                        
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a enrollment using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific enrollment specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollment"
                  ],
                  "properties": {
                    "enrollment": {
                      "type": "object",
                      "required": [
                        "continuouslyhomelessoneyear",
                        "disablingcondition",
                        "entrydate",
                        "householdid",
                        "housingstatus",
                        "monthshomelesspastthreeyears",
                        "monthshomelessthistime",
                        "otherresidenceprior",
                        "personalid",
                        "projectentryid",
                        "relationshiptohoh",
                        "residenceprior",
                        "residencepriorlengthofstay",
                        "statusdocumented",
                        "yearshomeless",
                        "chronicHomeless"
                      ],
                      "properties": {
                        "continuouslyhomelessoneyear": {
                          "type": "integer"
                        },
                        "disablingcondition": {
                          "type": "integer"
                        },
                        "entrydate": {
                          "type": "integer"
                        },
                        "householdid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "housingstatus": {
                          "type": "integer"
                        },
                        "monthshomelesspastthreeyears": {
                          "type": "integer"
                        },
                        "monthshomelessthistime": {
                          "type": "integer"
                        },
                        "otherresidenceprior": {
                          "type": "string",
                        },
                        "personalid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "projectentryid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "relationshiptohoh": {
                          "type": "integer"
                        },
                        "residenceprior": {
                          "type": "integer"
                        },
                        "residencepriorlengthofstay": {
                          "type": "integer"
                        },
                        "statusdocumented": {
                          "type": "integer"
                        },
                        "yearshomeless": {
                          "type": "integer"
                        },
                        "chronicHomeless" : {
                          "type": "integer"
                        },
                        "hmisHouseholdId": {
                          "type": "string",
                          "format": "uuid",
                        },
                                "genericHouseHoldId":{
                                  "type": "string",
                                  "format": "uuid",
                                }                        
                      }
                    }
                  }
                }
              example:
                  enrollment:
                    links:
                    - rel: hmisHouseHold
                      href: "/hmis-clientapi/rest/v2014/hmishouseholds/8e956388-b909-41ea-b1d0-203e9cc15c45/"                                            
                    continuouslyhomelessoneyear: 1
                    disablingcondition: 0
                    entrydate: 1458035288480
                    householdid: 14aa2237-f147-4751-997b-040d9c023998
                    housingstatus: 1
                    monthshomelesspastthreeyears: 7
                    monthshomelessthistime: 1
                    otherresidenceprior: '1'
                    personalid: a8b1ac45-f3c9-4d12-9ac7-46bccbf14a7e
                    projectentryid: 93284e88-515c-4bb8-9246-b1f419106649
                    relationshiptohoh: 2
                    residenceprior: 2
                    residencepriorlengthofstay: 2
                    statusdocumented: 1
                    yearshomeless: 2
                    chronicHomeless: 1
                    hmisHouseholdId: 8e956388-b909-41ea-b1d0-203e9cc15c45
                    genericHouseHoldId: 1520d4ac-2998-4825-80a6-2f550c37f3f1                    
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific enrollment specified by the URI resource
        parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollments"
                    ],
                    "properties": {
                      "enrollments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "enrollments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "enrollments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "enrollmentId",
                                "continuouslyhomelessoneyear",
                                "disablingcondition",
                                "entrydate",
                                "householdid",
                                "housingstatus",
                                "monthshomelesspastthreeyears",
                                "monthshomelessthistime",
                                "otherresidenceprior",
                                "personalid",
                                "projectentryid",
                                "relationshiptohoh",
                                "residenceprior",
                                "residencepriorlengthofstay",
                                "statusdocumented",
                                "yearshomeless"
                              ],
                              "properties": {
                                "enrollmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "continuouslyhomelessoneyear": {
                                  "type": "string",
                                },
                                "disablingcondition": {
                                  "type": "string",
                                },
                                "entrydate": {
                                  "type": "integer"
                                },
                                "householdid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingstatus": {
                                  "type": "string",
                                },
                                "monthshomelesspastthreeyears": {
                                  "type": "string",
                                },
                                "monthshomelessthistime": {
                                  "type": "string",
                                },
                                "otherresidenceprior": {
                                  "type": "string",
                                },
                                "personalid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "projectentryid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "relationshiptohoh": {
                                  "type": "string",
                                },
                                "residenceprior": {
                                  "type": "string",
                                },
                                "residencepriorlengthofstay": {
                                  "type": "string",
                                },
                                "statusdocumented": {
                                  "type": "string",
                                },
                                "yearshomeless": {
                                  "type": "integer"
                                },
                                "hmisHouseholdId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "genericHouseHoldId":{
                                  "type": "string",
                                  "format": "uuid",
                                }                                
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollments:
                        - enrollmentId: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
                          continuouslyhomelessoneyear: '1'
                          disablingcondition: '0'
                          entrydate: 1458035288480
                          householdid: 14aa2237-f147-4751-997b-040d9c023998
                          housingstatus: '1'
                          monthshomelesspastthreeyears: '7'
                          monthshomelessthistime: '1'
                          otherresidenceprior: '1'
                          personalid: a8b1ac45-f3c9-4d12-9ac7-46bccbf14a7e
                          projectentryid: 93284e88-515c-4bb8-9246-b1f419106649
                          relationshiptohoh: '2'
                          residenceprior: '2'
                          residencepriorlengthofstay: '2'
                          statusdocumented: '1'
                          yearshomeless: 2
                          hmisHouseholdId: 8e956388-b909-41ea-b1d0-203e9cc15c45  
                          genericHouseHoldId: 1520d4ac-2998-4825-80a6-2f550c37f3f1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollment history.  Returns a list of enrollment ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/commercialsexualexploitations':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                    {
                      "type": "object",
                      "required": [
                        "commercialSexualExploitations"
                      ],
                      "properties": {
                        "commercialSexualExploitations": {
                          "type": "object",
                          "required": [
                            "pagination",
                            "CommercialSexualExploitations"
                          ],
                          "properties": {
                            "pagination": {
                              "type": "object",
                              "required": [
                                "from",
                                "returned",
                                "total",
                                "maximum",
                                "sort"
                              ],
                              "properties": {
                                "from": {
                                  "type": "integer"
                                },
                                "returned": {
                                  "type": "integer"
                                },
                                "total": {
                                  "type": "integer"
                                },
                                "maximum": {
                                  "type": "integer"
                                },
                                "sort": {
                                  "type": "object"
                                }
                              }
                            },
                            "CommercialSexualExploitations": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "links",
                                  "commercialsexualexploitationId",
                                  "askedorforcedtoexchangeforsex",
                                  "countofexchangeforsex",
                                  "exchangeforsexpastthreemonths",
                                  "dataCollectionStage",
                                  "informationDate"
                                ],
                                "properties": {
                                  "links": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "required": [
                                        "rel",
                                        "href"
                                      ],
                                      "properties": {
                                        "rel": {
                                          "type": "string",
                                        },
                                        "href": {
                                          "type": "string",
                                        }
                                      }
                                    }
                                  },
                                  "commercialsexualexploitationId": {
                                    "type": "string",
                                    "format": "uuid",
                                  },
                                  "askedorforcedtoexchangeforsex": {
                                    "type": "integer"
                                  },
                                  "countofexchangeforsex": {
                                    "type": "integer"
                                  },
                                  "exchangeforsexpastthreemonths": {
                                    "type": "integer"
                                  },
                                  "dataCollectionStage": {
                                    "type": "integer"
                                  },
                                  "informationDate": {
                                    "type": "string",
                                    "format": "mm-dd-yyyy",
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                example:
                    commercialSexualExploitations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      CommercialSexualExploitations:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/commercialsexualexploitations/78285647-ccda-4d09-847d-2f07fa683f50/history"
                          commercialsexualexploitationId: 78285647-ccda-4d09-847d-2f07fa683f50
                          askedorforcedtoexchangeforsex: 1
                          countofexchangeforsex: 4
                          exchangeforsexpastthreemonths: 8
                          dataCollectionStage: 1
                          informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for commercialsexualexploitation.  Returns a list of
        commercialsexualexploitation ids, based on the query parameters sent.
        The query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-commercialsexualexploitations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "commercialSexualExploitation"
                    ],
                    "properties": {
                      "commercialSexualExploitation": {
                        "type": "object",
                        "required": [
                          "commercialsexualexploitationId"
                        ],
                        "properties": {
                          "commercialsexualexploitationId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  commercialSexualExploitation:
                    commercialsexualexploitationId: 78285647-ccda-4d09-847d-2f07fa683f50
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a commercialsexualexploitation
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-commercialsexualexploitations
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "commercialSexualExploitation"
                  ],
                  "properties": {
                    "commercialSexualExploitation": {
                      "type": "object",
                      "required": [
                        "askedorforcedtoexchangeforsex",
                        "countofexchangeforsex",
                        "exchangeforsexpastthreemonths",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "askedorforcedtoexchangeforsex": {
                          "type": "integer"
                        },
                        "countofexchangeforsex": {
                          "type": "integer"
                        },
                        "exchangeforsexpastthreemonths": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  commercialSexualExploitation:
                    askedorforcedtoexchangeforsex: 1
                    countofexchangeforsex: 4
                    exchangeforsexpastthreemonths: 8
                    dataCollectionStage: 1
                    informationDate: 03-16-2016
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/commercialsexualexploitations/{commercialsexualexploitationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "commercialSexualExploitation"
                    ],
                    "properties": {
                      "commercialSexualExploitation": {
                        "type": "object",
                        "required": [
                          "links",
                          "commercialsexualexploitationId",
                          "askedorforcedtoexchangeforsex",
                          "countofexchangeforsex",
                          "exchangeforsexpastthreemonths",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "commercialsexualexploitationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "askedorforcedtoexchangeforsex": {
                            "type": "integer"
                          },
                          "countofexchangeforsex": {
                            "type": "integer"
                          },
                          "exchangeforsexpastthreemonths": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    commercialSexualExploitation:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/commercialsexualexploitations/78285647-ccda-4d09-847d-2f07fa683f50/history"
                        commercialsexualexploitationId: 78285647-ccda-4d09-847d-2f07fa683f50
                        askedorforcedtoexchangeforsex: 1
                        countofexchangeforsex: 4
                        exchangeforsexpastthreemonths: 8
                        dataCollectionStage: 1
                        informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a commercialsexualexploitation using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-commercialsexualexploitations-commercialsexualexploitationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific commercialsexualexploitation specified by the URI
        resource parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-commercialsexualexploitations-commercialsexualexploitationid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "commercialSexualExploitation"
                  ],
                  "properties": {
                    "commercialSexualExploitation": {
                      "type": "object",
                      "required": [
                        "askedorforcedtoexchangeforsex",
                        "countofexchangeforsex",
                        "exchangeforsexpastthreemonths",
                        "dataCollectionStage",
                        "informationDate"
                      ],
                      "properties": {
                        "askedorforcedtoexchangeforsex": {
                          "type": "integer"
                        },
                        "countofexchangeforsex": {
                          "type": "integer"
                        },
                        "exchangeforsexpastthreemonths": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  commercialSexualExploitation:
                    askedorforcedtoexchangeforsex: 1
                    countofexchangeforsex: 4
                    exchangeforsexpastthreemonths: 8
                    dataCollectionStage: 1
                    informationDate: 03-16-2016
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific commercialsexualexploitation specified by the URI
        resource parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-commercialsexualexploitations-commercialsexualexploitationid
    parameters:
      - name: commercialsexualexploitationid
        in: path
        required: true
        schema:
          type: string
        description: Commercialsexualexploitation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/commercialsexualexploitations/{commercialsexualexploitationid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "commercialSexualExploitations"
                    ],
                    "properties": {
                      "commercialSexualExploitations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "CommercialSexualExploitations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "CommercialSexualExploitations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "commercialsexualexploitationId",
                                "askedorforcedtoexchangeforsex",
                                "countofexchangeforsex",
                                "exchangeforsexpastthreemonths",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "commercialsexualexploitationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "askedorforcedtoexchangeforsex": {
                                  "type": "integer"
                                },
                                "countofexchangeforsex": {
                                  "type": "integer"
                                },
                                "exchangeforsexpastthreemonths": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    commercialSexualExploitations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      CommercialSexualExploitations:
                        - commercialsexualexploitationId: 78285647-ccda-4d09-847d-2f07fa683f50
                          askedorforcedtoexchangeforsex: 1
                          countofexchangeforsex: 4
                          exchangeforsexpastthreemonths: 8
                          dataCollectionStage: 1
                          informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for commercialsexualexploitation history.  Returns a list of
        commercialsexualexploitation ids history, based on the query parameters sent.
        The query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-commercialsexualexploitations-commercialsexualexploitationid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: commercialsexualexploitationid
        in: path
        required: true
        schema:
          type: string
        description: Commercialsexualexploitation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Dateofengagements"
                    ],
                    "properties": {
                      "Dateofengagements": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "dateofengagements"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "dateofengagements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "dateofengagementId",
                                "dateofengagement"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "dateofengagementId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateofengagement": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    Dateofengagements:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      dateofengagements:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/dateofengagements/f1901be5-d11e-4158-9ece-f36252e2e654/history"
                          dateofengagementId: f1901be5-d11e-4158-9ece-f36252e2e654
                          dateofengagement: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for dateofengagement.  Returns a list of dateofengagement ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-dateofengagements
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dateofengagement"
                    ],
                    "properties": {
                      "dateofengagement": {
                        "type": "object",
                        "required": [
                          "dateofengagementId"
                        ],
                        "properties": {
                          "dateofengagementId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  dateofengagement:
                    dateofengagementId: 74a9912a-f8fc-40b7-83cb-980e94b10686
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a dateofengagement
      operationId: POST_clients-clientid-enrollments-enrollmentid-dateofengagements
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "dateofengagement"
                  ],
                  "properties": {
                    "dateofengagement": {
                      "type": "object",
                      "required": [
                        "dateofengagement"
                      ],
                      "properties": {
                        "dateofengagement": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  dateofengagement:
                    dateofengagement: 1458127562192
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements/{dateofengagementid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dateofengagement"
                    ],
                    "properties": {
                      "dateofengagement": {
                        "type": "object",
                        "required": [
                          "links",
                          "dateofengagementId",
                          "dateofengagement"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "dateofengagementId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateofengagement": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    dateofengagement:
                      links:
                      - rel: history
                        href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/dateofengagements/74a9912a-f8fc-40b7-83cb-980e94b10686/history"
                      dateofengagementId: 74a9912a-f8fc-40b7-83cb-980e94b10686
                      dateofengagement: 1458127562192
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a dateofengagement using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-dateofengagements-dateofengagementid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific dateofengagement specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-dateofengagements-dateofengagementid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "dateofengagement"
                  ],
                  "properties": {
                    "dateofengagement": {
                      "type": "object",
                      "required": [
                        "dateofengagement"
                      ],
                      "properties": {
                        "dateofengagement": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  dateofengagement:
                    dateofengagement: 1458127562192
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific dateofengagement specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-dateofengagements-dateofengagementid
    parameters:
      - name: dateofengagementid
        in: path
        required: true
        schema:
          type: string
        description: Dateofengagement Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/dateofengagements/{dateofengagementid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Dateofengagements"
                    ],
                    "properties": {
                      "Dateofengagements": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "dateofengagements"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "dateofengagements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "dateofengagementId",
                                "dateofengagement"
                              ],
                              "properties": {
                                "dateofengagementId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateofengagement": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    Dateofengagements:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      dateofengagements:
                        - dateofengagementId: f1901be5-d11e-4158-9ece-f36252e2e654
                          dateofengagement: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for dateofengagement history.  Returns a list of dateofengagement ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-dateofengagements-dateofengagementid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: dateofengagementid
        in: path
        required: true
        schema:
          type: string
        description: Dateofengagement Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/disabilities':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilitiesList"
                    ],
                    "properties": {
                      "disabilitiesList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "disabilitiesList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "disabilitiesList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "disabilitiesId",
                                "disabilityresponse",
                                "disabilitytype",
                                "documentationonfile",
                                "indefiniteandimpairs",
                                "pathhowconfirmed",
                                "receivingservices",
                                "pathsmiinformation",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "disabilitiesId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "disabilityresponse": {
                                  "type": "integer"
                                },
                                "disabilitytype": {
                                  "type": "string",
                                },
                                "documentationonfile": {
                                  "type": "string",
                                },
                                "indefiniteandimpairs": {
                                  "type": "string",
                                },
                                "pathhowconfirmed": {
                                  "type": "string",
                                },
                                "receivingservices": {
                                  "type": "string",
                                },
                                "pathsmiinformation": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    disabilitiesList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      disabilitiesList:
                          - links:
                            - rel: history
                              href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/disabilities/be340706-eb5c-4794-a4c1-91b7d32c78e3/history"
                            disabilitiesId: be340706-eb5c-4794-a4c1-91b7d32c78e3
                            disabilityresponse: 1732327101
                            disabilitytype: '6'
                            documentationonfile: '99'
                            indefiniteandimpairs: '1'
                            pathhowconfirmed: '99'
                            receivingservices: '0'
                            pathsmiinformation: '8'
                            dataCollectionStage: 1
                            informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for disability.  Returns a list of disability ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-disabilities
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilities"
                    ],
                    "properties": {
                      "disabilities": {
                        "type": "object",
                        "required": [
                          "disabilitiesId"
                        ],
                        "properties": {
                          "disabilitiesId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  disabilities:
                    disabilitiesId: 813153a1-860a-43bd-b7dd-b938062ffaff
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a disability
      operationId: POST_clients-clientid-enrollments-enrollmentid-disabilities
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "disability"
                  ],
                  "properties": {
                    "disability": {
                      "type": "object",
                      "required": [
                        "InformationDate",
                        "DisabilityResponse",
                        "DisabilityType",
                        "DocumentationOnFile",
                        "IndefiniteAndImpairs",
                        "PATHHowConfirmed",
                        "ReceivingServices",
                        "PathSMInformation",
                        "DataCollectionStage"
                      ],
                      "properties": {
                        "InformationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "DisabilityResponse": {
                          "type": "integer"
                        },
                        "DisabilityType": {
                          "type": "integer"
                        },
                        "DocumentationOnFile": {
                          "type": "integer"
                        },
                        "IndefiniteAndImpairs": {
                          "type": "integer"
                        },
                        "PATHHowConfirmed": {
                          "type": "integer"
                        },
                        "ReceivingServices": {
                          "type": "integer"
                        },
                        "PathSMInformation": {
                          "type": "integer"
                        },
                        "DataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                disability:
                  InformationDate: '1990-12-31'
                  DisabilityResponse: 1
                  DisabilityType: 6
                  DocumentationOnFile: 99
                  IndefiniteAndImpairs: 1
                  PATHHowConfirmed: 99
                  ReceivingServices: 0
                  PathSMInformation: 8
                  DataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/disabilities/{disabilityid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilities"
                    ],
                    "properties": {
                      "disabilities": {
                        "type": "object",
                        "required": [
                          "links",
                          "disabilitiesId",
                          "disabilityresponse",
                          "disabilitytype",
                          "documentationonfile",
                          "indefiniteandimpairs",
                          "pathhowconfirmed",
                          "receivingservices",
                          "pathsmiinformation",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "disabilitiesId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "disabilityresponse": {
                            "type": "integer"
                          },
                          "disabilitytype": {
                            "type": "integer"
                          },
                          "documentationonfile": {
                            "type": "integer"
                          },
                          "indefiniteandimpairs": {
                            "type": "integer"
                          },
                          "pathhowconfirmed": {
                            "type": "integer"
                          },
                          "receivingservices": {
                            "type": "integer"
                          },
                          "pathsmiinformation": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    disabilities:
                      links:
                      - rel: history
                        href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/disabilities/813153a1-860a-43bd-b7dd-b938062ffaff/history"
                      disabilitiesId: 813153a1-860a-43bd-b7dd-b938062ffaff
                      disabilityresponse: -1732327101
                      disabilitytype: 6
                      documentationonfile: 99
                      indefiniteandimpairs: 1
                      pathhowconfirmed: 99
                      receivingservices: 0
                      pathsmiinformation: 8
                      dataCollectionStage: 1
                      informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a disability using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-disabilities-disabilityid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific disability specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-disabilities-disabilityid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "disability"
                  ],
                  "properties": {
                    "disability": {
                      "type": "object",
                      "required": [
                        "InformationDate",
                        "DisabilityResponse",
                        "DisabilityType",
                        "DocumentationOnFile",
                        "IndefiniteAndImpairs",
                        "PATHHowConfirmed",
                        "ReceivingServices",
                        "PathSMInformation",
                        "DataCollectionStage"
                      ],
                      "properties": {
                        "InformationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "DisabilityResponse": {
                          "type": "integer"
                        },
                        "DisabilityType": {
                          "type": "integer"
                        },
                        "DocumentationOnFile": {
                          "type": "integer"
                        },
                        "IndefiniteAndImpairs": {
                          "type": "integer"
                        },
                        "PATHHowConfirmed": {
                          "type": "integer"
                        },
                        "ReceivingServices": {
                          "type": "integer"
                        },
                        "PathSMInformation": {
                          "type": "integer"
                        },
                        "DataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                disability:
                  InformationDate: '1990-12-31'
                  DisabilityResponse: 1
                  DisabilityType: 6
                  DocumentationOnFile: 99
                  IndefiniteAndImpairs: 1
                  PATHHowConfirmed: 99
                  ReceivingServices: 0
                  PathSMInformation: 8
                  DataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific disability specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-disabilities-disabilityid
    parameters:
      - name: disabilityid
        in: path
        required: true
        schema:
          type: string
        description: Disability Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/disabilities/{disabilityid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "disabilitiesList"
                    ],
                    "properties": {
                      "disabilitiesList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "disabilitiesList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "disabilitiesList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "disabilitiesId",
                                "disabilityresponse",
                                "disabilitytype",
                                "documentationonfile",
                                "indefiniteandimpairs",
                                "pathhowconfirmed",
                                "receivingservices",
                                "pathsmiinformation",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "disabilitiesId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "disabilityresponse": {
                                  "type": "integer"
                                },
                                "disabilitytype": {
                                  "type": "string",
                                },
                                "documentationonfile": {
                                  "type": "string",
                                },
                                "indefiniteandimpairs": {
                                  "type": "string",
                                },
                                "pathhowconfirmed": {
                                  "type": "string",
                                },
                                "receivingservices": {
                                  "type": "string",
                                },
                                "pathsmiinformation": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    disabilitiesList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      disabilitiesList:
                        - disabilitiesId: be340706-eb5c-4794-a4c1-91b7d32c78e3
                          disabilityresponse: 1732327101
                          disabilitytype: '6'
                          documentationonfile: '99'
                          indefiniteandimpairs: '1'
                          pathhowconfirmed: '99'
                          receivingservices: '0'
                          pathsmiinformation: '8'
                          dataCollectionStage: 1
                          informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for disability history.  Returns a list of disability ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-disabilities-disabilityid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: disabilityid
        in: path
        required: true
        schema:
          type: string
        description: Disability Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "DomesticViolences"
                    ],
                    "properties": {
                      "DomesticViolences": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "domesticViolences"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "domesticViolences": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "domesticViolenceId",
                                "domesticviolencevictim",
                                "dataCollectionStage",
                                "informationDate",
                                "whenoccurred"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "domesticViolenceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "domesticviolencevictim": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "whenoccurred": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    DomesticViolences:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      domesticViolences:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/domesticviolences/81b6e3f4-5d11-47c6-93c5-5b13c0c2779e/history"
                          domesticViolenceId: 81b6e3f4-5d11-47c6-93c5-5b13c0c2779e
                          domesticviolencevictim: '1'
                          dataCollectionStage: 1
                          informationDate: 03-16-2016
                          whenoccurred: '3'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for domesticviolence.  Returns a list of domesticviolence ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-domesticviolences
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "domesticViolence"
                    ],
                    "properties": {
                      "domesticViolence": {
                        "type": "object",
                        "required": [
                          "domesticViolenceId"
                        ],
                        "properties": {
                          "domesticViolenceId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  domesticViolence:
                    domesticViolenceId: 73f7cd052ed1458eb445f26741d3f4ad
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a domesticviolence
      operationId: POST_clients-clientid-enrollments-enrollmentid-domesticviolences
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "domesticViolence"
                  ],
                  "properties": {
                    "domesticViolence": {
                      "type": "object",
                      "required": [
                        "informationDate",
                        "domesticViolenceVictim",
                        "whenOccurred",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "domesticViolenceVictim": {
                          "type": "integer"
                        },
                        "whenOccurred": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  domesticViolence:
                    informationDate: 03-16-2017
                    domesticViolenceVictim: 1
                    whenOccurred: 3
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences/{domesticviolenceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "domesticViolence"
                    ],
                    "properties": {
                      "domesticViolence": {
                        "type": "object",
                        "required": [
                          "links",
                          "domesticViolenceId",
                          "informationDate",
                          "domesticViolenceVictim",
                          "whenOccurred",
                          "dataCollectionStage"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "domesticViolenceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "domesticViolenceVictim": {
                            "type": "integer"
                          },
                          "whenOccurred": {
                            "type": "integer"
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    domesticViolence:
                      links:
                      - rel: history
                        href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/domesticviolences/73f7cd052ed1458eb445f26741d3f4ad/history"
                      domesticViolenceId: 73f7cd052ed1458eb445f26741d3f4ad
                      informationDate: 03-16-2017
                      domesticViolenceVictim: 1
                      whenOccurred: 3
                      dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a domesticviolence using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-domesticviolences-domesticviolenceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific domesticviolence specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-domesticviolences-domesticviolenceid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "domesticViolence"
                  ],
                  "properties": {
                    "domesticViolence": {
                      "type": "object",
                      "required": [
                        "informationDate",
                        "domesticViolenceVictim",
                        "whenOccurred",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "domesticViolenceVictim": {
                          "type": "integer"
                        },
                        "whenOccurred": {
                          "type": "integer"
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  domesticViolence:
                    informationDate: 03-16-2017
                    domesticViolenceVictim: 1
                    whenOccurred: 3
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific domesticviolence specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-domesticviolences-domesticviolenceid
    parameters:
      - name: domesticviolenceid
        in: path
        required: true
        schema:
          type: string
        description: Domesticviolence Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/domesticviolences/{domesticviolenceid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "DomesticViolences"
                    ],
                    "properties": {
                      "DomesticViolences": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "domesticViolences"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "domesticViolences": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "domesticViolenceId",
                                "domesticviolencevictim",
                                "dataCollectionStage",
                                "informationDate",
                                "whenoccurred"
                              ],
                              "properties": {
                                "domesticViolenceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "domesticviolencevictim": {
                                  "type": "string",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "whenoccurred": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    DomesticViolences:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      domesticViolences:
                        - domesticViolenceId: 81b6e3f4-5d11-47c6-93c5-5b13c0c2779e
                          domesticviolencevictim: '1'
                          dataCollectionStage: 1
                          informationDate: 03-16-2016
                          whenoccurred: '3'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for domesticviolence history.  Returns a list of domesticviolence ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-domesticviolences-domesticviolenceid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: domesticviolenceid
        in: path
        required: true
        schema:
          type: string
        description: Domesticviolence Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/employments':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employments"
                    ],
                    "properties": {
                      "employments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "employments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "employments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "employmentId",
                                "employed",
                                "employmentType",
                                "notEmployedReason",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "employmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "employed": {
                                  "type": "integer"
                                },
                                "employmentType": {
                                  "type": "integer"
                                },
                                "notEmployedReason": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    employments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      employments:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/employments/3d01bf85-75f0-4ee3-89aa-c603380afea2/history"
                          employmentId: 3d01bf85-75f0-4ee3-89aa-c603380afea2
                          employed: 9
                          employmentType: 2
                          notEmployedReason: 2
                          dataCollectionStage: 1
                          informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for employment.  Returns a list of employment ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-employments
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employment"
                    ],
                    "properties": {
                      "employment": {
                        "type": "object",
                        "required": [
                          "employmentId"
                        ],
                        "properties": {
                          "employmentId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  employment:
                    employmentId: 3d01bf85-75f0-4ee3-89aa-c603380afea2
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a employment
      operationId: POST_clients-clientid-enrollments-enrollmentid-employments
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "employment"
                  ],
                  "properties": {
                    "employment": {
                      "type": "object",
                      "required": [
                        "employed",
                        "employmentType",
                        "notEmployedReason",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "employed": {
                          "type": "string",
                        },
                        "employmentType": {
                          "type": "string",
                        },
                        "notEmployedReason": {
                          "type": "string",
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  employment:
                    employed: '9'
                    employmentType: '2'
                    notEmployedReason: '2'
                    informationDate: 03-16-2016
                    dataCollectionStage: '1'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/employments/{employmentid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employment"
                    ],
                    "properties": {
                      "employment": {
                        "type": "object",
                        "required": [
                          "links",
                          "employmentId",
                          "employed",
                          "employmentType",
                          "notEmployedReason",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "employmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "employed": {
                            "type": "string",
                          },
                          "employmentType": {
                            "type": "string",
                          },
                          "notEmployedReason": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    employment:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/employments/3d01bf85-75f0-4ee3-89aa-c603380afea2/history"
                        employmentId: 3d01bf85-75f0-4ee3-89aa-c603380afea2
                        employed: '9'
                        employmentType: '2'
                        notEmployedReason: '2'
                        dataCollectionStage: 1
                        informationDate: 1458124933736
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a employment using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-employments-employmentid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific employment specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-employments-employmentid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "employment"
                  ],
                  "properties": {
                    "employment": {
                      "type": "object",
                      "required": [
                        "employed",
                        "employmentType",
                        "notEmployedReason",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "employed": {
                          "type": "string",
                        },
                        "employmentType": {
                          "type": "string",
                        },
                        "notEmployedReason": {
                          "type": "string",
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  employment:
                    employed: '9'
                    employmentType: '2'
                    notEmployedReason: '2'
                    informationDate: 03-16-2016
                    dataCollectionStage: '1'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific employment specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-employments-employmentid
    parameters:
      - name: employmentid
        in: path
        required: true
        schema:
          type: string
        description: Employment Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/employments/{employmentid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "employments"
                    ],
                    "properties": {
                      "employments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "employments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "employments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "employmentId",
                                "employed",
                                "employmentType",
                                "notEmployedReason",
                                "dataCollectionStage",
                                "informationDate"
                              ],
                              "properties": {
                                "employmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "employed": {
                                  "type": "integer"
                                },
                                "employmentType": {
                                  "type": "integer"
                                },
                                "notEmployedReason": {
                                  "type": "integer"
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    employments:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      employments:
                        - employmentId: 3d01bf85-75f0-4ee3-89aa-c603380afea2
                          employed: 9
                          employmentType: 2
                          notEmployedReason: 2
                          dataCollectionStage: 1
                          informationDate: 03-16-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for employment history.  Returns a list of employment ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-employments-employmentid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: employmentid
        in: path
        required: true
        schema:
          type: string
        description: Employment Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCocs"
                    ],
                    "properties": {
                      "enrollmentCocs": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "enrollmentCocs"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "enrollmentCocs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "enrollmentCocId",
                                "dataCollectionStage",
                                "informationDate",
                                "clientCode"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "enrollmentCocId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "clientCode": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollmentCocs:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollmentCocs:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/enrollmentcocs/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/history"
                          enrollmentCocId: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
                          dataCollectionStage: 1
                          informationDate: 03-15-2016
                          clientCode: abc-123
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollmentcoc.  Returns a list of enrollmentcoc ids, based
        on the query parameters sent.  The query parameters are cumulative, so
        each additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-enrollmentcocs
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCoc"
                    ],
                    "properties": {
                      "enrollmentCoc": {
                        "type": "object",
                        "required": [
                          "enrollmentCocId",
                          "clientCode",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "enrollmentCocId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientCode": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                  enrollmentCoc:
                    enrollmentCocId: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
                    clientCode: abc-123
                    dataCollectionStage: 1
                    informationDate: 03-15-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a enrollmentcoc
      operationId: POST_clients-clientid-enrollments-enrollmentid-enrollmentcocs
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollmentCoc"
                  ],
                  "properties": {
                    "enrollmentCoc": {
                      "type": "object",
                      "required": [
                        "informationDate",
                        "dataCollectionStage",
                        "clientCode"
                      ],
                      "properties": {
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "clientCode": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  enrollmentCoc:
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    clientCode: abc-123
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs/{enrollmentcocid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCoc"
                    ],
                    "properties": {
                      "enrollmentCoc": {
                        "type": "object",
                        "required": [
                          "links",
                          "enrollmentCocId",
                          "clientCode",
                          "dataCollectionStage",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "enrollmentCocId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientCode": {
                            "type": "string",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollmentCoc:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/enrollmentcocs/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/history"
                        enrollmentCocId: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
                        clientCode: abc-123
                        dataCollectionStage: 1
                        informationDate: 03-15-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a enrollmentcoc using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-enrollmentcocs-enrollmentcocid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific enrollmentcoc specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-enrollmentcocs-enrollmentcocid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "enrollmentCoc"
                  ],
                  "properties": {
                    "enrollmentCoc": {
                      "type": "object",
                      "required": [
                        "informationDate",
                        "dataCollectionStage",
                        "clientCode"
                      ],
                      "properties": {
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "clientCode": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  enrollmentCoc:
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    clientCode: abc-123
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific enrollmentcoc specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-enrollmentcocs-enrollmentcocid
    parameters:
      - name: enrollmentcocid
        in: path
        required: true
        schema:
          type: string
        description: Enrollmentcoc Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/enrollmentcocs/{enrollmentcocid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "enrollmentCocs"
                    ],
                    "properties": {
                      "enrollmentCocs": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "enrollmentCocs"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "enrollmentCocs": {
                            "type": "object",
                            "required": [
                              "enrollmentCocId",
                              "dataCollectionStage",
                              "informationDate",
                              "clientCode"
                            ],
                            "properties": {
                              "enrollmentCocId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "dataCollectionStage": {
                                "type": "integer"
                              },
                              "informationDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              },
                              "clientCode": {
                                "type": "string",
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    enrollmentCocs:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      enrollmentCocs:
                          enrollmentCocId: a9577ecf-5fb3-453e-9d3b-2bb81658ffe1
                          dataCollectionStage: 1
                          informationDate: 03-15-2016
                          clientCode: abc-123
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for enrollmentcoc history.  Returns a list of enrollmentcoc ids history, based
        on the query parameters sent.  The query parameters are cumulative, so
        each additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-enrollmentcocs-enrollmentcocid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: enrollmentcocid
        in: path
        required: true
        schema:
          type: string
        description: Enrollmentcoc Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exits"
                    ],
                    "properties": {
                      "exits": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exits"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exits": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "exitId",
                                "exitDate",
                                "destination",
                                "otherDestination"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "exitId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "exitDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "destination": {
                                  "type": "integer"
                                },
                                "otherDestination": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  exits:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exits:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/14c70311-2701-4c74-af47-2bb4fdfe48cd/history"
                          exitId: 14c70311-2701-4c74-af47-2bb4fdfe48cd
                          exitDate: '03-17-2016'
                          destination: 24
                          otherDestination: Test destination
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exit.  Returns a list of exit ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exit"
                    ],
                    "properties": {
                      "exit": {
                        "type": "object",
                        "required": [
                          "exitID"
                        ],
                        "properties": {
                          "exitID": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  exit:
                    exitID: 9d57c33f-cc4e-47ff-8bbd-0580e7a0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exit
      operationId: POST_clients-clientid-enrollments-enrollmentid-exits
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exit"
                  ],
                  "properties": {
                    "exit": {
                      "type": "object",
                      "required": [
                        "exitDate",
                        "destination",
                        "otherDestination"
                      ],
                      "properties": {
                        "exitDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "destination": {
                          "type": "integer"
                        },
                        "otherDestination": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                exit:
                  exitDate: '03-17-2016'
                  destination: 24
                  otherDestination: Test destination
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exit"
                    ],
                    "properties": {
                      "exit": {
                        "type": "object",
                        "required": [
                          "links",
                          "exitID",
                          "exitDate",
                          "destination",
                          "otherDestination"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "exitID": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "exitDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "destination": {
                            "type": "integer"
                          },
                          "otherDestination": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                  exit:
                    links:
                    - rel: history
                      href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/9d57c33f-cc4e-47ff-8bbd-0580e7a0/history"
                    exitID: 9d57c33f-cc4e-47ff-8bbd-0580e7a0
                    exitDate: '03-17-2016'
                    destination: 24
                    otherDestination: Test destination
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exit using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits-exitid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific exit specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-exits-exitid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exit"
                  ],
                  "properties": {
                    "exit": {
                      "type": "object",
                      "required": [
                        "exitDate",
                        "destination",
                        "otherDestination"
                      ],
                      "properties": {
                        "exitDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "destination": {
                          "type": "integer"
                        },
                        "otherDestination": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                exit:
                  exitDate: '03-17-2016'
                  destination: 24
                  otherDestination: Test destination
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific exit specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exits"
                    ],
                    "properties": {
                      "exits": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exits"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exits": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitId",
                                "exitDate",
                                "destination",
                                "otherDestination"
                              ],
                              "properties": {
                                "exitId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "exitDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "destination": {
                                  "type": "integer"
                                },
                                "otherDestination": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  exits:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      exits:
                        - exitId: 14c70311-2701-4c74-af47-2bb4fdfe48cd
                          exitDate: '03-17-2016'
                          destination: 24
                          otherDestination: Test destination
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exit history.  Returns a list of exit ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-exits-exitid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/connectionwithsoars':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "connectionwithsoars"
                    ],
                    "properties": {
                      "connectionwithsoars": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "connectionwithsoars"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "connectionwithsoars": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "connectionwithsoarId",
                                "connectionwithsoar"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "connectionwithsoarId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "connectionwithsoar": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    connectionwithsoars:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      connectionwithsoars:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/14c70311-2701-4c74-af47-2bb4fdfe48cd/connectionwithsoars/14c70311-2701-4c74-af47-2bb4fdfe48cd/history"
                          connectionwithsoarId: 14c70311-2701-4c74-af47-2bb4fdfe48cd
                          connectionwithsoar: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for connectionwithsoar.  Returns a list of connectionwithsoar
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-connectionwithsoars
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "connectionwithsoar"
                    ],
                    "properties": {
                      "connectionwithsoar": {
                        "type": "object",
                        "required": [
                          "connectionwithsoarId"
                        ],
                        "properties": {
                          "connectionwithsoarId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  connectionwithsoar:
                    connectionwithsoarId: 14c70311-2701-4c74-af47-2bb4fdfe48cd
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a connectionwithsoar
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-connectionwithsoars
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "connectionwithsoar"
                  ],
                  "properties": {
                    "connectionwithsoar": {
                      "type": "object",
                      "required": [
                        "connectionwithsoar"
                      ],
                      "properties": {
                        "connectionwithsoar": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  connectionwithsoar:
                    connectionwithsoar: 1
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/connectionwithsoars/{connectionwithsoarid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "connectionwithsoar"
                    ],
                    "properties": {
                      "connectionwithsoar": {
                        "type": "object",
                        "required": [
                          "links",
                          "connectionwithsoarId",
                          "connectionwithsoar"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "connectionwithsoarId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "connectionwithsoar": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    connectionwithsoar:
                      links:
                      - rel: history
                        href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/9d57c33f-cc4e-47ff-8bbd-0580e7a0/connectionwithsoars/14c70311-2701-4c74-af47-2bb4fdfe48cd/history"
                      connectionwithsoarId: 14c70311-2701-4c74-af47-2bb4fdfe48cd
                      connectionwithsoar: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a connectionwithsoar using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-connectionwithsoars-connectionwithsoarid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific connectionwithsoar specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-connectionwithsoars-connectionwithsoarid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "connectionwithsoar"
                  ],
                  "properties": {
                    "connectionwithsoar": {
                      "type": "object",
                      "required": [
                        "connectionwithsoar"
                      ],
                      "properties": {
                        "connectionwithsoar": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  connectionwithsoar:
                    connectionwithsoar: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific connectionwithsoar specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-connectionwithsoars-connectionwithsoarid
    parameters:
      - name: connectionwithsoarid
        in: path
        required: true
        schema:
          type: string
        description: Connectionwithsoar Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/connectionwithsoars/{connectionwithsoarid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "connectionwithsoars"
                    ],
                    "properties": {
                      "connectionwithsoars": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "connectionwithsoars"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "connectionwithsoars": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "connectionwithsoarId",
                                "connectionwithsoar"
                              ],
                              "properties": {
                                "connectionwithsoarId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "connectionwithsoar": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    connectionwithsoars:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      connectionwithsoars:
                        - connectionwithsoarId: 14c70311-2701-4c74-af47-2bb4fdfe48cd
                          connectionwithsoar: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for connectionwithsoar history.  Returns a list of connectionwithsoar
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-connectionwithsoars-connectionwithsoarid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: connectionwithsoarid
        in: path
        required: true
        schema:
          type: string
        description: Connectionwithsoar Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exithousingassessments':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exithousingassessments"
                    ],
                    "properties": {
                      "exithousingassessments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exithousingassessments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exithousingassessments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "exithousingassessmentId",
                                "housingassessment",
                                "subsidyinformation"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "exithousingassessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingassessment": {
                                  "type": "integer"
                                },
                                "subsidyinformation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exithousingassessments:
                      pagination:
                        from: 0
                        returned: 2
                        total: 2
                        maximum: 30
                        sort: {}
                      exithousingassessments:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/14c70311-2701-4c74-af47-2bb4fdfe48cd/exithousingassessments/a246781e-f38a-4b41-80a4-7cc0b28f74b1/history"
                          exithousingassessmentId: a246781e-f38a-4b41-80a4-7cc0b28f74b1
                          housingassessment: 0
                          subsidyinformation: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exithousingassessment.  Returns a list of
        exithousingassessment ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassessments
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "housingassessment"
                    ],
                    "properties": {
                      "housingassessment": {
                        "type": "object",
                        "required": [
                          "housingassessmentId"
                        ],
                        "properties": {
                          "housingassessmentId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  housingassessment:
                    housingassessmentId: 4233d1db-4961-4730-a690-3bc17c3e310a
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exithousingassessment
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassessments
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "housingassessment"
                  ],
                  "properties": {
                    "housingassessment": {
                      "type": "object",
                      "required": [
                        "housingassessment",
                        "subsidyinformation"
                      ],
                      "properties": {
                        "housingassessment": {
                          "type": "integer"
                        },
                        "subsidyinformation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  housingassessment:
                    housingassessment: 1
                    subsidyinformation: 2
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exithousingassessments/{exithousingassessmentid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exithousingassessment"
                    ],
                    "properties": {
                      "exithousingassessment": {
                        "type": "object",
                        "required": [
                          "links",
                          "exithousingassessmentId",
                          "housingassessment",
                          "subsidyinformation"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "exithousingassessmentId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "housingassessment": {
                            "type": "integer"
                          },
                          "subsidyinformation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    exithousingassessment:
                      links:
                      - rel: history
                        href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/9d57c33f-cc4e-47ff-8bbd-0580e7a0/exithousingassessmentid/4233d1db-4961-4730-a690-3bc17c3e310a/history"
                      exithousingassessmentId: 4233d1db-4961-4730-a690-3bc17c3e310a
                      housingassessment: 1
                      subsidyinformation: 2
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exithousingassessment using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassessments-exithousingassessmentid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific exithousingassessment specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassessments-exithousingassessmentid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "housingassessment"
                  ],
                  "properties": {
                    "housingassessment": {
                      "type": "object",
                      "required": [
                        "housingassessment",
                        "subsidyinformation"
                      ],
                      "properties": {
                        "housingassessment": {
                          "type": "integer"
                        },
                        "subsidyinformation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  housingassessment:
                    housingassessment: 1
                    subsidyinformation: 2
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific exithousingassessment specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassessments-exithousingassessmentid
    parameters:
      - name: exithousingassessmentid
        in: path
        required: true
        schema:
          type: string
        description: Exithousingassessment Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exithousingassessments/{exithousingassessmentid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exithousingassessments"
                    ],
                    "properties": {
                      "exithousingassessments": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exithousingassessments"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exithousingassessments": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exithousingassessmentId",
                                "housingassessment",
                                "subsidyinformation"
                              ],
                              "properties": {
                                "exithousingassessmentId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "housingassessment": {
                                  "type": "integer"
                                },
                                "subsidyinformation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exithousingassessments:
                      pagination:
                        from: 0
                        returned: 2
                        total: 2
                        maximum: 30
                        sort: {}
                      exithousingassessments:
                        - exithousingassessmentId: a246781e-f38a-4b41-80a4-7cc0b28f74b1
                          housingassessment: 0
                          subsidyinformation: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exithousingassessment history.  Returns a list of
        exithousingassessment ids history, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exithousingassessments-exithousingassessmentid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: exithousingassessmentid
        in: path
        required: true
        schema:
          type: string
        description: Exithousingassessment Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitplansactions':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPlansActionsList"
                    ],
                    "properties": {
                      "exitPlansActionsList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitPlansActionsList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitPlansActionsList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "exitPlansActionsId",
                                "assistancemainstreambenefits",
                                "exitcounseling",
                                "furtherfollowupservices",
                                "otheraftercareplanoraction",
                                "permanenthousingplacement",
                                "resourcepackage",
                                "scheduledfollowupcontacts",
                                "temporaryshelterplacement",
                                "writtenaftercareplan"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "exitPlansActionsId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assistancemainstreambenefits": {
                                  "type": "integer"
                                },
                                "exitcounseling": {
                                  "type": "integer"
                                },
                                "furtherfollowupservices": {
                                  "type": "integer"
                                },
                                "otheraftercareplanoraction": {
                                  "type": "integer"
                                },
                                "permanenthousingplacement": {
                                  "type": "integer"
                                },
                                "resourcepackage": {
                                  "type": "integer"
                                },
                                "scheduledfollowupcontacts": {
                                  "type": "integer"
                                },
                                "temporaryshelterplacement": {
                                  "type": "integer"
                                },
                                "writtenaftercareplan": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitPlansActionsList:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      exitPlansActionsList:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/9d57c33f-cc4e-47ff-8bbd-0580e7a0/exitplansactions/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          exitPlansActionsId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          assistancemainstreambenefits: 1
                          exitcounseling: 1
                          furtherfollowupservices: 2
                          otheraftercareplanoraction: 3
                          permanenthousingplacement: 1
                          resourcepackage: 2
                          scheduledfollowupcontacts: 3
                          temporaryshelterplacement: 2
                          writtenaftercareplan: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitplansaction.  Returns a list of exitplansaction ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exitplansactions
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPlansActions"
                    ],
                    "properties": {
                      "exitPlansActions": {
                        "type": "object",
                        "required": [
                          "exitPlansActionsId"
                        ],
                        "properties": {
                          "exitPlansActionsId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  exitPlansActions:
                    exitPlansActionsId: 4233d1db-4961-4730-a690-3bc17c3e310a
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a exitplansaction
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-exitplansactions
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitPlansActions"
                  ],
                  "properties": {
                    "exitPlansActions": {
                      "type": "object",
                      "required": [
                        "assistancemainstreambenefits",
                        "exitcounseling",
                        "furtherfollowupservices",
                        "otheraftercareplanoraction",
                        "permanenthousingplacement",
                        "resourcepackage",
                        "scheduledfollowupcontacts",
                        "temporaryshelterplacement",
                        "writtenaftercareplan"
                      ],
                      "properties": {
                        "assistancemainstreambenefits": {
                          "type": "integer"
                        },
                        "exitcounseling": {
                          "type": "integer"
                        },
                        "furtherfollowupservices": {
                          "type": "integer"
                        },
                        "otheraftercareplanoraction": {
                          "type": "integer"
                        },
                        "permanenthousingplacement": {
                          "type": "integer"
                        },
                        "resourcepackage": {
                          "type": "integer"
                        },
                        "scheduledfollowupcontacts": {
                          "type": "integer"
                        },
                        "temporaryshelterplacement": {
                          "type": "integer"
                        },
                        "writtenaftercareplan": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitPlansActions:
                    assistancemainstreambenefits: 1
                    exitcounseling: 1
                    furtherfollowupservices: 2
                    otheraftercareplanoraction: 3
                    permanenthousingplacement: 1
                    resourcepackage: 2
                    scheduledfollowupcontacts: 3
                    temporaryshelterplacement: 2
                    writtenaftercareplan: 1
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitplansactions/{exitplansactionid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPlansActions"
                    ],
                    "properties": {
                      "exitPlansActions": {
                        "type": "object",
                        "required": [
                          "links",
                          "exitPlansActionsId",
                          "assistancemainstreambenefits",
                          "exitcounseling",
                          "furtherfollowupservices",
                          "otheraftercareplanoraction",
                          "permanenthousingplacement",
                          "resourcepackage",
                          "scheduledfollowupcontacts",
                          "temporaryshelterplacement",
                          "writtenaftercareplan"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "exitPlansActionsId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assistancemainstreambenefits": {
                            "type": "integer"
                          },
                          "exitcounseling": {
                            "type": "integer"
                          },
                          "furtherfollowupservices": {
                            "type": "integer"
                          },
                          "otheraftercareplanoraction": {
                            "type": "integer"
                          },
                          "permanenthousingplacement": {
                            "type": "integer"
                          },
                          "resourcepackage": {
                            "type": "integer"
                          },
                          "scheduledfollowupcontacts": {
                            "type": "integer"
                          },
                          "temporaryshelterplacement": {
                            "type": "integer"
                          },
                          "writtenaftercareplan": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    exitPlansActions:
                          links:
                            - rel: history
                              href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/9d57c33f-cc4e-47ff-8bbd-0580e7a0/exitplansactions/4233d1db-4961-4730-a690-3bc17c3e310a/history"
                          exitPlansActionsId: 4233d1db-4961-4730-a690-3bc17c3e310a
                          assistancemainstreambenefits: 1
                          exitcounseling: 1
                          furtherfollowupservices: 2
                          otheraftercareplanoraction: 3
                          permanenthousingplacement: 1
                          resourcepackage: 2
                          scheduledfollowupcontacts: 3
                          temporaryshelterplacement: 2
                          writtenaftercareplan: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a exitplansaction using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exitplansactions-exitplansactionid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific exitplansaction specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-exitplansactions-exitplansactionid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "exitPlansActions"
                  ],
                  "properties": {
                    "exitPlansActions": {
                      "type": "object",
                      "required": [
                        "assistancemainstreambenefits",
                        "exitcounseling",
                        "furtherfollowupservices",
                        "otheraftercareplanoraction",
                        "permanenthousingplacement",
                        "resourcepackage",
                        "scheduledfollowupcontacts",
                        "temporaryshelterplacement",
                        "writtenaftercareplan"
                      ],
                      "properties": {
                        "assistancemainstreambenefits": {
                          "type": "integer"
                        },
                        "exitcounseling": {
                          "type": "integer"
                        },
                        "furtherfollowupservices": {
                          "type": "integer"
                        },
                        "otheraftercareplanoraction": {
                          "type": "integer"
                        },
                        "permanenthousingplacement": {
                          "type": "integer"
                        },
                        "resourcepackage": {
                          "type": "integer"
                        },
                        "scheduledfollowupcontacts": {
                          "type": "integer"
                        },
                        "temporaryshelterplacement": {
                          "type": "integer"
                        },
                        "writtenaftercareplan": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  exitPlansActions:
                    assistancemainstreambenefits: 1
                    exitcounseling: 1
                    furtherfollowupservices: 2
                    otheraftercareplanoraction: 3
                    permanenthousingplacement: 1
                    resourcepackage: 2
                    scheduledfollowupcontacts: 3
                    temporaryshelterplacement: 2
                    writtenaftercareplan: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific exitplansaction specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-exitplansactions-exitplansactionid
    parameters:
      - name: exitplansactionid
        in: path
        required: true
        schema:
          type: string
        description: Exitplansaction Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/exitplansactions/{exitplansactionid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "exitPlansActionsList"
                    ],
                    "properties": {
                      "exitPlansActionsList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "exitPlansActionsList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "exitPlansActionsList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "exitPlansActionsId",
                                "assistancemainstreambenefits",
                                "exitcounseling",
                                "furtherfollowupservices",
                                "otheraftercareplanoraction",
                                "permanenthousingplacement",
                                "resourcepackage",
                                "scheduledfollowupcontacts",
                                "temporaryshelterplacement",
                                "writtenaftercareplan"
                              ],
                              "properties": {
                                "exitPlansActionsId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assistancemainstreambenefits": {
                                  "type": "integer"
                                },
                                "exitcounseling": {
                                  "type": "integer"
                                },
                                "furtherfollowupservices": {
                                  "type": "integer"
                                },
                                "otheraftercareplanoraction": {
                                  "type": "integer"
                                },
                                "permanenthousingplacement": {
                                  "type": "integer"
                                },
                                "resourcepackage": {
                                  "type": "integer"
                                },
                                "scheduledfollowupcontacts": {
                                  "type": "integer"
                                },
                                "temporaryshelterplacement": {
                                  "type": "integer"
                                },
                                "writtenaftercareplan": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    exitPlansActionsList:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      exitPlansActionsList:
                        - exitPlansActionsId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          assistancemainstreambenefits: 1
                          exitcounseling: 1
                          furtherfollowupservices: 2
                          otheraftercareplanoraction: 3
                          permanenthousingplacement: 1
                          resourcepackage: 2
                          scheduledfollowupcontacts: 3
                          temporaryshelterplacement: 2
                          writtenaftercareplan: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for exitplansaction history.  Returns a list of exitplansaction ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-exitplansactions-exitplansactionid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: exitplansactionid
        in: path
        required: true
        schema:
          type: string
        description: Exitplansaction Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/familyreunifications':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "familyReunifications"
                    ],
                    "properties": {
                      "familyReunifications": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "familyReunifications"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "familyReunifications": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "familyReunificationId",
                                "familyreunificationachieved"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "familyReunificationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "familyreunificationachieved": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    familyReunifications:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      familyReunifications:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/9d57c33f-cc4e-47ff-8bbd-0580e7a0/familyreunifications/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          familyReunificationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          familyreunificationachieved: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for familyreunification.  Returns a list of familyreunification
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-familyreunifications
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "familyReunification"
                    ],
                    "properties": {
                      "familyReunification": {
                        "type": "object",
                        "required": [
                          "familyReunificationId"
                        ],
                        "properties": {
                          "familyReunificationId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  familyReunification:
                    familyReunificationId: a87d4463-7e25-4df8-a079-b5f3dcecc6cc
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a familyreunification
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-familyreunifications
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "familyReunification"
                  ],
                  "properties": {
                    "familyReunification": {
                      "type": "object",
                      "required": [
                        "familyreunificationachieved"
                      ],
                      "properties": {
                        "familyreunificationachieved": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  familyReunification:
                    familyreunificationachieved: 0
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/familyreunifications/{familyreunificationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "familyReunification"
                    ],
                    "properties": {
                      "familyReunification": {
                        "type": "object",
                        "required": [
                          "links",
                          "familyReunificationId",
                          "familyreunificationachieved"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "familyReunificationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "familyreunificationachieved": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    familyReunification:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/9d57c33f-cc4e-47ff-8bbd-0580e7a0/familyreunifications/a87d4463-7e25-4df8-a079-b5f3dcecc6cc/history"
                        familyReunificationId: a87d4463-7e25-4df8-a079-b5f3dcecc6cc
                        familyreunificationachieved: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a familyreunification using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-familyreunifications-familyreunificationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific familyreunification specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-familyreunifications-familyreunificationid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "familyReunification"
                  ],
                  "properties": {
                    "familyReunification": {
                      "type": "object",
                      "required": [
                        "familyreunificationachieved"
                      ],
                      "properties": {
                        "familyreunificationachieved": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  familyReunification:
                    familyreunificationachieved: 0
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific familyreunification specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-familyreunifications-familyreunificationid
    parameters:
      - name: familyreunificationid
        in: path
        required: true
        schema:
          type: string
        description: Familyreunification Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/familyreunifications/{familyreunificationid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "familyReunifications"
                    ],
                    "properties": {
                      "familyReunifications": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "familyReunifications"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "familyReunifications": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "familyReunificationId",
                                "familyreunificationachieved"
                              ],
                              "properties": {
                                "familyReunificationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "familyreunificationachieved": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    familyReunifications:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      familyReunifications:
                        - familyReunificationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          familyreunificationachieved: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for familyreunification history.  Returns a list of familyreunification
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-familyreunifications-familyreunificationid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: familyreunificationid
        in: path
        required: true
        schema:
          type: string
        description: Familyreunification Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/housingassessmentdispositions':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "HousingAssessmentDispositions"
                    ],
                    "properties": {
                      "HousingAssessmentDispositions": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "HousingAssessmentDispositions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "HousingAssessmentDispositions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "housingassessmentDispositionId",
                                "assessmentdisposition",
                                "otherdisposition"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "housingassessmentDispositionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentdisposition": {
                                  "type": "integer"
                                },
                                "otherdisposition": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    HousingAssessmentDispositions:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      HousingAssessmentDispositions:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/9d57c33f-cc4e-47ff-8bbd-0580e7a0/housingassessmentdispositions/ff97e480-75ca-4040-b3a2-59078cadf548/history"
                          housingassessmentDispositionId: ff97e480-75ca-4040-b3a2-59078cadf548
                          assessmentdisposition: 1
                          otherdisposition: some disposition
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for housingassessmentdisposition.  Returns a list of
        housingassessmentdisposition ids, based on the query parameters sent.
        The query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "housingAssessmentDisposition"
                    ],
                    "properties": {
                      "housingAssessmentDisposition": {
                        "type": "object",
                        "required": [
                          "housingAssessmentDispositionId"
                        ],
                        "properties": {
                          "housingAssessmentDispositionId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  housingAssessmentDisposition:
                    housingAssessmentDispositionId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a housingassessmentdisposition
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "housingAssessmentDisposition"
                  ],
                  "properties": {
                    "housingAssessmentDisposition": {
                      "type": "object",
                      "required": [
                        "assessmentdisposition",
                        "otherdisposition"
                      ],
                      "properties": {
                        "assessmentdisposition": {
                          "type": "integer"
                        },
                        "otherdisposition": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  housingAssessmentDisposition:
                    assessmentdisposition: 0
                    otherdisposition: otherdisposition
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/housingassessmentdispositions/{housingassessmentdispositionid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "housingAssessmentDisposition"
                    ],
                    "properties": {
                      "housingAssessmentDisposition": {
                        "type": "object",
                        "required": [
                          "links",
                          "housingAssessmentDispositionId",
                          "assessmentdisposition",
                          "otherdisposition"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "housingAssessmentDispositionId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "assessmentdisposition": {
                            "type": "integer"
                          },
                          "otherdisposition": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    housingAssessmentDisposition:
                      links:
                      - rel: history
                        href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/9d57c33f-cc4e-47ff-8bbd-0580e7a0/housingassessmentdispositions/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                      housingAssessmentDispositionId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      assessmentdisposition: 0
                      otherdisposition: otherdisposition
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a housingassessmentdisposition using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions-housingassessmentdispositionid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific housingassessmentdisposition specified by the URI
        resource parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions-housingassessmentdispositionid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "housingAssessmentDisposition"
                  ],
                  "properties": {
                    "housingAssessmentDisposition": {
                      "type": "object",
                      "required": [
                        "assessmentdisposition",
                        "otherdisposition"
                      ],
                      "properties": {
                        "assessmentdisposition": {
                          "type": "integer"
                        },
                        "otherdisposition": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  housingAssessmentDisposition:
                    assessmentdisposition: 0
                    otherdisposition: otherdisposition
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific housingassessmentdisposition specified by the URI
        resource parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions-housingassessmentdispositionid
    parameters:
      - name: housingassessmentdispositionid
        in: path
        required: true
        schema:
          type: string
        description: Housingassessmentdisposition Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/housingassessmentdispositions/{housingassessmentdispositionid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "HousingAssessmentDispositions"
                    ],
                    "properties": {
                      "HousingAssessmentDispositions": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "HousingAssessmentDispositions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "HousingAssessmentDispositions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "housingassessmentDispositionId",
                                "assessmentdisposition",
                                "otherdisposition"
                              ],
                              "properties": {
                                "housingassessmentDispositionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "assessmentdisposition": {
                                  "type": "integer"
                                },
                                "otherdisposition": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    HousingAssessmentDispositions:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      HousingAssessmentDispositions:
                        - housingassessmentDispositionId: ff97e480-75ca-4040-b3a2-59078cadf548
                          assessmentdisposition: 1
                          otherdisposition: some disposition
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for housingassessmentdisposition history.  Returns a list of
        housingassessmentdisposition ids history, based on the query parameters sent.
        The query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-housingassessmentdispositions-housingassessmentdispositionid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: housingassessmentdispositionid
        in: path
        required: true
        schema:
          type: string
        description: Housingassessmentdisposition Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/projectcompletionstatuses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectCompletionStatuses"
                    ],
                    "properties": {
                      "projectCompletionStatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "projectCompletionStatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "projectCompletionStatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "projectCompletionStatusId",
                                "earlyExitReason",
                                "projectCompletionStatus"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "projectCompletionStatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "earlyExitReason": {
                                  "type": "integer"
                                },
                                "projectCompletionStatus": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    projectCompletionStatuses:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      projectCompletionStatuses:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/9d57c33f-cc4e-47ff-8bbd-0580e7a0/projectcompletionstatuses/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          projectCompletionStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          earlyExitReason: 0
                          projectCompletionStatus: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for projectcompletionstatus.  Returns a list of
        projectcompletionstatus ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-projectcompletionstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectCompletionStatus"
                    ],
                    "properties": {
                      "projectCompletionStatus": {
                        "type": "object",
                        "required": [
                          "projectCompletionStatusId"
                        ],
                        "properties": {
                          "projectCompletionStatusId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  projectCompletionStatus:
                    projectCompletionStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a projectcompletionstatus
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-exits-exitid-projectcompletionstatuses
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "projectCompletionStatus"
                  ],
                  "properties": {
                    "projectCompletionStatus": {
                      "type": "object",
                      "required": [
                        "earlyExitReason",
                        "projectCompletionStatus"
                      ],
                      "properties": {
                        "earlyExitReason": {
                          "type": "integer"
                        },
                        "projectCompletionStatus": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  projectCompletionStatus:
                    earlyExitReason: 0
                    projectCompletionStatus: 1
        required: true
    parameters:
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/projectcompletionstatuses/{projectcompletionstatusid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectCompletionStatus"
                    ],
                    "properties": {
                      "projectCompletionStatus": {
                        "type": "object",
                        "required": [
                          "links",
                          "projectCompletionStatusId",
                          "earlyExitReason",
                          "projectCompletionStatus"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "projectCompletionStatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "earlyExitReason": {
                            "type": "integer"
                          },
                          "projectCompletionStatus": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    projectCompletionStatus:
                      links:
                      - rel: history
                        href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/exits/9d57c33f-cc4e-47ff-8bbd-0580e7a0/housingassessmentdispositions/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                      projectCompletionStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      earlyExitReason: 0
                      projectCompletionStatus: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a projectcompletionstatus using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-projectcompletionstatuses-projectcompletionstatusid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific projectcompletionstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-exits-exitid-projectcompletionstatuses-projectcompletionstatusid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "projectCompletionStatus"
                  ],
                  "properties": {
                    "projectCompletionStatus": {
                      "type": "object",
                      "required": [
                        "earlyExitReason",
                        "projectCompletionStatus"
                      ],
                      "properties": {
                        "earlyExitReason": {
                          "type": "integer"
                        },
                        "projectCompletionStatus": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  projectCompletionStatus:
                    earlyExitReason: 0
                    projectCompletionStatus: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific projectcompletionstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-exits-exitid-projectcompletionstatuses-projectcompletionstatusid
    parameters:
      - name: projectcompletionstatusid
        in: path
        required: true
        schema:
          type: string
        description: Projectcompletionstatus Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/exits/{exitid}/projectcompletionstatuses/{projectcompletionstatusid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectCompletionStatuses"
                    ],
                    "properties": {
                      "projectCompletionStatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "projectCompletionStatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "projectCompletionStatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "projectCompletionStatusId",
                                "earlyExitReason",
                                "projectCompletionStatus"
                              ],
                              "properties": {
                                "projectCompletionStatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "earlyExitReason": {
                                  "type": "integer"
                                },
                                "projectCompletionStatus": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    projectCompletionStatuses:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      projectCompletionStatuses:
                        - projectCompletionStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          earlyExitReason: 0
                          projectCompletionStatus: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for projectcompletionstatus history.  Returns a list of
        projectcompletionstatus ids history, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-exits-exitid-projectcompletionstatuses-projectcompletionstatusid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: projectcompletionstatusid
        in: path
        required: true
        schema:
          type: string
        description: Projectcompletionstatus Identifier
      - name: exitid
        in: path
        required: true
        schema:
          type: string
        description: Exit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/formerwardchildwelfares':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "formerwardchildwelfares"
                    ],
                    "properties": {
                      "formerwardchildwelfares": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "formerwardchildwelfares"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "formerwardchildwelfares": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "childwelfaremonths",
                                "childwelfareyears",
                                "formerwardchildwelfare",
                                "informationDate",
                                "dataCollectionStage",
                                "formerwardchildwelfareid"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "childwelfaremonths": {
                                  "type": "integer"
                                },
                                "childwelfareyears": {
                                  "type": "integer"
                                },
                                "formerwardchildwelfare": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "formerwardchildwelfareid": {
                                  "type": "string",
                                  "format": "uuid",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    formerwardchildwelfares:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      formerwardchildwelfares:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/formerwardchildwelfares/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          childwelfaremonths: 0
                          childwelfareyears: 0
                          formerwardchildwelfare: 0
                          informationDate: 03-15-2016
                          dataCollectionStage: 1
                          formerwardchildwelfareid: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for formerwardchildwelfare.  Returns a list of
        formerwardchildwelfare ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-formerwardchildwelfares
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "formerwardchildwelfare"
                    ],
                    "properties": {
                      "formerwardchildwelfare": {
                        "type": "object",
                        "required": [
                          "formerwardchildwelfareid",
                          "childwelfaremonths",
                          "childwelfareyears",
                          "informationDate",
                          "dataCollectionStage",
                          "formerwardchildwelfare"
                        ],
                        "properties": {
                          "formerwardchildwelfareid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "childwelfaremonths": {
                            "type": "integer"
                          },
                          "childwelfareyears": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "formerwardchildwelfare": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                  formerwardchildwelfare:
                    formerwardchildwelfareid: 5c025aea-ecdc-4902-b451-4436b64a83ea
                    childwelfaremonths: 0
                    childwelfareyears: 0
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    formerwardchildwelfare: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a formerwardchildwelfare
      operationId: POST_clients-clientid-enrollments-enrollmentid-formerwardchildwelfares
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "formerwardchildwelfare"
                  ],
                  "properties": {
                    "formerwardchildwelfare": {
                      "type": "object",
                      "required": [
                        "childwelfaremonths",
                        "childwelfareyears",
                        "informationDate",
                        "dataCollectionStage",
                        "formerwardchildwelfare"
                      ],
                      "properties": {
                        "childwelfaremonths": {
                          "type": "integer"
                        },
                        "childwelfareyears": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "formerwardchildwelfare": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  formerwardchildwelfare:
                    childwelfaremonths: 0
                    childwelfareyears: 0
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    formerwardchildwelfare: 0
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/formerwardchildwelfares/{formerwardchildwelfareid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "formerwardchildwelfare"
                    ],
                    "properties": {
                      "formerwardchildwelfare": {
                        "type": "object",
                        "required": [
                          "links",
                          "formerwardchildwelfareid",
                          "childwelfaremonths",
                          "childwelfareyears",
                          "informationDate",
                          "dataCollectionStage",
                          "formerwardchildwelfare"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "formerwardchildwelfareid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "childwelfaremonths": {
                            "type": "integer"
                          },
                          "childwelfareyears": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "formerwardchildwelfare": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    formerwardchildwelfare:
                      links:
                      - rel: history
                        href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/formerwardchildwelfares/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                      formerwardchildwelfareid: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      childwelfaremonths: 0
                      childwelfareyears: 0
                      informationDate: 03-15-2016
                      dataCollectionStage: 1
                      formerwardchildwelfare: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a formerwardchildwelfare using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-formerwardchildwelfares-formerwardchildwelfareid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific formerwardchildwelfare specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-formerwardchildwelfares-formerwardchildwelfareid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "formerwardchildwelfare"
                  ],
                  "properties": {
                    "formerwardchildwelfare": {
                      "type": "object",
                      "required": [
                        "childwelfaremonths",
                        "childwelfareyears",
                        "informationDate",
                        "dataCollectionStage",
                        "formerwardchildwelfare"
                      ],
                      "properties": {
                        "childwelfaremonths": {
                          "type": "integer"
                        },
                        "childwelfareyears": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "formerwardchildwelfare": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  formerwardchildwelfare:
                    childwelfaremonths: 0
                    childwelfareyears: 0
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    formerwardchildwelfare: 0
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific formerwardchildwelfare specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-formerwardchildwelfares-formerwardchildwelfareid
    parameters:
      - name: formerwardchildwelfareid
        in: path
        required: true
        schema:
          type: string
        description: Formerwardchildwelfare Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/formerwardchildwelfares/{formerwardchildwelfareid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "formerwardchildwelfares"
                    ],
                    "properties": {
                      "formerwardchildwelfares": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "formerwardchildwelfares"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "formerwardchildwelfares": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "childwelfaremonths",
                                "childwelfareyears",
                                "formerwardchildwelfare",
                                "informationDate",
                                "dataCollectionStage",
                                "formerwardchildwelfareid"
                              ],
                              "properties": {
                                "childwelfaremonths": {
                                  "type": "integer"
                                },
                                "childwelfareyears": {
                                  "type": "integer"
                                },
                                "formerwardchildwelfare": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "formerwardchildwelfareid": {
                                  "type": "string",
                                  "format": "uuid",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    formerwardchildwelfares:
                      pagination:
                        from: 0
                        returned: 0
                        total: 0
                        maximum: 30
                        sort: {}
                      formerwardchildwelfares:
                        - childwelfaremonths: 0
                          childwelfareyears: 0
                          formerwardchildwelfare: 0
                          informationDate: 03-15-2016
                          dataCollectionStage: 1
                          formerwardchildwelfareid: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for formerwardchildwelfare history.  Returns a list of
        formerwardchildwelfare ids history, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-formerwardchildwelfares-formerwardchildwelfareid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: formerwardchildwelfareid
        in: path
        required: true
        schema:
          type: string
        description: Formerwardchildwelfare Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/formerwardjuvenilejustices':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "formerwardjuvenilejustices"
                    ],
                    "properties": {
                      "formerwardjuvenilejustices": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "formerwardjuvenilejustices"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "formerwardjuvenilejustices": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "formerwardjuvenilejusticeid",
                                "formerwardjuvenilejustice",
                                "juvenilejusticemonths",
                                "informationDate",
                                "dataCollectionStage",
                                "juvenilejusticeyears"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "formerwardjuvenilejusticeid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "formerwardjuvenilejustice": {
                                  "type": "integer"
                                },
                                "juvenilejusticemonths": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "juvenilejusticeyears": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    formerwardjuvenilejustices:
                      pagination:
                        from: 0
                        returned: 1
                        total: 0
                        maximum: 30
                        sort: {}
                      formerwardjuvenilejustices:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/formerwardjuvenilejustices/ee9c668d-6d77-425d-b734-e3f6e858c445/history"
                          formerwardjuvenilejusticeid: ee9c668d-6d77-425d-b734-e3f6e858c445
                          formerwardjuvenilejustice: 0
                          juvenilejusticemonths: 0
                          informationDate: 03-15-2016
                          dataCollectionStage: 1
                          juvenilejusticeyears: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for formerwardjuvenilejustice.  Returns a list of
        formerwardjuvenilejustice ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-formerwardjuvenilejustices
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "formerwardjuvenilejustice"
                    ],
                    "properties": {
                      "formerwardjuvenilejustice": {
                        "type": "object",
                        "required": [
                          "formerwardjuvenilejusticeid"
                        ],
                        "properties": {
                          "formerwardjuvenilejusticeid": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  formerwardjuvenilejustice:
                    formerwardjuvenilejusticeid: ee9c668d-6d77-425d-b734-e3f6e858c445
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a formerwardjuvenilejustice
      operationId: >-
        POST_clients-clientid-enrollments-enrollmentid-formerwardjuvenilejustices
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "formerwardjuvenilejustice"
                  ],
                  "properties": {
                    "formerwardjuvenilejustice": {
                      "type": "object",
                      "required": [
                        "formerwardjuvenilejustice",
                        "juvenilejusticemonths",
                        "informationDate",
                        "dataCollectionStage",
                        "juvenilejusticeyears"
                      ],
                      "properties": {
                        "formerwardjuvenilejustice": {
                          "type": "integer"
                        },
                        "juvenilejusticemonths": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "juvenilejusticeyears": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  formerwardjuvenilejustice:
                    formerwardjuvenilejustice: 0
                    juvenilejusticemonths: 0
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    juvenilejusticeyears: 0
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/formerwardjuvenilejustices/{formerwardjuvenilejusticeid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "formerwardjuvenilejustice"
                    ],
                    "properties": {
                      "formerwardjuvenilejustice": {
                        "type": "object",
                        "required": [
                          "links",
                          "formerwardjuvenilejusticeid",
                          "formerwardjuvenilejustice",
                          "juvenilejusticemonths",
                          "informationDate",
                          "dataCollectionStage",
                          "juvenilejusticeyears"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "formerwardjuvenilejusticeid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "formerwardjuvenilejustice": {
                            "type": "integer"
                          },
                          "juvenilejusticemonths": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "juvenilejusticeyears": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    formerwardjuvenilejustice:
                      links:
                      - rel: history
                        href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/formerwardjuvenilejustices/ee9c668d-6d77-425d-b734-e3f6e858c445/history"
                      formerwardjuvenilejusticeid: ee9c668d-6d77-425d-b734-e3f6e858c445
                      formerwardjuvenilejustice: 0
                      juvenilejusticemonths: 0
                      informationDate: 03-15-2016
                      dataCollectionStage: 1
                      juvenilejusticeyears: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a formerwardjuvenilejustice using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-formerwardjuvenilejustices-formerwardjuvenilejusticeid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific formerwardjuvenilejustice specified by the URI
        resource parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-formerwardjuvenilejustices-formerwardjuvenilejusticeid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "formerwardjuvenilejustice"
                  ],
                  "properties": {
                    "formerwardjuvenilejustice": {
                      "type": "object",
                      "required": [
                        "formerwardjuvenilejustice",
                        "juvenilejusticemonths",
                        "informationDate",
                        "dataCollectionStage",
                        "juvenilejusticeyears"
                      ],
                      "properties": {
                        "formerwardjuvenilejustice": {
                          "type": "integer"
                        },
                        "juvenilejusticemonths": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "juvenilejusticeyears": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  formerwardjuvenilejustice:
                    formerwardjuvenilejustice: 0
                    juvenilejusticemonths: 0
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
                    juvenilejusticeyears: 0
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific formerwardjuvenilejustice specified by the URI
        resource parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-formerwardjuvenilejustices-formerwardjuvenilejusticeid
    parameters:
      - name: formerwardjuvenilejusticeid
        in: path
        required: true
        schema:
          type: string
        description: Formerwardjuvenilejustice Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/formerwardjuvenilejustices/{formerwardjuvenilejusticeid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "formerwardjuvenilejustices"
                    ],
                    "properties": {
                      "formerwardjuvenilejustices": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "formerwardjuvenilejustices"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "formerwardjuvenilejustices": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "formerwardjuvenilejusticeid",
                                "formerwardjuvenilejustice",
                                "juvenilejusticemonths",
                                "informationDate",
                                "dataCollectionStage",
                                "juvenilejusticeyears"
                              ],
                              "properties": {
                                "formerwardjuvenilejusticeid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "formerwardjuvenilejustice": {
                                  "type": "integer"
                                },
                                "juvenilejusticemonths": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "juvenilejusticeyears": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    formerwardjuvenilejustices:
                      pagination:
                        from: 0
                        returned: 1
                        total: 0
                        maximum: 30
                        sort: {}
                      formerwardjuvenilejustices:
                        - formerwardjuvenilejusticeid: ee9c668d-6d77-425d-b734-e3f6e858c445
                          formerwardjuvenilejustice: 0
                          juvenilejusticemonths: 0
                          informationDate: 03-15-2016
                          dataCollectionStage: 1
                          juvenilejusticeyears: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for formerwardjuvenilejustice history.  Returns a list of
        formerwardjuvenilejustice ids history, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-formerwardjuvenilejustices-formerwardjuvenilejusticeid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: formerwardjuvenilejusticeid
        in: path
        required: true
        schema:
          type: string
        description: Formerwardjuvenilejustice Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthinsurances':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthInsurances"
                    ],
                    "properties": {
                      "healthInsurances": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthInsurances"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthInsurances": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "healthInsuranceId",
                                "cobra",
                                "employerprovided",
                                "insurancefromanysource",
                                "medicaid",
                                "medicare",
                                "nocobrareason",
                                "noemployerprovidedreason",
                                "nomedicaidreason",
                                "nomedicarereason",
                                "noprivatepayreason",
                                "noschipreason",
                                "nostatehealthinsreason",
                                "novamedreason",
                                "privatepay",
                                "schip",
                                "statehealthins",
                                "vamedicalservices",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "healthInsuranceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "cobra": {
                                  "type": "integer"
                                },
                                "employerprovided": {
                                  "type": "integer"
                                },
                                "insurancefromanysource": {
                                  "type": "integer"
                                },
                                "medicaid": {
                                  "type": "integer"
                                },
                                "medicare": {
                                  "type": "integer"
                                },
                                "nocobrareason": {
                                  "type": "integer"
                                },
                                "noemployerprovidedreason": {
                                  "type": "integer"
                                },
                                "nomedicaidreason": {
                                  "type": "integer"
                                },
                                "nomedicarereason": {
                                  "type": "integer"
                                },
                                "noprivatepayreason": {
                                  "type": "integer"
                                },
                                "noschipreason": {
                                  "type": "integer"
                                },
                                "nostatehealthinsreason": {
                                  "type": "integer"
                                },
                                "novamedreason": {
                                  "type": "integer"
                                },
                                "privatepay": {
                                  "type": "integer"
                                },
                                "schip": {
                                  "type": "integer"
                                },
                                "statehealthins": {
                                  "type": "integer"
                                },
                                "vamedicalservices": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthInsurances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthInsurances:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/healthinsurances/50a50523-e1ba-458f-a37e-66c9922b0204/history"
                          healthInsuranceId: 50a50523-e1ba-458f-a37e-66c9922b0204
                          cobra: -918045701
                          employerprovided: 49269345
                          insurancefromanysource: 9
                          medicaid: 99
                          medicare: 99
                          nocobrareason: 99
                          noemployerprovidedreason: 3
                          nomedicaidreason: 8
                          nomedicarereason: 2
                          noprivatepayreason: 8
                          noschipreason: 2
                          nostatehealthinsreason: 1
                          novamedreason: 1
                          privatepay: 1
                          schip: 0
                          statehealthins: 99
                          vamedicalservices: 1
                          informationDate: 03-15-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthinsurance.  Returns a list of healthinsurance ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-healthinsurances
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthInsurance"
                    ],
                    "properties": {
                      "healthInsurance": {
                        "type": "object",
                        "required": [
                          "healthInsuranceId"
                        ],
                        "properties": {
                          "healthInsuranceId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  healthInsurance:
                    healthInsuranceId: 50a50523-e1ba-458f-a37e-66c9922b0204
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a healthinsurance
      operationId: POST_clients-clientid-enrollments-enrollmentid-healthinsurances
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthInsurance"
                  ],
                  "properties": {
                    "healthInsurance": {
                      "type": "object",
                      "required": [
                        "cobra",
                        "employerprovided",
                        "insurancefromanysource",
                        "medicaid",
                        "medicare",
                        "nocobrareason",
                        "noemployerprovidedreason",
                        "nomedicaidreason",
                        "nomedicarereason",
                        "noprivatepayreason",
                        "noschipreason",
                        "nostatehealthinsreason",
                        "novamedreason",
                        "privatepay",
                        "schip",
                        "statehealthins",
                        "vamedicalservices",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "cobra": {
                          "type": "integer"
                        },
                        "employerprovided": {
                          "type": "integer"
                        },
                        "insurancefromanysource": {
                          "type": "integer"
                        },
                        "medicaid": {
                          "type": "integer"
                        },
                        "medicare": {
                          "type": "integer"
                        },
                        "nocobrareason": {
                          "type": "integer"
                        },
                        "noemployerprovidedreason": {
                          "type": "integer"
                        },
                        "nomedicaidreason": {
                          "type": "integer"
                        },
                        "nomedicarereason": {
                          "type": "integer"
                        },
                        "noprivatepayreason": {
                          "type": "integer"
                        },
                        "noschipreason": {
                          "type": "integer"
                        },
                        "nostatehealthinsreason": {
                          "type": "integer"
                        },
                        "novamedreason": {
                          "type": "integer"
                        },
                        "privatepay": {
                          "type": "integer"
                        },
                        "schip": {
                          "type": "integer"
                        },
                        "statehealthins": {
                          "type": "integer"
                        },
                        "vamedicalservices": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  healthInsurance:
                    cobra: -918045701
                    employerprovided: 49269345
                    insurancefromanysource: 9
                    medicaid: 99
                    medicare: 99
                    nocobrareason: 99
                    noemployerprovidedreason: 3
                    nomedicaidreason: 8
                    nomedicarereason: 2
                    noprivatepayreason: 8
                    noschipreason: 2
                    nostatehealthinsreason: 1
                    novamedreason: 1
                    privatepay: 1
                    schip: 0
                    statehealthins: 99
                    vamedicalservices: 1
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthinsurances/{healthinsuranceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthInsurance"
                    ],
                    "properties": {
                      "healthInsurance": {
                        "type": "object",
                        "required": [
                          "links",
                          "healthInsuranceId",
                          "cobra",
                          "employerprovided",
                          "insurancefromanysource",
                          "medicaid",
                          "medicare",
                          "nocobrareason",
                          "noemployerprovidedreason",
                          "nomedicaidreason",
                          "nomedicarereason",
                          "noprivatepayreason",
                          "noschipreason",
                          "nostatehealthinsreason",
                          "novamedreason",
                          "privatepay",
                          "schip",
                          "statehealthins",
                          "vamedicalservices",
                          "informationDate",
                          "dataCollectionStage"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "healthInsuranceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "cobra": {
                            "type": "integer"
                          },
                          "employerprovided": {
                            "type": "integer"
                          },
                          "insurancefromanysource": {
                            "type": "integer"
                          },
                          "medicaid": {
                            "type": "integer"
                          },
                          "medicare": {
                            "type": "integer"
                          },
                          "nocobrareason": {
                            "type": "integer"
                          },
                          "noemployerprovidedreason": {
                            "type": "integer"
                          },
                          "nomedicaidreason": {
                            "type": "integer"
                          },
                          "nomedicarereason": {
                            "type": "integer"
                          },
                          "noprivatepayreason": {
                            "type": "integer"
                          },
                          "noschipreason": {
                            "type": "integer"
                          },
                          "nostatehealthinsreason": {
                            "type": "integer"
                          },
                          "novamedreason": {
                            "type": "integer"
                          },
                          "privatepay": {
                            "type": "integer"
                          },
                          "schip": {
                            "type": "integer"
                          },
                          "statehealthins": {
                            "type": "integer"
                          },
                          "vamedicalservices": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    healthInsurance:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/healthinsurances/50a50523-e1ba-458f-a37e-66c9922b0204/history"
                        healthInsuranceId: 50a50523-e1ba-458f-a37e-66c9922b0204
                        cobra: -918045701
                        employerprovided: 49269345
                        insurancefromanysource: 9
                        medicaid: 99
                        medicare: 99
                        nocobrareason: 99
                        noemployerprovidedreason: 3
                        nomedicaidreason: 8
                        nomedicarereason: 2
                        noprivatepayreason: 8
                        noschipreason: 2
                        nostatehealthinsreason: 1
                        novamedreason: 1
                        privatepay: 1
                        schip: 0
                        statehealthins: 99
                        vamedicalservices: 1
                        informationDate: 03-15-2016
                        dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a healthinsurance using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-healthinsurances-healthinsuranceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific healthinsurance specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-healthinsurances-healthinsuranceid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthInsurance"
                  ],
                  "properties": {
                    "healthInsurance": {
                      "type": "object",
                      "required": [
                        "cobra",
                        "employerprovided",
                        "insurancefromanysource",
                        "medicaid",
                        "medicare",
                        "nocobrareason",
                        "noemployerprovidedreason",
                        "nomedicaidreason",
                        "nomedicarereason",
                        "noprivatepayreason",
                        "noschipreason",
                        "nostatehealthinsreason",
                        "novamedreason",
                        "privatepay",
                        "schip",
                        "statehealthins",
                        "vamedicalservices",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "cobra": {
                          "type": "integer"
                        },
                        "employerprovided": {
                          "type": "integer"
                        },
                        "insurancefromanysource": {
                          "type": "integer"
                        },
                        "medicaid": {
                          "type": "integer"
                        },
                        "medicare": {
                          "type": "integer"
                        },
                        "nocobrareason": {
                          "type": "integer"
                        },
                        "noemployerprovidedreason": {
                          "type": "integer"
                        },
                        "nomedicaidreason": {
                          "type": "integer"
                        },
                        "nomedicarereason": {
                          "type": "integer"
                        },
                        "noprivatepayreason": {
                          "type": "integer"
                        },
                        "noschipreason": {
                          "type": "integer"
                        },
                        "nostatehealthinsreason": {
                          "type": "integer"
                        },
                        "novamedreason": {
                          "type": "integer"
                        },
                        "privatepay": {
                          "type": "integer"
                        },
                        "schip": {
                          "type": "integer"
                        },
                        "statehealthins": {
                          "type": "integer"
                        },
                        "vamedicalservices": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  healthInsurance:
                    cobra: -918045701
                    employerprovided: 49269345
                    insurancefromanysource: 9
                    medicaid: 99
                    medicare: 99
                    nocobrareason: 99
                    noemployerprovidedreason: 3
                    nomedicaidreason: 8
                    nomedicarereason: 2
                    noprivatepayreason: 8
                    noschipreason: 2
                    nostatehealthinsreason: 1
                    novamedreason: 1
                    privatepay: 1
                    schip: 0
                    statehealthins: 99
                    vamedicalservices: 1
                    informationDate: 03-15-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific healthinsurance specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-healthinsurances-healthinsuranceid
    parameters:
      - name: healthinsuranceid
        in: path
        required: true
        schema:
          type: string
        description: Healthinsurance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthinsurances/{healthinsuranceid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthInsurances"
                    ],
                    "properties": {
                      "healthInsurances": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthInsurances"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthInsurances": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "healthInsuranceId",
                                "cobra",
                                "employerprovided",
                                "insurancefromanysource",
                                "medicaid",
                                "medicare",
                                "nocobrareason",
                                "noemployerprovidedreason",
                                "nomedicaidreason",
                                "nomedicarereason",
                                "noprivatepayreason",
                                "noschipreason",
                                "nostatehealthinsreason",
                                "novamedreason",
                                "privatepay",
                                "schip",
                                "statehealthins",
                                "vamedicalservices",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "healthInsuranceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "cobra": {
                                  "type": "integer"
                                },
                                "employerprovided": {
                                  "type": "integer"
                                },
                                "insurancefromanysource": {
                                  "type": "integer"
                                },
                                "medicaid": {
                                  "type": "integer"
                                },
                                "medicare": {
                                  "type": "integer"
                                },
                                "nocobrareason": {
                                  "type": "integer"
                                },
                                "noemployerprovidedreason": {
                                  "type": "integer"
                                },
                                "nomedicaidreason": {
                                  "type": "integer"
                                },
                                "nomedicarereason": {
                                  "type": "integer"
                                },
                                "noprivatepayreason": {
                                  "type": "integer"
                                },
                                "noschipreason": {
                                  "type": "integer"
                                },
                                "nostatehealthinsreason": {
                                  "type": "integer"
                                },
                                "novamedreason": {
                                  "type": "integer"
                                },
                                "privatepay": {
                                  "type": "integer"
                                },
                                "schip": {
                                  "type": "integer"
                                },
                                "statehealthins": {
                                  "type": "integer"
                                },
                                "vamedicalservices": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthInsurances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthInsurances:
                        - healthInsuranceId: 50a50523-e1ba-458f-a37e-66c9922b0204
                          cobra: -918045701
                          employerprovided: 49269345
                          insurancefromanysource: 9
                          medicaid: 99
                          medicare: 99
                          nocobrareason: 99
                          noemployerprovidedreason: 3
                          nomedicaidreason: 8
                          nomedicarereason: 2
                          noprivatepayreason: 8
                          noschipreason: 2
                          nostatehealthinsreason: 1
                          novamedreason: 1
                          privatepay: 1
                          schip: 0
                          statehealthins: 99
                          vamedicalservices: 1
                          informationDate: 03-15-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthinsurance history.  Returns a list of healthinsurance ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-healthinsurances-healthinsuranceid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: healthinsuranceid
        in: path
        required: true
        schema:
          type: string
        description: Healthinsurance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthStatuses"
                    ],
                    "properties": {
                      "healthStatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthStatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthStatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "healthStatusId",
                                "informationDate",
                                "dataCollectionStage",
                                "healthCategory",
                                "healthStatus",
                                "dueDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "healthStatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "healthCategory": {
                                  "type": "integer"
                                },
                                "healthStatus": {
                                  "type": "integer"
                                },
                                "dueDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthStatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthStatuses:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/healthstatuses/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          healthStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
                          healthCategory: 27
                          healthStatus: 1
                          dueDate: 04-18-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthstatus.  Returns a list of healthstatus ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-healthstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthStatus"
                    ],
                    "properties": {
                      "healthStatus": {
                        "type": "object",
                        "required": [
                          "healthStatusId"
                        ],
                        "properties": {
                          "healthStatusId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  healthStatus:
                    healthStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a healthstatus
      operationId: POST_clients-clientid-enrollments-enrollmentid-healthstatuses
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthStatus"
                  ],
                  "properties": {
                    "healthStatus": {
                      "type": "object",
                      "required": [
                        "informationDate",
                        "dataCollectionStage",
                        "healthCategory",
                        "healthStatus"
                      ],
                      "properties": {
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "healthCategory": {
                          "type": "integer"
                        },
                        "healthStatus": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  healthStatus:
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
                    healthCategory: 27
                    healthStatus: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses/{healthstatusid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthStatus"
                    ],
                    "properties": {
                      "healthStatus": {
                        "type": "object",
                        "required": [
                          "links",
                          "healthStatusId",
                          "informationDate",
                          "dataCollectionStage",
                          "healthCategory",
                          "healthStatus",
                          "dueDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "healthStatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          },
                          "healthCategory": {
                            "type": "integer"
                          },
                          "healthStatus": {
                            "type": "integer"
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    healthStatus:
                      links:
                      - rel: history
                        href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/healthstatuses/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                      healthStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                      informationDate: 04-18-2016
                      dataCollectionStage: 1
                      healthCategory: 27
                      healthStatus: 1
                      dueDate: 04-18-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a healthstatus using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-healthstatuses-healthstatusid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific healthstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-healthstatuses-healthstatusid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "healthStatus"
                  ],
                  "properties": {
                    "healthStatus": {
                      "type": "object",
                      "required": [
                        "informationDate",
                        "dataCollectionStage",
                        "healthCategory",
                        "healthStatus",
                        "dueDate"
                      ],
                      "properties": {
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        },
                        "healthCategory": {
                          "type": "integer"
                        },
                        "healthStatus": {
                          "type": "integer"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        }
                      }
                    }
                  }
                }
              example:
                  healthStatus:
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
                    healthCategory: 27
                    healthStatus: 1
                    dueDate: 04-18-2016
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific healthstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-healthstatuses-healthstatusid
    parameters:
      - name: healthstatusid
        in: path
        required: true
        schema:
          type: string
        description: Healthstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/healthstatuses/{healthstatusid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "healthStatuses"
                    ],
                    "properties": {
                      "healthStatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "healthStatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "healthStatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "healthStatusId",
                                "informationDate",
                                "dataCollectionStage",
                                "healthCategory",
                                "healthStatus",
                                "dueDate"
                              ],
                              "properties": {
                                "healthStatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                },
                                "healthCategory": {
                                  "type": "integer"
                                },
                                "healthStatus": {
                                  "type": "integer"
                                },
                                "dueDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    healthStatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      healthStatuses:
                        - healthStatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
                          healthCategory: 27
                          healthStatus: 1
                          dueDate: 04-18-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for healthstatus history.  Returns a list of healthstatus ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-healthstatuses-healthstatusid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: healthstatusid
        in: path
        required: true
        schema:
          type: string
        description: Healthstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "IncomeAndSources"
                    ],
                    "properties": {
                      "IncomeAndSources": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "incomeAndSources"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "incomeAndSources": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "incomeAndSourceId",
                                "alimony",
                                "alimonyamount",
                                "childsupport",
                                "childsupportamount",
                                "earned",
                                "earnedamount",
                                "ga",
                                "gaamount",
                                "incomefromanysource",
                                "othersource",
                                "othersourceamount",
                                "othersourceidentify",
                                "pension",
                                "pensionamount",
                                "privatedisability",
                                "privatedisabilityamount",
                                "socsecretirement",
                                "socsecretirementamount",
                                "ssdi",
                                "ssdiamount",
                                "ssi",
                                "ssiamount",
                                "tanf",
                                "tanfamount",
                                "totalmonthlyincome",
                                "unemployment",
                                "unemploymentamount",
                                "vadisabilitynonservice",
                                "vadisabilitynonserviceamount",
                                "vadisabilityservice",
                                "vadisabilityserviceamount",
                                "workerscomp",
                                "workerscompamount",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "incomeAndSourceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "alimony": {
                                  "type": "integer"
                                },
                                "alimonyamount": {
                                  "type": "integer"
                                },
                                "childsupport": {
                                  "type": "integer"
                                },
                                "childsupportamount": {
                                  "type": "integer"
                                },
                                "earned": {
                                  "type": "integer"
                                },
                                "earnedamount": {
                                  "type": "integer"
                                },
                                "ga": {
                                  "type": "integer"
                                },
                                "gaamount": {
                                  "type": "integer"
                                },
                                "incomefromanysource": {
                                  "type": "integer"
                                },
                                "othersource": {
                                  "type": "integer"
                                },
                                "othersourceamount": {
                                  "type": "integer"
                                },
                                "othersourceidentify": {
                                  "type": "string",
                                },
                                "pension": {
                                  "type": "integer"
                                },
                                "pensionamount": {
                                  "type": "integer"
                                },
                                "privatedisability": {
                                  "type": "integer"
                                },
                                "privatedisabilityamount": {
                                  "type": "integer"
                                },
                                "socsecretirement": {
                                  "type": "integer"
                                },
                                "socsecretirementamount": {
                                  "type": "integer"
                                },
                                "ssdi": {
                                  "type": "integer"
                                },
                                "ssdiamount": {
                                  "type": "integer"
                                },
                                "ssi": {
                                  "type": "integer"
                                },
                                "ssiamount": {
                                  "type": "integer"
                                },
                                "tanf": {
                                  "type": "integer"
                                },
                                "tanfamount": {
                                  "type": "integer"
                                },
                                "totalmonthlyincome": {
                                  "type": "integer"
                                },
                                "unemployment": {
                                  "type": "integer"
                                },
                                "unemploymentamount": {
                                  "type": "integer"
                                },
                                "vadisabilitynonservice": {
                                  "type": "integer"
                                },
                                "vadisabilitynonserviceamount": {
                                  "type": "integer"
                                },
                                "vadisabilityservice": {
                                  "type": "integer"
                                },
                                "vadisabilityserviceamount": {
                                  "type": "integer"
                                },
                                "workerscomp": {
                                  "type": "integer"
                                },
                                "workerscompamount": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    IncomeAndSources:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      incomeAndSources:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/incomeandsources/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          incomeAndSourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          alimony: 99
                          alimonyamount: 15
                          childsupport: 1
                          childsupportamount: 3
                          earned: 99
                          earnedamount: 15
                          ga: 0
                          gaamount: 3
                          incomefromanysource: 8
                          othersource: 0
                          othersourceamount: 15
                          othersourceidentify: test
                          pension: 99
                          pensionamount: 3
                          privatedisability: 1
                          privatedisabilityamount: 15
                          socsecretirement: 99
                          socsecretirementamount: 15
                          ssdi: 0
                          ssdiamount: 3
                          ssi: 99
                          ssiamount: 3
                          tanf: 0
                          tanfamount: 3
                          totalmonthlyincome: 3
                          unemployment: 99
                          unemploymentamount: 15
                          vadisabilitynonservice: 0
                          vadisabilitynonserviceamount: 3
                          vadisabilityservice: 1
                          vadisabilityserviceamount: 15
                          workerscomp: 0
                          workerscompamount: 15
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for incomeandsource.  Returns a list of incomeandsource ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-incomeandsources
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "incomeAndSource"
                    ],
                    "properties": {
                      "incomeAndSource": {
                        "type": "object",
                        "required": [
                          "incomeAndSourceId"
                        ],
                        "properties": {
                          "incomeAndSourceId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  incomeAndSource:
                    incomeAndSourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a incomeandsource
      operationId: POST_clients-clientid-enrollments-enrollmentid-incomeandsources
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "incomeAndSource"
                  ],
                  "properties": {
                    "incomeAndSource": {
                      "type": "object",
                      "required": [
                        "alimony",
                        "alimonyamount",
                        "childsupport",
                        "childsupportamount",
                        "earned",
                        "earnedamount",
                        "ga",
                        "gaamount",
                        "incomefromanysource",
                        "othersource",
                        "othersourceamount",
                        "othersourceidentify",
                        "pension",
                        "pensionamount",
                        "privatedisability",
                        "privatedisabilityamount",
                        "socsecretirement",
                        "socsecretirementamount",
                        "ssdi",
                        "ssdiamount",
                        "ssi",
                        "ssiamount",
                        "tanf",
                        "tanfamount",
                        "totalmonthlyincome",
                        "unemployment",
                        "unemploymentamount",
                        "vadisabilitynonservice",
                        "vadisabilitynonserviceamount",
                        "vadisabilityservice",
                        "vadisabilityserviceamount",
                        "workerscomp",
                        "workerscompamount",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "alimony": {
                          "type": "integer"
                        },
                        "alimonyamount": {
                          "type": "integer"
                        },
                        "childsupport": {
                          "type": "integer"
                        },
                        "childsupportamount": {
                          "type": "integer"
                        },
                        "earned": {
                          "type": "integer"
                        },
                        "earnedamount": {
                          "type": "integer"
                        },
                        "ga": {
                          "type": "integer"
                        },
                        "gaamount": {
                          "type": "integer"
                        },
                        "incomefromanysource": {
                          "type": "integer"
                        },
                        "othersource": {
                          "type": "integer"
                        },
                        "othersourceamount": {
                          "type": "integer"
                        },
                        "othersourceidentify": {
                          "type": "string",
                        },
                        "pension": {
                          "type": "integer"
                        },
                        "pensionamount": {
                          "type": "integer"
                        },
                        "privatedisability": {
                          "type": "integer"
                        },
                        "privatedisabilityamount": {
                          "type": "integer"
                        },
                        "socsecretirement": {
                          "type": "integer"
                        },
                        "socsecretirementamount": {
                          "type": "integer"
                        },
                        "ssdi": {
                          "type": "integer"
                        },
                        "ssdiamount": {
                          "type": "integer"
                        },
                        "ssi": {
                          "type": "integer"
                        },
                        "ssiamount": {
                          "type": "integer"
                        },
                        "tanf": {
                          "type": "integer"
                        },
                        "tanfamount": {
                          "type": "integer"
                        },
                        "totalmonthlyincome": {
                          "type": "integer"
                        },
                        "unemployment": {
                          "type": "integer"
                        },
                        "unemploymentamount": {
                          "type": "integer"
                        },
                        "vadisabilitynonservice": {
                          "type": "integer"
                        },
                        "vadisabilitynonserviceamount": {
                          "type": "integer"
                        },
                        "vadisabilityservice": {
                          "type": "integer"
                        },
                        "vadisabilityserviceamount": {
                          "type": "integer"
                        },
                        "workerscomp": {
                          "type": "integer"
                        },
                        "workerscompamount": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  incomeAndSource:
                    alimony: 99
                    alimonyamount: 15
                    childsupport: 1
                    childsupportamount: 3
                    earned: 99
                    earnedamount: 15
                    ga: 0
                    gaamount: 3
                    incomefromanysource: 8
                    othersource: 0
                    othersourceamount: 15
                    othersourceidentify: test
                    pension: 99
                    pensionamount: 3
                    privatedisability: 1
                    privatedisabilityamount: 15
                    socsecretirement: 99
                    socsecretirementamount: 15
                    ssdi: 0
                    ssdiamount: 3
                    ssi: 99
                    ssiamount: 3
                    tanf: 0
                    tanfamount: 3
                    totalmonthlyincome: 3
                    unemployment: 99
                    unemploymentamount: 15
                    vadisabilitynonservice: 0
                    vadisabilitynonserviceamount: 3
                    vadisabilityservice: 1
                    vadisabilityserviceamount: 15
                    workerscomp: 0
                    workerscompamount: 15
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources/{incomeandsourceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "incomeAndSource"
                    ],
                    "properties": {
                      "incomeAndSource": {
                        "type": "object",
                        "required": [
                          "links",
                          "incomeAndSourceId",
                          "alimony",
                          "alimonyamount",
                          "childsupport",
                          "childsupportamount",
                          "earned",
                          "earnedamount",
                          "ga",
                          "gaamount",
                          "incomefromanysource",
                          "othersource",
                          "othersourceamount",
                          "othersourceidentify",
                          "pension",
                          "pensionamount",
                          "privatedisability",
                          "privatedisabilityamount",
                          "socsecretirement",
                          "socsecretirementamount",
                          "ssdi",
                          "ssdiamount",
                          "ssi",
                          "ssiamount",
                          "tanf",
                          "tanfamount",
                          "totalmonthlyincome",
                          "unemployment",
                          "unemploymentamount",
                          "vadisabilitynonservice",
                          "vadisabilitynonserviceamount",
                          "vadisabilityservice",
                          "vadisabilityserviceamount",
                          "workerscomp",
                          "workerscompamount",
                          "informationDate",
                          "dataCollectionStage"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "incomeAndSourceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "alimony": {
                            "type": "integer"
                          },
                          "alimonyamount": {
                            "type": "integer"
                          },
                          "childsupport": {
                            "type": "integer"
                          },
                          "childsupportamount": {
                            "type": "integer"
                          },
                          "earned": {
                            "type": "integer"
                          },
                          "earnedamount": {
                            "type": "integer"
                          },
                          "ga": {
                            "type": "integer"
                          },
                          "gaamount": {
                            "type": "integer"
                          },
                          "incomefromanysource": {
                            "type": "integer"
                          },
                          "othersource": {
                            "type": "integer"
                          },
                          "othersourceamount": {
                            "type": "integer"
                          },
                          "othersourceidentify": {
                            "type": "string",
                          },
                          "pension": {
                            "type": "integer"
                          },
                          "pensionamount": {
                            "type": "integer"
                          },
                          "privatedisability": {
                            "type": "integer"
                          },
                          "privatedisabilityamount": {
                            "type": "integer"
                          },
                          "socsecretirement": {
                            "type": "integer"
                          },
                          "socsecretirementamount": {
                            "type": "integer"
                          },
                          "ssdi": {
                            "type": "integer"
                          },
                          "ssdiamount": {
                            "type": "integer"
                          },
                          "ssi": {
                            "type": "integer"
                          },
                          "ssiamount": {
                            "type": "integer"
                          },
                          "tanf": {
                            "type": "integer"
                          },
                          "tanfamount": {
                            "type": "integer"
                          },
                          "totalmonthlyincome": {
                            "type": "integer"
                          },
                          "unemployment": {
                            "type": "integer"
                          },
                          "unemploymentamount": {
                            "type": "integer"
                          },
                          "vadisabilitynonservice": {
                            "type": "integer"
                          },
                          "vadisabilitynonserviceamount": {
                            "type": "integer"
                          },
                          "vadisabilityservice": {
                            "type": "integer"
                          },
                          "vadisabilityserviceamount": {
                            "type": "integer"
                          },
                          "workerscomp": {
                            "type": "integer"
                          },
                          "workerscompamount": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    incomeAndSource:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/incomeandsources/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        incomeAndSourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        alimony: 99
                        alimonyamount: 15
                        childsupport: 1
                        childsupportamount: 3
                        earned: 99
                        earnedamount: 15
                        ga: 0
                        gaamount: 3
                        incomefromanysource: 8
                        othersource: 0
                        othersourceamount: 15
                        othersourceidentify: test
                        pension: 99
                        pensionamount: 3
                        privatedisability: 1
                        privatedisabilityamount: 15
                        socsecretirement: 99
                        socsecretirementamount: 15
                        ssdi: 0
                        ssdiamount: 3
                        ssi: 99
                        ssiamount: 3
                        tanf: 0
                        tanfamount: 3
                        totalmonthlyincome: 3
                        unemployment: 99
                        unemploymentamount: 15
                        vadisabilitynonservice: 0
                        vadisabilitynonserviceamount: 3
                        vadisabilityservice: 1
                        vadisabilityserviceamount: 15
                        workerscomp: 0
                        workerscompamount: 15
                        informationDate: 03-17-2016
                        dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a incomeandsource using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-incomeandsources-incomeandsourceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific incomeandsource specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-incomeandsources-incomeandsourceid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "incomeAndSource"
                  ],
                  "properties": {
                    "incomeAndSource": {
                      "type": "object",
                      "required": [
                        "alimony",
                        "alimonyamount",
                        "childsupport",
                        "childsupportamount",
                        "earned",
                        "earnedamount",
                        "ga",
                        "gaamount",
                        "incomefromanysource",
                        "othersource",
                        "othersourceamount",
                        "othersourceidentify",
                        "pension",
                        "pensionamount",
                        "privatedisability",
                        "privatedisabilityamount",
                        "socsecretirement",
                        "socsecretirementamount",
                        "ssdi",
                        "ssdiamount",
                        "ssi",
                        "ssiamount",
                        "tanf",
                        "tanfamount",
                        "totalmonthlyincome",
                        "unemployment",
                        "unemploymentamount",
                        "vadisabilitynonservice",
                        "vadisabilitynonserviceamount",
                        "vadisabilityservice",
                        "vadisabilityserviceamount",
                        "workerscomp",
                        "workerscompamount",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "alimony": {
                          "type": "integer"
                        },
                        "alimonyamount": {
                          "type": "integer"
                        },
                        "childsupport": {
                          "type": "integer"
                        },
                        "childsupportamount": {
                          "type": "integer"
                        },
                        "earned": {
                          "type": "integer"
                        },
                        "earnedamount": {
                          "type": "integer"
                        },
                        "ga": {
                          "type": "integer"
                        },
                        "gaamount": {
                          "type": "integer"
                        },
                        "incomefromanysource": {
                          "type": "integer"
                        },
                        "othersource": {
                          "type": "integer"
                        },
                        "othersourceamount": {
                          "type": "integer"
                        },
                        "othersourceidentify": {
                          "type": "string",
                        },
                        "pension": {
                          "type": "integer"
                        },
                        "pensionamount": {
                          "type": "integer"
                        },
                        "privatedisability": {
                          "type": "integer"
                        },
                        "privatedisabilityamount": {
                          "type": "integer"
                        },
                        "socsecretirement": {
                          "type": "integer"
                        },
                        "socsecretirementamount": {
                          "type": "integer"
                        },
                        "ssdi": {
                          "type": "integer"
                        },
                        "ssdiamount": {
                          "type": "integer"
                        },
                        "ssi": {
                          "type": "integer"
                        },
                        "ssiamount": {
                          "type": "integer"
                        },
                        "tanf": {
                          "type": "integer"
                        },
                        "tanfamount": {
                          "type": "integer"
                        },
                        "totalmonthlyincome": {
                          "type": "integer"
                        },
                        "unemployment": {
                          "type": "integer"
                        },
                        "unemploymentamount": {
                          "type": "integer"
                        },
                        "vadisabilitynonservice": {
                          "type": "integer"
                        },
                        "vadisabilitynonserviceamount": {
                          "type": "integer"
                        },
                        "vadisabilityservice": {
                          "type": "integer"
                        },
                        "vadisabilityserviceamount": {
                          "type": "integer"
                        },
                        "workerscomp": {
                          "type": "integer"
                        },
                        "workerscompamount": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  incomeAndSource:
                    alimony: 99
                    alimonyamount: 15
                    childsupport: 1
                    childsupportamount: 3
                    earned: 99
                    earnedamount: 15
                    ga: 0
                    gaamount: 3
                    incomefromanysource: 8
                    othersource: 0
                    othersourceamount: 15
                    othersourceidentify: test
                    pension: 99
                    pensionamount: 3
                    privatedisability: 1
                    privatedisabilityamount: 15
                    socsecretirement: 99
                    socsecretirementamount: 15
                    ssdi: 0
                    ssdiamount: 3
                    ssi: 99
                    ssiamount: 3
                    tanf: 0
                    tanfamount: 3
                    totalmonthlyincome: 3
                    unemployment: 99
                    unemploymentamount: 15
                    vadisabilitynonservice: 0
                    vadisabilitynonserviceamount: 3
                    vadisabilityservice: 1
                    vadisabilityserviceamount: 15
                    workerscomp: 0
                    workerscompamount: 15
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific incomeandsource specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-incomeandsources-incomeandsourceid
    parameters:
      - name: incomeandsourceid
        in: path
        required: true
        schema:
          type: string
        description: Incomeandsource Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/incomeandsources/{incomeandsourceid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "IncomeAndSources"
                    ],
                    "properties": {
                      "IncomeAndSources": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "incomeAndSources"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "incomeAndSources": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "incomeAndSourceId",
                                "alimony",
                                "alimonyamount",
                                "childsupport",
                                "childsupportamount",
                                "earned",
                                "earnedamount",
                                "ga",
                                "gaamount",
                                "incomefromanysource",
                                "othersource",
                                "othersourceamount",
                                "othersourceidentify",
                                "pension",
                                "pensionamount",
                                "privatedisability",
                                "privatedisabilityamount",
                                "socsecretirement",
                                "socsecretirementamount",
                                "ssdi",
                                "ssdiamount",
                                "ssi",
                                "ssiamount",
                                "tanf",
                                "tanfamount",
                                "totalmonthlyincome",
                                "unemployment",
                                "unemploymentamount",
                                "vadisabilitynonservice",
                                "vadisabilitynonserviceamount",
                                "vadisabilityservice",
                                "vadisabilityserviceamount",
                                "workerscomp",
                                "workerscompamount",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "incomeAndSourceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "alimony": {
                                  "type": "integer"
                                },
                                "alimonyamount": {
                                  "type": "integer"
                                },
                                "childsupport": {
                                  "type": "integer"
                                },
                                "childsupportamount": {
                                  "type": "integer"
                                },
                                "earned": {
                                  "type": "integer"
                                },
                                "earnedamount": {
                                  "type": "integer"
                                },
                                "ga": {
                                  "type": "integer"
                                },
                                "gaamount": {
                                  "type": "integer"
                                },
                                "incomefromanysource": {
                                  "type": "integer"
                                },
                                "othersource": {
                                  "type": "integer"
                                },
                                "othersourceamount": {
                                  "type": "integer"
                                },
                                "othersourceidentify": {
                                  "type": "string",
                                },
                                "pension": {
                                  "type": "integer"
                                },
                                "pensionamount": {
                                  "type": "integer"
                                },
                                "privatedisability": {
                                  "type": "integer"
                                },
                                "privatedisabilityamount": {
                                  "type": "integer"
                                },
                                "socsecretirement": {
                                  "type": "integer"
                                },
                                "socsecretirementamount": {
                                  "type": "integer"
                                },
                                "ssdi": {
                                  "type": "integer"
                                },
                                "ssdiamount": {
                                  "type": "integer"
                                },
                                "ssi": {
                                  "type": "integer"
                                },
                                "ssiamount": {
                                  "type": "integer"
                                },
                                "tanf": {
                                  "type": "integer"
                                },
                                "tanfamount": {
                                  "type": "integer"
                                },
                                "totalmonthlyincome": {
                                  "type": "integer"
                                },
                                "unemployment": {
                                  "type": "integer"
                                },
                                "unemploymentamount": {
                                  "type": "integer"
                                },
                                "vadisabilitynonservice": {
                                  "type": "integer"
                                },
                                "vadisabilitynonserviceamount": {
                                  "type": "integer"
                                },
                                "vadisabilityservice": {
                                  "type": "integer"
                                },
                                "vadisabilityserviceamount": {
                                  "type": "integer"
                                },
                                "workerscomp": {
                                  "type": "integer"
                                },
                                "workerscompamount": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    IncomeAndSources:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      incomeAndSources:
                        - incomeAndSourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          alimony: 99
                          alimonyamount: 15
                          childsupport: 1
                          childsupportamount: 3
                          earned: 99
                          earnedamount: 15
                          ga: 0
                          gaamount: 3
                          incomefromanysource: 8
                          othersource: 0
                          othersourceamount: 15
                          othersourceidentify: test
                          pension: 99
                          pensionamount: 3
                          privatedisability: 1
                          privatedisabilityamount: 15
                          socsecretirement: 99
                          socsecretirementamount: 15
                          ssdi: 0
                          ssdiamount: 3
                          ssi: 99
                          ssiamount: 3
                          tanf: 0
                          tanfamount: 3
                          totalmonthlyincome: 3
                          unemployment: 99
                          unemploymentamount: 15
                          vadisabilitynonservice: 0
                          vadisabilitynonserviceamount: 3
                          vadisabilityservice: 1
                          vadisabilityserviceamount: 15
                          workerscomp: 0
                          workerscompamount: 15
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for incomeandsource history.  Returns a list of incomeandsource ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-incomeandsources-incomeandsourceid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: incomeandsourceid
        in: path
        required: true
        schema:
          type: string
        description: Incomeandsource Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/lastgradecompleteds':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "lastgradecompletedList"
                    ],
                    "properties": {
                      "lastgradecompletedList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "lastgradecompletedList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "lastgradecompletedList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "lastgradecompletedId",
                                "lastgradecompleted"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "lastgradecompletedId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "lastgradecompleted": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    lastgradecompletedList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      lastgradecompletedList:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/lastgradecompleteds/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          lastgradecompletedId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          lastgradecompleted: 1458186668375
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for lastgradecompleted.  Returns a list of lastgradecompleted
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-lastgradecompleteds
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "lastgradecompleted"
                    ],
                    "properties": {
                      "lastgradecompleted": {
                        "type": "object",
                        "required": [
                          "lastgradecompletedId"
                        ],
                        "properties": {
                          "lastgradecompletedId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  lastgradecompleted:
                    lastgradecompletedId: 90d02def-0df7-4d9f-ad54-21f57e9d6e25
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a lastgradecompleted
      operationId: POST_clients-clientid-enrollments-enrollmentid-lastgradecompleteds
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "lastgradecompleted"
                  ],
                  "properties": {
                    "lastgradecompleted": {
                      "type": "object",
                      "required": [
                        "lastgradecompleted"
                      ],
                      "properties": {
                        "lastgradecompleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  lastgradecompleted:
                    lastgradecompleted: 6
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/lastgradecompleteds/{lastgradecompletedid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "lastgradecompleted"
                    ],
                    "properties": {
                      "lastgradecompleted": {
                        "type": "object",
                        "required": [
                          "links",
                          "lastgradecompletedId",
                          "lastgradecompleted"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "lastgradecompletedId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "lastgradecompleted": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    lastgradecompleted:
                      links:
                      - rel: history
                        href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/lastgradecompleteds/90d02def-0df7-4d9f-ad54-21f57e9d6e25/history"
                      lastgradecompletedId: 90d02def-0df7-4d9f-ad54-21f57e9d6e25
                      lastgradecompleted: 6
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a lastgradecompleted using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-lastgradecompleteds-lastgradecompletedid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific lastgradecompleted specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-lastgradecompleteds-lastgradecompletedid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "lastgradecompleted"
                  ],
                  "properties": {
                    "lastgradecompleted": {
                      "type": "object",
                      "required": [
                        "lastgradecompleted"
                      ],
                      "properties": {
                        "lastgradecompleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  lastgradecompleted:
                    lastgradecompleted: 6
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific lastgradecompleted specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-lastgradecompleteds-lastgradecompletedid
    parameters:
      - name: lastgradecompletedid
        in: path
        required: true
        schema:
          type: string
        description: Lastgradecompleted Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/lastgradecompleteds/{lastgradecompletedid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "lastgradecompletedList"
                    ],
                    "properties": {
                      "lastgradecompletedList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "lastgradecompletedList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "lastgradecompletedList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "lastgradecompletedId",
                                "lastgradecompleted"
                              ],
                              "properties": {
                                "lastgradecompletedId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "lastgradecompleted": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    lastgradecompletedList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      lastgradecompletedList:
                        - lastgradecompletedId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          lastgradecompleted: 1458186668375
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for lastgradecompleted history.  Returns a list of lastgradecompleted
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-lastgradecompleteds-lastgradecompletedid-history
    parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response
          schema:
            type: string
        - name: lastgradecompletedid
          in: path
          required: true
          schema:
            type: string
          description: Lastgradecompleted Identifier
        - name: enrollmentid
          in: path
          required: true
          schema:
            type: string
          description: Enrollment Identifier
        - name: clientid
          in: path
          required: true
          schema:
            type: string
          description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/lastpermanentaddresses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "LastPermanentAddresses"
                    ],
                    "properties": {
                      "LastPermanentAddresses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "lastPermanentAddresses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "lastPermanentAddresses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "lastPermanentAddressId",
                                "addressdataquality",
                                "lastpermanentcity",
                                "lastpermanentstate",
                                "lastpermanentstreet",
                                "lastpermanentzip"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "lastPermanentAddressId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "addressdataquality": {
                                  "type": "integer"
                                },
                                "lastpermanentcity": {
                                  "type": "string",
                                },
                                "lastpermanentstate": {
                                  "type": "integer"
                                },
                                "lastpermanentstreet": {
                                  "type": "string",
                                },
                                "lastpermanentzip": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    LastPermanentAddresses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 0
                        maximum: 30
                        sort: {}
                      lastPermanentAddresses:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/lastpermanentaddresses/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          lastPermanentAddressId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          addressdataquality: 1
                          lastpermanentcity: test
                          lastpermanentstate: 2
                          lastpermanentstreet: street
                          lastpermanentzip: '53324'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for lastpermanentaddress.  Returns a list of
        lastpermanentaddress ids, based on the query parameters sent.  The query
        parameters are cumulative, so each additional query parameter narrows
        the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-lastpermanentaddresses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "lastPermanentAddress"
                    ],
                    "properties": {
                      "lastPermanentAddress": {
                        "type": "object",
                        "required": [
                          "lastPermanentAddressId"
                        ],
                        "properties": {
                          "lastPermanentAddressId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  lastPermanentAddress:
                    lastPermanentAddressId: 90d02def-0df7-4d9f-ad54-21f57e9d6e
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a lastpermanentaddress
      operationId: POST_clients-clientid-enrollments-enrollmentid-lastpermanentaddresses
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "lastPermanentAddress"
                  ],
                  "properties": {
                    "lastPermanentAddress": {
                      "type": "object",
                      "required": [
                        "addressdataquality",
                        "lastpermanentcity",
                        "lastpermanentstate",
                        "lastpermanentstreet",
                        "lastpermanentzip"
                      ],
                      "properties": {
                        "addressdataquality": {
                          "type": "integer"
                        },
                        "lastpermanentcity": {
                          "type": "string",
                        },
                        "lastpermanentstate": {
                          "type": "string",
                        },
                        "lastpermanentstreet": {
                          "type": "string",
                        },
                        "lastpermanentzip": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  lastPermanentAddress:
                    addressdataquality: 1
                    lastpermanentcity: Douglas
                    lastpermanentstate: GA
                    lastpermanentstreet: 1008 Fairwood ln
                    lastpermanentzip: '30105'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/lastpermanentaddresses/{lastpermanentaddressid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "lastPermanentAddress"
                    ],
                    "properties": {
                      "lastPermanentAddress": {
                        "type": "object",
                        "required": [
                          "links",
                          "lastPermanentAddressId",
                          "addressdataquality",
                          "lastpermanentcity",
                          "lastpermanentstate",
                          "lastpermanentstreet",
                          "lastpermanentzip"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "lastPermanentAddressId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "addressdataquality": {
                            "type": "integer"
                          },
                          "lastpermanentcity": {
                            "type": "string",
                          },
                          "lastpermanentstate": {
                            "type": "string",
                          },
                          "lastpermanentstreet": {
                            "type": "string",
                          },
                          "lastpermanentzip": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    lastPermanentAddress:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/lastpermanentaddresses/90d02def-0df7-4d9f-ad54-21f57e9d6e25/history"
                        lastPermanentAddressId: 90d02def-0df7-4d9f-ad54-21f57e9d6e25
                        addressdataquality: 1
                        lastpermanentcity: Douglas
                        lastpermanentstate: GA
                        lastpermanentstreet: 1008 Fairwood ln
                        lastpermanentzip: '30105'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a lastpermanentaddress using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-lastpermanentaddresses-lastpermanentaddressid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific lastpermanentaddress specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-lastpermanentaddresses-lastpermanentaddressid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "lastPermanentAddress"
                  ],
                  "properties": {
                    "lastPermanentAddress": {
                      "type": "object",
                      "required": [
                        "addressdataquality",
                        "lastpermanentcity",
                        "lastpermanentstate",
                        "lastpermanentstreet",
                        "lastpermanentzip"
                      ],
                      "properties": {
                        "addressdataquality": {
                          "type": "integer"
                        },
                        "lastpermanentcity": {
                          "type": "string",
                        },
                        "lastpermanentstate": {
                          "type": "string",
                        },
                        "lastpermanentstreet": {
                          "type": "string",
                        },
                        "lastpermanentzip": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  lastPermanentAddress:
                    addressdataquality: 1
                    lastpermanentcity: Douglas
                    lastpermanentstate: GA
                    lastpermanentstreet: 1008 Fairwood ln
                    lastpermanentzip: '30105'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific lastpermanentaddress specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-lastpermanentaddresses-lastpermanentaddressid
    parameters:
      - name: lastpermanentaddressid
        in: path
        required: true
        schema:
          type: string
        description: Lastpermanentaddress Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/lastpermanentaddresses/{lastpermanentaddressid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "LastPermanentAddresses"
                    ],
                    "properties": {
                      "LastPermanentAddresses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "lastPermanentAddresses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "lastPermanentAddresses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "lastPermanentAddressId",
                                "addressdataquality",
                                "lastpermanentcity",
                                "lastpermanentstate",
                                "lastpermanentstreet",
                                "lastpermanentzip"
                              ],
                              "properties": {
                                "lastPermanentAddressId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "addressdataquality": {
                                  "type": "integer"
                                },
                                "lastpermanentcity": {
                                  "type": "string",
                                },
                                "lastpermanentstate": {
                                  "type": "integer"
                                },
                                "lastpermanentstreet": {
                                  "type": "string",
                                },
                                "lastpermanentzip": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    LastPermanentAddresses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 0
                        maximum: 30
                        sort: {}
                      lastPermanentAddresses:
                        - lastPermanentAddressId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          addressdataquality: 1
                          lastpermanentcity: test
                          lastpermanentstate: 2
                          lastpermanentstreet: street
                          lastpermanentzip: '53324'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for lastpermanentaddress history.  Returns a list of
        lastpermanentaddress ids history, based on the query parameters sent.  The query
        parameters are cumulative, so each additional query parameter narrows
        the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-lastpermanentaddresses-lastpermanentaddressid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: lastpermanentaddressid
        in: path
        required: true
        schema:
          type: string
        description: Lastpermanentaddress Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/medicalassistances':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "medicalassistances"
                    ],
                    "properties": {
                      "medicalassistances": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "medicalassistances"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "medicalassistances": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "medicalassistanceId",
                                "adap",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "medicalassistanceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "adap": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    medicalassistances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      medicalassistances:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/medicalassistances/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          medicalassistanceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          adap: 0
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for medicalassistance.  Returns a list of medicalassistance
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-medicalassistances
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "medicalassistance"
                    ],
                    "properties": {
                      "medicalassistance": {
                        "type": "object",
                        "required": [
                          "medicalassistanceId"
                        ],
                        "properties": {
                          "medicalassistanceId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  medicalassistance:
                    medicalassistanceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a medicalassistance
      operationId: POST_clients-clientid-enrollments-enrollmentid-medicalassistances
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "medicalassistance"
                  ],
                  "properties": {
                    "medicalassistance": {
                      "type": "object",
                      "required": [
                        "adap",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "adap": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  medicalassistance:
                    adap: 0
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/medicalassistances/{medicalassistanceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "medicalassistance"
                    ],
                    "properties": {
                      "medicalassistance": {
                        "type": "object",
                        "required": [
                          "links",
                          "medicalassistanceId",
                          "adap",
                          "informationDate",
                          "dataCollectionStage"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "medicalassistanceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "adap": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    medicalassistance:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/medicalassistances/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        medicalassistanceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        adap: 0
                        informationDate: 03-17-2016
                        dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a medicalassistance using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-medicalassistances-medicalassistanceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific medicalassistance specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-medicalassistances-medicalassistanceid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "medicalassistance"
                  ],
                  "properties": {
                    "medicalassistance": {
                      "type": "object",
                      "required": [
                        "adap",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "adap": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  medicalassistance:
                    adap: 0
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific medicalassistance specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-medicalassistances-medicalassistanceid
    parameters:
      - name: medicalassistanceid
        in: path
        required: true
        schema:
          type: string
        description: Medicalassistance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/medicalassistances/{medicalassistanceid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "medicalassistances"
                    ],
                    "properties": {
                      "medicalassistances": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "medicalassistances"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "medicalassistances": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "medicalassistanceId",
                                "adap",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "medicalassistanceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "adap": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    medicalassistances:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      medicalassistances:
                        - medicalassistanceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          adap: 0
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for medicalassistance history.  Returns a list of medicalassistance
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-medicalassistances-medicalassistanceid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: medicalassistanceid
        in: path
        required: true
        schema:
          type: string
        description: Medicalassistance Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "nonCashBenefits"
                    ],
                    "properties": {
                      "nonCashBenefits": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "nonCashBenefits"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "nonCashBenefits": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "nonCashBenefitId",
                                "othersource",
                                "othersourceidentify",
                                "othertanf",
                                "rentalassistanceongoing",
                                "rentalassistancetemp",
                                "snap",
                                "tanfchildcare",
                                "tanftransportation",
                                "wic",
                                "benefitsfromanysource",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "nonCashBenefitId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "othersource": {
                                  "type": "integer"
                                },
                                "othersourceidentify": {
                                  "type": "string",
                                },
                                "othertanf": {
                                  "type": "integer"
                                },
                                "rentalassistanceongoing": {
                                  "type": "integer"
                                },
                                "rentalassistancetemp": {
                                  "type": "integer"
                                },
                                "snap": {
                                  "type": "integer"
                                },
                                "tanfchildcare": {
                                  "type": "integer"
                                },
                                "tanftransportation": {
                                  "type": "integer"
                                },
                                "wic": {
                                  "type": "integer"
                                },
                                "benefitsfromanysource": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    nonCashBenefits:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      nonCashBenefits:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/noncashbenefits/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          nonCashBenefitId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          othersource: 99
                          othersourceidentify: test
                          othertanf: 1
                          rentalassistanceongoing: 99
                          rentalassistancetemp: 99
                          snap: 0
                          tanfchildcare: 99
                          tanftransportation: 99
                          wic: 1
                          benefitsfromanysource: 0
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for noncashbenefit.  Returns a list of noncashbenefit ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-noncashbenefits
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "nonCashBenefit"
                    ],
                    "properties": {
                      "nonCashBenefit": {
                        "type": "object",
                        "required": [
                          "nonCashBenefitId"
                        ],
                        "properties": {
                          "nonCashBenefitId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  nonCashBenefit:
                    nonCashBenefitId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a noncashbenefit
      operationId: POST_clients-clientid-enrollments-enrollmentid-noncashbenefits
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "nonCashBenefit"
                  ],
                  "properties": {
                    "nonCashBenefit": {
                      "type": "object",
                      "required": [
                        "othersource",
                        "othersourceidentify",
                        "othertanf",
                        "rentalassistanceongoing",
                        "rentalassistancetemp",
                        "snap",
                        "tanfchildcare",
                        "tanftransportation",
                        "wic",
                        "benefitsfromanysource",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "othersource": {
                          "type": "integer"
                        },
                        "othersourceidentify": {
                          "type": "string",
                        },
                        "othertanf": {
                          "type": "integer"
                        },
                        "rentalassistanceongoing": {
                          "type": "integer"
                        },
                        "rentalassistancetemp": {
                          "type": "integer"
                        },
                        "snap": {
                          "type": "integer"
                        },
                        "tanfchildcare": {
                          "type": "integer"
                        },
                        "tanftransportation": {
                          "type": "integer"
                        },
                        "wic": {
                          "type": "integer"
                        },
                        "benefitsfromanysource": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  nonCashBenefit:
                    othersource: 99
                    othersourceidentify: test
                    othertanf: 1
                    rentalassistanceongoing: 99
                    rentalassistancetemp: 99
                    snap: 0
                    tanfchildcare: 99
                    tanftransportation: 99
                    wic: 1
                    benefitsfromanysource: 0
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits/{noncashbenefitid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "nonCashBenefit"
                    ],
                    "properties": {
                      "nonCashBenefit": {
                        "type": "object",
                        "required": [
                          "links",
                          "nonCashBenefitId",
                          "othersource",
                          "othersourceidentify",
                          "othertanf",
                          "rentalassistanceongoing",
                          "rentalassistancetemp",
                          "snap",
                          "tanfchildcare",
                          "tanftransportation",
                          "wic",
                          "benefitsfromanysource",
                          "informationDate",
                          "dataCollectionStage"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "nonCashBenefitId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "othersource": {
                            "type": "integer"
                          },
                          "othersourceidentify": {
                            "type": "string",
                          },
                          "othertanf": {
                            "type": "integer"
                          },
                          "rentalassistanceongoing": {
                            "type": "integer"
                          },
                          "rentalassistancetemp": {
                            "type": "integer"
                          },
                          "snap": {
                            "type": "integer"
                          },
                          "tanfchildcare": {
                            "type": "integer"
                          },
                          "tanftransportation": {
                            "type": "integer"
                          },
                          "wic": {
                            "type": "integer"
                          },
                          "benefitsfromanysource": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    nonCashBenefit:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/noncashbenefits/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        nonCashBenefitId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        othersource: 99
                        othersourceidentify: test
                        othertanf: 1
                        rentalassistanceongoing: 99
                        rentalassistancetemp: 99
                        snap: 0
                        tanfchildcare: 99
                        tanftransportation: 99
                        wic: 1
                        benefitsfromanysource: 0
                        informationDate: 03-17-2016
                        dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a noncashbenefit using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-noncashbenefits-noncashbenefitid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific noncashbenefit specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-noncashbenefits-noncashbenefitid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "nonCashBenefit"
                  ],
                  "properties": {
                    "nonCashBenefit": {
                      "type": "object",
                      "required": [
                        "othersource",
                        "othersourceidentify",
                        "othertanf",
                        "rentalassistanceongoing",
                        "rentalassistancetemp",
                        "snap",
                        "tanfchildcare",
                        "tanftransportation",
                        "wic",
                        "benefitsfromanysource",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "othersource": {
                          "type": "integer"
                        },
                        "othersourceidentify": {
                          "type": "string",
                        },
                        "othertanf": {
                          "type": "integer"
                        },
                        "rentalassistanceongoing": {
                          "type": "integer"
                        },
                        "rentalassistancetemp": {
                          "type": "integer"
                        },
                        "snap": {
                          "type": "integer"
                        },
                        "tanfchildcare": {
                          "type": "integer"
                        },
                        "tanftransportation": {
                          "type": "integer"
                        },
                        "wic": {
                          "type": "integer"
                        },
                        "benefitsfromanysource": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  nonCashBenefit:
                    othersource: 99
                    othersourceidentify: test
                    othertanf: 1
                    rentalassistanceongoing: 99
                    rentalassistancetemp: 99
                    snap: 0
                    tanfchildcare: 99
                    tanftransportation: 99
                    wic: 1
                    benefitsfromanysource: 0
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific noncashbenefit specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-noncashbenefits-noncashbenefitid
    parameters:
      - name: noncashbenefitid
        in: path
        required: true
        schema:
          type: string
        description: Noncashbenefit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/noncashbenefits/{noncashbenefitid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "nonCashBenefits"
                    ],
                    "properties": {
                      "nonCashBenefits": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "nonCashBenefits"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "nonCashBenefits": {
                            "type": "object",
                            "required": [
                              "nonCashBenefitId",
                              "othersource",
                              "othersourceidentify",
                              "othertanf",
                              "rentalassistanceongoing",
                              "rentalassistancetemp",
                              "snap",
                              "tanfchildcare",
                              "tanftransportation",
                              "wic",
                              "benefitsfromanysource",
                              "informationDate",
                              "dataCollectionStage"
                            ],
                            "properties": {
                              "nonCashBenefitId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "othersource": {
                                "type": "integer"
                              },
                              "othersourceidentify": {
                                "type": "string",
                              },
                              "othertanf": {
                                "type": "integer"
                              },
                              "rentalassistanceongoing": {
                                "type": "integer"
                              },
                              "rentalassistancetemp": {
                                "type": "integer"
                              },
                              "snap": {
                                "type": "integer"
                              },
                              "tanfchildcare": {
                                "type": "integer"
                              },
                              "tanftransportation": {
                                "type": "integer"
                              },
                              "wic": {
                                "type": "integer"
                              },
                              "benefitsfromanysource": {
                                "type": "integer"
                              },
                              "informationDate": {
                                "type": "string",
                                "format": "mm-dd-yyyy",
                              },
                              "dataCollectionStage": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    nonCashBenefits:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      nonCashBenefits:
                          nonCashBenefitId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          othersource: 99
                          othersourceidentify: test
                          othertanf: 1
                          rentalassistanceongoing: 99
                          rentalassistancetemp: 99
                          snap: 0
                          tanfchildcare: 99
                          tanftransportation: 99
                          wic: 1
                          benefitsfromanysource: 0
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for noncashbenefit history.  Returns a list of noncashbenefit ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-noncashbenefits-noncashbenefitid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: noncashbenefitid
        in: path
        required: true
        schema:
          type: string
        description: Noncashbenefit Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/referralsources':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "referralsources"
                    ],
                    "properties": {
                      "referralsources": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "referralsources"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "referralsources": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "referralsourceId",
                                "countoutreachreferralapproaches",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "referralsourceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "countoutreachreferralapproaches": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    referralsources:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      referralsources:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/referralsources/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          referralsourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          countoutreachreferralapproaches: 1
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for referralsource.  Returns a list of referralsource ids,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-referralsources
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "referralsource"
                    ],
                    "properties": {
                      "referralsource": {
                        "type": "object",
                        "required": [
                          "referralsourceId"
                        ],
                        "properties": {
                          "referralsourceId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  referralsource:
                    referralsourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a referralsource
      operationId: POST_clients-clientid-enrollments-enrollmentid-referralsources
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "referralsource"
                  ],
                  "properties": {
                    "referralsource": {
                      "type": "object",
                      "required": [
                        "countoutreachreferralapproaches",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "countoutreachreferralapproaches": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  referralsource:
                    countoutreachreferralapproaches: 1
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/referralsources/{referralsourceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "referralsource"
                    ],
                    "properties": {
                      "referralsource": {
                        "type": "object",
                        "required": [
                          "links",
                          "referralsourceId",
                          "countoutreachreferralapproaches",
                          "informationDate",
                          "dataCollectionStage"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "referralsourceId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "countoutreachreferralapproaches": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    referralsource:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/referralsources/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        referralsourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        countoutreachreferralapproaches: 1
                        informationDate: 03-17-2016
                        dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a referralsource using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-referralsources-referralsourceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific referralsource specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-referralsources-referralsourceid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "referralsource"
                  ],
                  "properties": {
                    "referralsource": {
                      "type": "object",
                      "required": [
                        "countoutreachreferralapproaches",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "countoutreachreferralapproaches": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  referralsource:
                    countoutreachreferralapproaches: 1
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific referralsource specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-referralsources-referralsourceid
    parameters:
      - name: referralsourceid
        in: path
        required: true
        schema:
          type: string
        description: Referralsource Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/referralsources/{referralsourceid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "referralsources"
                    ],
                    "properties": {
                      "referralsources": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "referralsources"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "referralsources": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "referralsourceId",
                                "countoutreachreferralapproaches",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "referralsourceId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "countoutreachreferralapproaches": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    referralsources:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      referralsources:
                        - referralsourceId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          countoutreachreferralapproaches: 1
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for referralsource history.  Returns a list of referralsource ids history,
        based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-referralsources-referralsourceid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: referralsourceid
        in: path
        required: true
        schema:
          type: string
        description: Referralsource Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveins':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "residentialmoveins"
                    ],
                    "properties": {
                      "residentialmoveins": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "residentialmoveins"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "residentialmoveins": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "residentialmoveinId",
                                "inpermanenthousing"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "residentialmoveinId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "inpermanenthousing": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    residentialmoveins:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      residentialmoveins:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/residentialmoveins/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          residentialmoveinId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          inpermanenthousing: 99
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for residentialmovein.  Returns a list of residentialmovein
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-residentialmoveins
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "residentialmovein"
                    ],
                    "properties": {
                      "residentialmovein": {
                        "type": "object",
                        "required": [
                          "residentialmoveinId"
                        ],
                        "properties": {
                          "residentialmoveinId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  residentialmovein:
                    residentialmoveinId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a residentialmovein
      operationId: POST_clients-clientid-enrollments-enrollmentid-residentialmoveins
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "residentialmovein"
                  ],
                  "properties": {
                    "residentialmovein": {
                      "type": "object",
                      "required": [
                        "residentialmoveinId",
                        "inpermanenthousing"
                      ],
                      "properties": {
                        "residentialmoveinId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "inpermanenthousing": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  residentialmovein:
                    residentialmoveinId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                    inpermanenthousing: 99
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveins/{residentialmoveinid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "residentialmovein"
                    ],
                    "properties": {
                      "residentialmovein": {
                        "type": "object",
                        "required": [
                          "links",
                          "residentialmoveinId",
                          "inpermanenthousing"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "residentialmoveinId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "inpermanenthousing": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    residentialmovein:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/residentialmoveins/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        residentialmoveinId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        inpermanenthousing: 99
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a residentialmovein using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-residentialmoveins-residentialmoveinid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific residentialmovein specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-residentialmoveins-residentialmoveinid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "residentialmovein"
                  ],
                  "properties": {
                    "residentialmovein": {
                      "type": "object",
                      "required": [
                        "inpermanenthousing"
                      ],
                      "properties": {
                        "inpermanenthousing": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  residentialmovein:
                    inpermanenthousing: 99
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific residentialmovein specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-residentialmoveins-residentialmoveinid
    parameters:
      - name: residentialmoveinid
        in: path
        required: true
        schema:
          type: string
        description: Residentialmovein Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/residentialmoveins/{residentialmoveinid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "residentialmoveins"
                    ],
                    "properties": {
                      "residentialmoveins": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "residentialmoveins"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "residentialmoveins": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "residentialmoveinId",
                                "inpermanenthousing"
                              ],
                              "properties": {
                                "residentialmoveinId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "inpermanenthousing": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    residentialmoveins:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      residentialmoveins:
                        - residentialmoveinId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          inpermanenthousing: 99
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for residentialmovein history.  Returns a list of residentialmovein
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-residentialmoveins-residentialmoveinid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: residentialmoveinid
        in: path
        required: true
        schema:
          type: string
        description: Residentialmovein Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/rhybcpstatuses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "rhybcpstatuses"
                    ],
                    "properties": {
                      "rhybcpstatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "rhybcpstatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "rhybcpstatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "rhybcpstatusId",
                                "statusDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "rhybcpstatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "statusDate": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    rhybcpstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      rhybcpstatuses:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/rhybcpstatuses/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          rhybcpstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          statusDate: '2016-03-17T09:21:08.375'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for rhybcpstatus.  Returns a list of rhybcpstatus ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-rhybcpstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "rhybcpstatus"
                    ],
                    "properties": {
                      "rhybcpstatus": {
                        "type": "object",
                        "required": [
                          "rhybcpstatusId"
                        ],
                        "properties": {
                          "rhybcpstatusId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  rhybcpstatus:
                    rhybcpstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a rhybcpstatus
      operationId: POST_clients-clientid-enrollments-enrollmentid-rhybcpstatuses
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "rhybcpstatus"
                  ],
                  "properties": {
                    "rhybcpstatus": {
                      "type": "object",
                      "required": [
                        "statusDate"
                      ],
                      "properties": {
                        "statusDate": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  rhybcpstatus:
                    statusDate: '2016-03-17T09:21:08.375'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/rhybcpstatuses/{rhybcpstatusid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "rhybcpstatus"
                    ],
                    "properties": {
                      "rhybcpstatus": {
                        "type": "object",
                        "required": [
                          "links",
                          "rhybcpstatusId",
                          "statusDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "rhybcpstatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "statusDate": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    rhybcpstatus:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/rhybcpstatuses/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        rhybcpstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        statusDate: '2016-03-17T09:21:08.375'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a rhybcpstatus using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-rhybcpstatuses-rhybcpstatusid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific rhybcpstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-rhybcpstatuses-rhybcpstatusid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "rhybcpstatus"
                  ],
                  "properties": {
                    "rhybcpstatus": {
                      "type": "object",
                      "required": [
                        "statusDate"
                      ],
                      "properties": {
                        "statusDate": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  rhybcpstatus:
                    statusDate: '2016-03-17T09:21:08.375'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific rhybcpstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-rhybcpstatuses-rhybcpstatusid
    parameters:
      - name: rhybcpstatusid
        in: path
        required: true
        schema:
          type: string
        description: Rhybcpstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/rhybcpstatuses/{rhybcpstatusid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "rhybcpstatuses"
                    ],
                    "properties": {
                      "rhybcpstatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "rhybcpstatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "rhybcpstatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rhybcpstatusId",
                                "statusDate"
                              ],
                              "properties": {
                                "rhybcpstatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "statusDate": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    rhybcpstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      rhybcpstatuses:
                        - rhybcpstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          statusDate: '2016-03-17T09:21:08.375'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for rhybcpstatus history.  Returns a list of rhybcpstatus ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-rhybcpstatuses-rhybcpstatusid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: rhybcpstatusid
        in: path
        required: true
        schema:
          type: string
        description: Rhybcpstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "pathstatuses"
                    ],
                    "properties": {
                      "pathstatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "pathstatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "pathstatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "pathstatusId",
                                "clientenrolledinpath"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "pathstatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientenrolledinpath": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    pathstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      pathstatuses:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/pathstatuses/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          pathstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          clientenrolledinpath: 122355
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for pathstatus.  Returns a list of pathstatus ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-pathstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "pathstatus"
                    ],
                    "properties": {
                      "pathstatus": {
                        "type": "object",
                        "required": [
                          "pathstatusId"
                        ],
                        "properties": {
                          "pathstatusId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  pathstatus:
                    pathstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a pathstatus
      operationId: POST_clients-clientid-enrollments-enrollmentid-pathstatuses
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "pathstatus"
                  ],
                  "properties": {
                    "pathstatus": {
                      "type": "object",
                      "required": [
                        "clientenrolledinpath"
                      ],
                      "properties": {
                        "clientenrolledinpath": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  pathstatus:
                    clientenrolledinpath: 122355
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses/{pathstatusid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "pathstatus"
                    ],
                    "properties": {
                      "pathstatus": {
                        "type": "object",
                        "required": [
                          "links",
                          "pathstatusId",
                          "clientenrolledinpath"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "pathstatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "clientenrolledinpath": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    pathstatus:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/pathstatuses/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        pathstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        clientenrolledinpath: 122355
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a pathstatus using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-pathstatuses-pathstatusid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific pathstatus specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-pathstatuses-pathstatusid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "pathstatus"
                  ],
                  "properties": {
                    "pathstatus": {
                      "type": "object",
                      "required": [
                        "clientenrolledinpath"
                      ],
                      "properties": {
                        "clientenrolledinpath": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  pathstatus:
                    clientenrolledinpath: 122355
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific pathstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-pathstatuses-pathstatusid
    parameters:
      - name: pathstatusid
        in: path
        required: true
        schema:
          type: string
        description: Pathstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/pathstatuses/{pathstatusid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "pathstatuses"
                    ],
                    "properties": {
                      "pathstatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "pathstatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "pathstatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "pathstatusId",
                                "clientenrolledinpath"
                              ],
                              "properties": {
                                "pathstatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "clientenrolledinpath": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    pathstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      pathstatuses:
                        - pathstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          clientenrolledinpath: 122355
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for pathstatus history.  Returns a list of pathstatus ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-pathstatuses-pathstatusid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: pathstatusid
        in: path
        required: true
        schema:
          type: string
        description: Pathstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/percentamis':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "percentamis"
                    ],
                    "properties": {
                      "percentamis": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "percentamis"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "percentamis": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "percentamiId",
                                "percentage"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "percentamiId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "percentage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    percentamis:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      percentamis:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/percentamis/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          percentamiId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          percentage: 12
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for percentami.  Returns a list of percentami ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-percentamis
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "percentami"
                    ],
                    "properties": {
                      "percentami": {
                        "type": "object",
                        "required": [
                          "percentamiId"
                        ],
                        "properties": {
                          "percentamiId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  percentami:
                    percentamiId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a percentami
      operationId: POST_clients-clientid-enrollments-enrollmentid-percentamis
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "percentami"
                  ],
                  "properties": {
                    "percentami": {
                      "type": "object",
                      "required": [
                        "percentage"
                      ],
                      "properties": {
                        "percentage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  percentami:
                    percentage: 12
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/percentamis/{percentamiid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "percentami"
                    ],
                    "properties": {
                      "percentami": {
                        "type": "object",
                        "required": [
                          "links",
                          "percentamiId",
                          "percentage"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "percentamiId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "percentage": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    percentami:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/percentamis/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        percentamiId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        percentage: 12
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a percentami using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-percentamis-percentamiid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific percentami specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-percentamis-percentamiid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "percentami"
                  ],
                  "properties": {
                    "percentami": {
                      "type": "object",
                      "required": [
                        "percentage"
                      ],
                      "properties": {
                        "percentage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  percentami:
                    percentage: 12
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific percentami specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-percentamis-percentamiid
    parameters:
      - name: percentamiid
        in: path
        required: true
        schema:
          type: string
        description: Percentami Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/percentamis/{percentamiid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "percentamis"
                    ],
                    "properties": {
                      "percentamis": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "percentamis"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "percentamis": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "percentamiId",
                                "percentage"
                              ],
                              "properties": {
                                "percentamiId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "percentage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    percentamis:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      percentamis:
                        - percentamiId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          percentage: 12
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for percentami history.  Returns a list of percentami ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-percentamis-percentamiid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: percentamiid
        in: path
        required: true
        schema:
          type: string
        description: Percentami Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/schoolstatuses':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "schoolstatuses"
                    ],
                    "properties": {
                      "schoolstatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "schoolstatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "schoolstatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "schoolstatusId",
                                "informationDate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "schoolstatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "informationDate": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    schoolstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      schoolstatuses:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/schoolstatuses/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          schoolstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          informationDate: '2016-03-17T09:21:08.375'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for schoolstatus.  Returns a list of schoolstatus ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-schoolstatuses
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "schoolstatus"
                    ],
                    "properties": {
                      "schoolstatus": {
                        "type": "object",
                        "required": [
                          "schoolstatusId"
                        ],
                        "properties": {
                          "schoolstatusId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  schoolstatus:
                    schoolstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a schoolstatus
      operationId: POST_clients-clientid-enrollments-enrollmentid-schoolstatuses
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "schoolstatus"
                  ],
                  "properties": {
                    "schoolstatus": {
                      "type": "object",
                      "required": [
                        "informationDate"
                      ],
                      "properties": {
                        "informationDate": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  schoolstatus:
                    informationDate: '2016-03-17T09:21:08.375'
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/schoolstatuses/{schoolstatusid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "schoolstatus"
                    ],
                    "properties": {
                      "schoolstatus": {
                        "type": "object",
                        "required": [
                          "links",
                          "schoolstatusId",
                          "informationDate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "schoolstatusId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "informationDate": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    schoolstatus:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/schoolstatuses/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        schoolstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        informationDate: '2016-03-17T09:21:08.375'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a schoolstatus using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-schoolstatuses-schoolstatusid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific schoolstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-schoolstatuses-schoolstatusid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "schoolstatus"
                  ],
                  "properties": {
                    "schoolstatus": {
                      "type": "object",
                      "required": [
                        "informationDate"
                      ],
                      "properties": {
                        "informationDate": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  schoolstatus:
                    informationDate: '2016-03-17T09:21:08.375'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific schoolstatus specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-schoolstatuses-schoolstatusid
    parameters:
      - name: schoolstatusid
        in: path
        required: true
        schema:
          type: string
        description: Schoolstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/schoolstatuses/{schoolstatusid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "schoolstatuses"
                    ],
                    "properties": {
                      "schoolstatuses": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "schoolstatuses"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "schoolstatuses": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "schoolstatusId",
                                "informationDate"
                              ],
                              "properties": {
                                "schoolstatusId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "informationDate": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    schoolstatuses:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      schoolstatuses:
                        - schoolstatusId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          informationDate: '2016-03-17T09:21:08.375'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for schoolstatus history.  Returns a list of schoolstatus ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-schoolstatuses-schoolstatusid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: schoolstatusid
        in: path
        required: true
        schema:
          type: string
        description: Schoolstatus Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/services':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "servicesList"
                    ],
                    "properties": {
                      "servicesList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "servicesList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "servicesList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "servicesId",
                                "dateprovided",
                                "faamount",
                                "recordtype",
                                "referraloutcome",
                                "subtypeprovided",
                                "typeprovided"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "servicesId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateprovided": {
                                  "type": "integer"
                                },
                                "faamount": {
                                  "type": "integer"
                                },
                                "recordtype": {
                                  "type": "integer"
                                },
                                "referraloutcome": {
                                  "type": "integer"
                                },
                                "subtypeprovided": {
                                  "type": "integer"
                                },
                                "typeprovided": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    servicesList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      servicesList:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/services/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          servicesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          dateprovided: 1458186668375
                          faamount: 15
                          recordtype: 15
                          referraloutcome: 3
                          subtypeprovided: 11
                          typeprovided: 10
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for service.  Returns a list of service ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-services
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "services"
                    ],
                    "properties": {
                      "services": {
                        "type": "object",
                        "required": [
                          "servicesId"
                        ],
                        "properties": {
                          "servicesId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  services:
                    servicesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a service
      operationId: POST_clients-clientid-enrollments-enrollmentid-services
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "services"
                  ],
                  "properties": {
                    "services": {
                      "type": "object",
                      "required": [
                        "dateprovided",
                        "faamount",
                        "recordtype",
                        "referraloutcome",
                        "subtypeprovided",
                        "typeprovided"
                      ],
                      "properties": {
                        "dateprovided": {
                          "type": "integer"
                        },
                        "faamount": {
                          "type": "integer"
                        },
                        "recordtype": {
                          "type": "integer"
                        },
                        "referraloutcome": {
                          "type": "integer"
                        },
                        "subtypeprovided": {
                          "type": "integer"
                        },
                        "typeprovided": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  services:
                    dateprovided: 1458186668375
                    faamount: 15
                    recordtype: 15
                    referraloutcome: 3
                    subtypeprovided: 11
                    typeprovided: 10
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/services/{serviceid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "services"
                    ],
                    "properties": {
                      "services": {
                        "type": "object",
                        "required": [
                          "links",
                          "servicesId",
                          "dateprovided",
                          "faamount",
                          "recordtype",
                          "referraloutcome",
                          "subtypeprovided",
                          "typeprovided"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "servicesId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "dateprovided": {
                            "type": "integer"
                          },
                          "faamount": {
                            "type": "integer"
                          },
                          "recordtype": {
                            "type": "integer"
                          },
                          "referraloutcome": {
                            "type": "integer"
                          },
                          "subtypeprovided": {
                            "type": "integer"
                          },
                          "typeprovided": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    services:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/services/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        servicesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        dateprovided: 1458186668375
                        faamount: 15
                        recordtype: 15
                        referraloutcome: 3
                        subtypeprovided: 11
                        typeprovided: 10
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a service using a URI resource parameter/ID.
      operationId: GET_clients-clientid-enrollments-enrollmentid-services-serviceid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific service specified by the URI resource parameter/ID.
      operationId: PUT_clients-clientid-enrollments-enrollmentid-services-serviceid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "services"
                  ],
                  "properties": {
                    "services": {
                      "type": "object",
                      "required": [
                        "dateprovided",
                        "faamount",
                        "recordtype",
                        "referraloutcome",
                        "subtypeprovided",
                        "typeprovided"
                      ],
                      "properties": {
                        "dateprovided": {
                          "type": "integer"
                        },
                        "faamount": {
                          "type": "integer"
                        },
                        "recordtype": {
                          "type": "integer"
                        },
                        "referraloutcome": {
                          "type": "integer"
                        },
                        "subtypeprovided": {
                          "type": "integer"
                        },
                        "typeprovided": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  services:
                    dateprovided: 1458186668375
                    faamount: 15
                    recordtype: 15
                    referraloutcome: 3
                    subtypeprovided: 11
                    typeprovided: 10
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific service specified by the URI resource parameter/ID.
      operationId: DELETE_clients-clientid-enrollments-enrollmentid-services-serviceid
    parameters:
      - name: serviceid
        in: path
        required: true
        schema:
          type: string
        description: Service Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/services/{serviceid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "servicesList"
                    ],
                    "properties": {
                      "servicesList": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "servicesList"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "servicesList": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "servicesId",
                                "dateprovided",
                                "faamount",
                                "recordtype",
                                "referraloutcome",
                                "subtypeprovided",
                                "typeprovided"
                              ],
                              "properties": {
                                "servicesId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "dateprovided": {
                                  "type": "integer"
                                },
                                "faamount": {
                                  "type": "integer"
                                },
                                "recordtype": {
                                  "type": "integer"
                                },
                                "referraloutcome": {
                                  "type": "integer"
                                },
                                "subtypeprovided": {
                                  "type": "integer"
                                },
                                "typeprovided": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    servicesList:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      servicesList:
                        - servicesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          dateprovided: 1458186668375
                          faamount: 15
                          recordtype: 15
                          referraloutcome: 3
                          subtypeprovided: 11
                          typeprovided: 10
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for service history.  Returns a list of service ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-services-serviceid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: serviceid
        in: path
        required: true
        schema:
          type: string
        description: Service Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/sexualorientations':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "sexualorientations"
                    ],
                    "properties": {
                      "sexualorientations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "sexualorientations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "sexualorientations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "sexualorientationId",
                                "sexualorientation",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "sexualorientationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "sexualorientation": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    sexualorientations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      sexualorientations:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/sexualorientations/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          sexualorientationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          sexualorientation: 99
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for sexualorientation.  Returns a list of sexualorientation
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-sexualorientations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "sexualorientation"
                    ],
                    "properties": {
                      "sexualorientation": {
                        "type": "object",
                        "required": [
                          "sexualorientationId"
                        ],
                        "properties": {
                          "sexualorientationId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  sexualorientation:
                    sexualorientationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a sexualorientation
      operationId: POST_clients-clientid-enrollments-enrollmentid-sexualorientations
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "sexualorientation"
                  ],
                  "properties": {
                    "sexualorientation": {
                      "type": "object",
                      "required": [
                        "sexualorientation",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "sexualorientation": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  sexualorientation:
                    sexualorientation: 99
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/sexualorientations/{sexualorientationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "sexualorientation"
                    ],
                    "properties": {
                      "sexualorientation": {
                        "type": "object",
                        "required": [
                          "links",
                          "sexualorientationId",
                          "sexualorientation",
                          "informationDate",
                          "dataCollectionStage"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "sexualorientationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "sexualorientation": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    sexualorientation:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/sexualorientations/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        sexualorientationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        sexualorientation: 99
                        informationDate: 03-17-2016
                        dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a sexualorientation using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-sexualorientations-sexualorientationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific sexualorientation specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-sexualorientations-sexualorientationid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "sexualorientation"
                  ],
                  "properties": {
                    "sexualorientation": {
                      "type": "object",
                      "required": [
                        "sexualorientation",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "sexualorientation": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  sexualorientation:
                    sexualorientation: 99
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific sexualorientation specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-sexualorientations-sexualorientationid
    parameters:
      - name: sexualorientationid
        in: path
        required: true
        schema:
          type: string
        description: Sexualorientation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/sexualorientations/{sexualorientationid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "sexualorientations"
                    ],
                    "properties": {
                      "sexualorientations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "sexualorientations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "sexualorientations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "sexualorientationId",
                                "sexualorientation",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "sexualorientationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "sexualorientation": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    sexualorientations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      sexualorientations:
                        - sexualorientationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          sexualorientation: 99
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for sexualorientation history.  Returns a list of sexualorientation
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-sexualorientations-sexualorientationid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: sexualorientationid
        in: path
        required: true
        schema:
          type: string
        description: Sexualorientation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/worsthousingsituations':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "worstHousingSituations"
                    ],
                    "properties": {
                      "worstHousingSituations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "worstHousingSituations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "worstHousingSituations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "worstHousingSituationId",
                                "worsthousingsituation"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "worstHousingSituationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "worsthousingsituation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    worstHousingSituations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      worstHousingSituations:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/worsthousingsituations/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          worstHousingSituationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          worsthousingsituation: 9
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for worsthousingsituation.  Returns a list of
        worsthousingsituation ids, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-worsthousingsituations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "worstHousingSituation"
                    ],
                    "properties": {
                      "worstHousingSituation": {
                        "type": "object",
                        "required": [
                          "worstHousingSituationId"
                        ],
                        "properties": {
                          "worstHousingSituationId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  worstHousingSituation:
                    worstHousingSituationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a worsthousingsituation
      operationId: POST_clients-clientid-enrollments-enrollmentid-worsthousingsituations
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "worstHousingSituation"
                  ],
                  "properties": {
                    "worstHousingSituation": {
                      "type": "object",
                      "required": [
                        "worsthousingsituation"
                      ],
                      "properties": {
                        "worsthousingsituation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  worstHousingSituation:
                    worsthousingsituation: 9
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/worsthousingsituations/{worsthousingsituationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "worstHousingSituation"
                    ],
                    "properties": {
                      "worstHousingSituation": {
                        "type": "object",
                        "required": [
                          "links",
                          "worstHousingSituationId",
                          "worsthousingsituation"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "worstHousingSituationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "worsthousingsituation": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    worstHousingSituation:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/worsthousingsituations/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        worstHousingSituationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        worsthousingsituation: 9
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a worsthousingsituation using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-worsthousingsituations-worsthousingsituationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific worsthousingsituation specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-worsthousingsituations-worsthousingsituationid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "worstHousingSituation"
                  ],
                  "properties": {
                    "worstHousingSituation": {
                      "type": "object",
                      "required": [
                        "worsthousingsituation"
                      ],
                      "properties": {
                        "worsthousingsituation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  worstHousingSituation:
                    worsthousingsituation: 9
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific worsthousingsituation specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-worsthousingsituations-worsthousingsituationid
    parameters:
      - name: worsthousingsituationid
        in: path
        required: true
        schema:
          type: string
        description: Worsthousingsituation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/worsthousingsituations/{worsthousingsituationid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "worstHousingSituations"
                    ],
                    "properties": {
                      "worstHousingSituations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "worstHousingSituations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "worstHousingSituations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "worstHousingSituationId",
                                "worsthousingsituation"
                              ],
                              "properties": {
                                "worstHousingSituationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "worsthousingsituation": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    worstHousingSituations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      worstHousingSituations:
                        - worstHousingSituationId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          worsthousingsituation: 9
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for worsthousingsituation history.  Returns a list of
        worsthousingsituation ids history, based on the query parameters sent.  The
        query parameters are cumulative, so each additional query parameter
        narrows the search down further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-worsthousingsituations-worsthousingsituationid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: worsthousingsituationid
        in: path
        required: true
        schema:
          type: string
        description: Worsthousingsituation Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/youthcriticalissues':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "youthCriticalIssues"
                    ],
                    "properties": {
                      "youthCriticalIssues": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "youthCriticalIssues"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "youthCriticalIssues": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "youthCriticalIssuesId",
                                "abuseandneglectfam",
                                "abuseandneglectyouth",
                                "activemilitaryparent",
                                "alcoholdrugabusefam",
                                "alcoholdrugabuseyouth",
                                "healthissuesfam",
                                "healthissuesyouth",
                                "householddynamics",
                                "housingissuesfam",
                                "housingissuesyouth",
                                "incarceratedparent",
                                "incarceratedparentstatus",
                                "insufficientincome",
                                "mentaldisabilityfam",
                                "mentaldisabilityyouth",
                                "mentalhealthissuesfam",
                                "mentalhealthissuesyouth",
                                "physicaldisabilityfam",
                                "physicaldisabilityyouth",
                                "schooleducationalissuesfam",
                                "schooleducationalissuesyouth",
                                "sexualorientationgenderidfam",
                                "sexualorientationgenderidyouth",
                                "unemploymentfam",
                                "unemploymentyouth",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "youthCriticalIssuesId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "abuseandneglectfam": {
                                  "type": "integer"
                                },
                                "abuseandneglectyouth": {
                                  "type": "integer"
                                },
                                "activemilitaryparent": {
                                  "type": "integer"
                                },
                                "alcoholdrugabusefam": {
                                  "type": "integer"
                                },
                                "alcoholdrugabuseyouth": {
                                  "type": "integer"
                                },
                                "healthissuesfam": {
                                  "type": "integer"
                                },
                                "healthissuesyouth": {
                                  "type": "integer"
                                },
                                "householddynamics": {
                                  "type": "integer"
                                },
                                "housingissuesfam": {
                                  "type": "integer"
                                },
                                "housingissuesyouth": {
                                  "type": "integer"
                                },
                                "incarceratedparent": {
                                  "type": "integer"
                                },
                                "incarceratedparentstatus": {
                                  "type": "integer"
                                },
                                "insufficientincome": {
                                  "type": "integer"
                                },
                                "mentaldisabilityfam": {
                                  "type": "integer"
                                },
                                "mentaldisabilityyouth": {
                                  "type": "integer"
                                },
                                "mentalhealthissuesfam": {
                                  "type": "integer"
                                },
                                "mentalhealthissuesyouth": {
                                  "type": "integer"
                                },
                                "physicaldisabilityfam": {
                                  "type": "integer"
                                },
                                "physicaldisabilityyouth": {
                                  "type": "integer"
                                },
                                "schooleducationalissuesfam": {
                                  "type": "integer"
                                },
                                "schooleducationalissuesyouth": {
                                  "type": "integer"
                                },
                                "sexualorientationgenderidfam": {
                                  "type": "integer"
                                },
                                "sexualorientationgenderidyouth": {
                                  "type": "integer"
                                },
                                "unemploymentfam": {
                                  "type": "integer"
                                },
                                "unemploymentyouth": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    youthCriticalIssues:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      youthCriticalIssues:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/youthcriticalissues/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          youthCriticalIssuesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          abuseandneglectfam: 0
                          abuseandneglectyouth: 99
                          activemilitaryparent: 1
                          alcoholdrugabusefam: 99
                          alcoholdrugabuseyouth: 1
                          healthissuesfam: 99
                          healthissuesyouth: 1
                          householddynamics: 0
                          housingissuesfam: 99
                          housingissuesyouth: 0
                          incarceratedparent: 99
                          incarceratedparentstatus: 3
                          insufficientincome: 0
                          mentaldisabilityfam: 99
                          mentaldisabilityyouth: 0
                          mentalhealthissuesfam: 1
                          mentalhealthissuesyouth: 99
                          physicaldisabilityfam: 0
                          physicaldisabilityyouth: 99
                          schooleducationalissuesfam: 0
                          schooleducationalissuesyouth: 0
                          sexualorientationgenderidfam: 1
                          sexualorientationgenderidyouth: 1
                          unemploymentfam: 99
                          unemploymentyouth: 99
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for youthcriticalissue.  Returns a list of youthcriticalissue
        ids, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-youthcriticalissues
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "youthCriticalIssue"
                    ],
                    "properties": {
                      "youthCriticalIssue": {
                        "type": "object",
                        "required": [
                          "youthCriticalIssuesId"
                        ],
                        "properties": {
                          "youthCriticalIssuesId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  youthCriticalIssue:
                    youthCriticalIssuesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a youthcriticalissue
      operationId: POST_clients-clientid-enrollments-enrollmentid-youthcriticalissues
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "youthCriticalIssue"
                  ],
                  "properties": {
                    "youthCriticalIssue": {
                      "type": "object",
                      "required": [
                        "abuseandneglectfam",
                        "abuseandneglectyouth",
                        "activemilitaryparent",
                        "alcoholdrugabusefam",
                        "alcoholdrugabuseyouth",
                        "healthissuesfam",
                        "healthissuesyouth",
                        "householddynamics",
                        "housingissuesfam",
                        "housingissuesyouth",
                        "incarceratedparent",
                        "incarceratedparentstatus",
                        "insufficientincome",
                        "mentaldisabilityfam",
                        "mentaldisabilityyouth",
                        "mentalhealthissuesfam",
                        "mentalhealthissuesyouth",
                        "physicaldisabilityfam",
                        "physicaldisabilityyouth",
                        "schooleducationalissuesfam",
                        "schooleducationalissuesyouth",
                        "sexualorientationgenderidfam",
                        "sexualorientationgenderidyouth",
                        "unemploymentfam",
                        "unemploymentyouth",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "abuseandneglectfam": {
                          "type": "integer"
                        },
                        "abuseandneglectyouth": {
                          "type": "integer"
                        },
                        "activemilitaryparent": {
                          "type": "integer"
                        },
                        "alcoholdrugabusefam": {
                          "type": "integer"
                        },
                        "alcoholdrugabuseyouth": {
                          "type": "integer"
                        },
                        "healthissuesfam": {
                          "type": "integer"
                        },
                        "healthissuesyouth": {
                          "type": "integer"
                        },
                        "householddynamics": {
                          "type": "integer"
                        },
                        "housingissuesfam": {
                          "type": "integer"
                        },
                        "housingissuesyouth": {
                          "type": "integer"
                        },
                        "incarceratedparent": {
                          "type": "integer"
                        },
                        "incarceratedparentstatus": {
                          "type": "integer"
                        },
                        "insufficientincome": {
                          "type": "integer"
                        },
                        "mentaldisabilityfam": {
                          "type": "integer"
                        },
                        "mentaldisabilityyouth": {
                          "type": "integer"
                        },
                        "mentalhealthissuesfam": {
                          "type": "integer"
                        },
                        "mentalhealthissuesyouth": {
                          "type": "integer"
                        },
                        "physicaldisabilityfam": {
                          "type": "integer"
                        },
                        "physicaldisabilityyouth": {
                          "type": "integer"
                        },
                        "schooleducationalissuesfam": {
                          "type": "integer"
                        },
                        "schooleducationalissuesyouth": {
                          "type": "integer"
                        },
                        "sexualorientationgenderidfam": {
                          "type": "integer"
                        },
                        "sexualorientationgenderidyouth": {
                          "type": "integer"
                        },
                        "unemploymentfam": {
                          "type": "integer"
                        },
                        "unemploymentyouth": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  youthCriticalIssue:
                    abuseandneglectfam: 0
                    abuseandneglectyouth: 99
                    activemilitaryparent: 1
                    alcoholdrugabusefam: 99
                    alcoholdrugabuseyouth: 1
                    healthissuesfam: 99
                    healthissuesyouth: 1
                    householddynamics: 0
                    housingissuesfam: 99
                    housingissuesyouth: 0
                    incarceratedparent: 99
                    incarceratedparentstatus: 3
                    insufficientincome: 0
                    mentaldisabilityfam: 99
                    mentaldisabilityyouth: 0
                    mentalhealthissuesfam: 1
                    mentalhealthissuesyouth: 99
                    physicaldisabilityfam: 0
                    physicaldisabilityyouth: 99
                    schooleducationalissuesfam: 0
                    schooleducationalissuesyouth: 0
                    sexualorientationgenderidfam: 1
                    sexualorientationgenderidyouth: 1
                    unemploymentfam: 99
                    unemploymentyouth: 99
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/youthcriticalissues/{youthcriticalissueid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "youthCriticalIssue"
                    ],
                    "properties": {
                      "youthCriticalIssue": {
                        "type": "object",
                        "required": [
                          "links",
                          "youthCriticalIssuesId",
                          "abuseandneglectfam",
                          "abuseandneglectyouth",
                          "activemilitaryparent",
                          "alcoholdrugabusefam",
                          "alcoholdrugabuseyouth",
                          "healthissuesfam",
                          "healthissuesyouth",
                          "householddynamics",
                          "housingissuesfam",
                          "housingissuesyouth",
                          "incarceratedparent",
                          "incarceratedparentstatus",
                          "insufficientincome",
                          "mentaldisabilityfam",
                          "mentaldisabilityyouth",
                          "mentalhealthissuesfam",
                          "mentalhealthissuesyouth",
                          "physicaldisabilityfam",
                          "physicaldisabilityyouth",
                          "schooleducationalissuesfam",
                          "schooleducationalissuesyouth",
                          "sexualorientationgenderidfam",
                          "sexualorientationgenderidyouth",
                          "unemploymentfam",
                          "unemploymentyouth",
                          "informationDate",
                          "dataCollectionStage"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "youthCriticalIssuesId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "abuseandneglectfam": {
                            "type": "integer"
                          },
                          "abuseandneglectyouth": {
                            "type": "integer"
                          },
                          "activemilitaryparent": {
                            "type": "integer"
                          },
                          "alcoholdrugabusefam": {
                            "type": "integer"
                          },
                          "alcoholdrugabuseyouth": {
                            "type": "integer"
                          },
                          "healthissuesfam": {
                            "type": "integer"
                          },
                          "healthissuesyouth": {
                            "type": "integer"
                          },
                          "householddynamics": {
                            "type": "integer"
                          },
                          "housingissuesfam": {
                            "type": "integer"
                          },
                          "housingissuesyouth": {
                            "type": "integer"
                          },
                          "incarceratedparent": {
                            "type": "integer"
                          },
                          "incarceratedparentstatus": {
                            "type": "integer"
                          },
                          "insufficientincome": {
                            "type": "integer"
                          },
                          "mentaldisabilityfam": {
                            "type": "integer"
                          },
                          "mentaldisabilityyouth": {
                            "type": "integer"
                          },
                          "mentalhealthissuesfam": {
                            "type": "integer"
                          },
                          "mentalhealthissuesyouth": {
                            "type": "integer"
                          },
                          "physicaldisabilityfam": {
                            "type": "integer"
                          },
                          "physicaldisabilityyouth": {
                            "type": "integer"
                          },
                          "schooleducationalissuesfam": {
                            "type": "integer"
                          },
                          "schooleducationalissuesyouth": {
                            "type": "integer"
                          },
                          "sexualorientationgenderidfam": {
                            "type": "integer"
                          },
                          "sexualorientationgenderidyouth": {
                            "type": "integer"
                          },
                          "unemploymentfam": {
                            "type": "integer"
                          },
                          "unemploymentyouth": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    youthCriticalIssue:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/enrollments/a9577ecf-5fb3-453e-9d3b-2bb81658ffe1/youthcriticalissues/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        youthCriticalIssuesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        abuseandneglectfam: 0
                        abuseandneglectyouth: 99
                        activemilitaryparent: 1
                        alcoholdrugabusefam: 99
                        alcoholdrugabuseyouth: 1
                        healthissuesfam: 99
                        healthissuesyouth: 1
                        householddynamics: 0
                        housingissuesfam: 99
                        housingissuesyouth: 0
                        incarceratedparent: 99
                        incarceratedparentstatus: 3
                        insufficientincome: 0
                        mentaldisabilityfam: 99
                        mentaldisabilityyouth: 0
                        mentalhealthissuesfam: 1
                        mentalhealthissuesyouth: 99
                        physicaldisabilityfam: 0
                        physicaldisabilityyouth: 99
                        schooleducationalissuesfam: 0
                        schooleducationalissuesyouth: 0
                        sexualorientationgenderidfam: 1
                        sexualorientationgenderidyouth: 1
                        unemploymentfam: 99
                        unemploymentyouth: 99
                        informationDate: 03-17-2016
                        dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a youthcriticalissue using a URI resource parameter/ID.
      operationId: >-
        GET_clients-clientid-enrollments-enrollmentid-youthcriticalissues-youthcriticalissueid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific youthcriticalissue specified by the URI resource
        parameter/ID.
      operationId: >-
        PUT_clients-clientid-enrollments-enrollmentid-youthcriticalissues-youthcriticalissueid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "youthCriticalIssue"
                  ],
                  "properties": {
                    "youthCriticalIssue": {
                      "type": "object",
                      "required": [
                        "abuseandneglectfam",
                        "abuseandneglectyouth",
                        "activemilitaryparent",
                        "alcoholdrugabusefam",
                        "alcoholdrugabuseyouth",
                        "healthissuesfam",
                        "healthissuesyouth",
                        "householddynamics",
                        "housingissuesfam",
                        "housingissuesyouth",
                        "incarceratedparent",
                        "incarceratedparentstatus",
                        "insufficientincome",
                        "mentaldisabilityfam",
                        "mentaldisabilityyouth",
                        "mentalhealthissuesfam",
                        "mentalhealthissuesyouth",
                        "physicaldisabilityfam",
                        "physicaldisabilityyouth",
                        "schooleducationalissuesfam",
                        "schooleducationalissuesyouth",
                        "sexualorientationgenderidfam",
                        "sexualorientationgenderidyouth",
                        "unemploymentfam",
                        "unemploymentyouth",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "abuseandneglectfam": {
                          "type": "integer"
                        },
                        "abuseandneglectyouth": {
                          "type": "integer"
                        },
                        "activemilitaryparent": {
                          "type": "integer"
                        },
                        "alcoholdrugabusefam": {
                          "type": "integer"
                        },
                        "alcoholdrugabuseyouth": {
                          "type": "integer"
                        },
                        "healthissuesfam": {
                          "type": "integer"
                        },
                        "healthissuesyouth": {
                          "type": "integer"
                        },
                        "householddynamics": {
                          "type": "integer"
                        },
                        "housingissuesfam": {
                          "type": "integer"
                        },
                        "housingissuesyouth": {
                          "type": "integer"
                        },
                        "incarceratedparent": {
                          "type": "integer"
                        },
                        "incarceratedparentstatus": {
                          "type": "integer"
                        },
                        "insufficientincome": {
                          "type": "integer"
                        },
                        "mentaldisabilityfam": {
                          "type": "integer"
                        },
                        "mentaldisabilityyouth": {
                          "type": "integer"
                        },
                        "mentalhealthissuesfam": {
                          "type": "integer"
                        },
                        "mentalhealthissuesyouth": {
                          "type": "integer"
                        },
                        "physicaldisabilityfam": {
                          "type": "integer"
                        },
                        "physicaldisabilityyouth": {
                          "type": "integer"
                        },
                        "schooleducationalissuesfam": {
                          "type": "integer"
                        },
                        "schooleducationalissuesyouth": {
                          "type": "integer"
                        },
                        "sexualorientationgenderidfam": {
                          "type": "integer"
                        },
                        "sexualorientationgenderidyouth": {
                          "type": "integer"
                        },
                        "unemploymentfam": {
                          "type": "integer"
                        },
                        "unemploymentyouth": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  youthCriticalIssue:
                    abuseandneglectfam: 0
                    abuseandneglectyouth: 99
                    activemilitaryparent: 1
                    alcoholdrugabusefam: 99
                    alcoholdrugabuseyouth: 1
                    healthissuesfam: 99
                    healthissuesyouth: 1
                    householddynamics: 0
                    housingissuesfam: 99
                    housingissuesyouth: 0
                    incarceratedparent: 99
                    incarceratedparentstatus: 3
                    insufficientincome: 0
                    mentaldisabilityfam: 99
                    mentaldisabilityyouth: 0
                    mentalhealthissuesfam: 1
                    mentalhealthissuesyouth: 99
                    physicaldisabilityfam: 0
                    physicaldisabilityyouth: 99
                    schooleducationalissuesfam: 0
                    schooleducationalissuesyouth: 0
                    sexualorientationgenderidfam: 1
                    sexualorientationgenderidyouth: 1
                    unemploymentfam: 99
                    unemploymentyouth: 99
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific youthcriticalissue specified by the URI resource
        parameter/ID.
      operationId: >-
        DELETE_clients-clientid-enrollments-enrollmentid-youthcriticalissues-youthcriticalissueid
    parameters:
      - name: youthcriticalissueid
        in: path
        required: true
        schema:
          type: string
        description: Youthcriticalissue Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/enrollments/{enrollmentid}/youthcriticalissues/{youthcriticalissueid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "youthCriticalIssues"
                    ],
                    "properties": {
                      "youthCriticalIssues": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "youthCriticalIssues"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "youthCriticalIssues": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "youthCriticalIssuesId",
                                "abuseandneglectfam",
                                "abuseandneglectyouth",
                                "activemilitaryparent",
                                "alcoholdrugabusefam",
                                "alcoholdrugabuseyouth",
                                "healthissuesfam",
                                "healthissuesyouth",
                                "householddynamics",
                                "housingissuesfam",
                                "housingissuesyouth",
                                "incarceratedparent",
                                "incarceratedparentstatus",
                                "insufficientincome",
                                "mentaldisabilityfam",
                                "mentaldisabilityyouth",
                                "mentalhealthissuesfam",
                                "mentalhealthissuesyouth",
                                "physicaldisabilityfam",
                                "physicaldisabilityyouth",
                                "schooleducationalissuesfam",
                                "schooleducationalissuesyouth",
                                "sexualorientationgenderidfam",
                                "sexualorientationgenderidyouth",
                                "unemploymentfam",
                                "unemploymentyouth",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "youthCriticalIssuesId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "abuseandneglectfam": {
                                  "type": "integer"
                                },
                                "abuseandneglectyouth": {
                                  "type": "integer"
                                },
                                "activemilitaryparent": {
                                  "type": "integer"
                                },
                                "alcoholdrugabusefam": {
                                  "type": "integer"
                                },
                                "alcoholdrugabuseyouth": {
                                  "type": "integer"
                                },
                                "healthissuesfam": {
                                  "type": "integer"
                                },
                                "healthissuesyouth": {
                                  "type": "integer"
                                },
                                "householddynamics": {
                                  "type": "integer"
                                },
                                "housingissuesfam": {
                                  "type": "integer"
                                },
                                "housingissuesyouth": {
                                  "type": "integer"
                                },
                                "incarceratedparent": {
                                  "type": "integer"
                                },
                                "incarceratedparentstatus": {
                                  "type": "integer"
                                },
                                "insufficientincome": {
                                  "type": "integer"
                                },
                                "mentaldisabilityfam": {
                                  "type": "integer"
                                },
                                "mentaldisabilityyouth": {
                                  "type": "integer"
                                },
                                "mentalhealthissuesfam": {
                                  "type": "integer"
                                },
                                "mentalhealthissuesyouth": {
                                  "type": "integer"
                                },
                                "physicaldisabilityfam": {
                                  "type": "integer"
                                },
                                "physicaldisabilityyouth": {
                                  "type": "integer"
                                },
                                "schooleducationalissuesfam": {
                                  "type": "integer"
                                },
                                "schooleducationalissuesyouth": {
                                  "type": "integer"
                                },
                                "sexualorientationgenderidfam": {
                                  "type": "integer"
                                },
                                "sexualorientationgenderidyouth": {
                                  "type": "integer"
                                },
                                "unemploymentfam": {
                                  "type": "integer"
                                },
                                "unemploymentyouth": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    youthCriticalIssues:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      youthCriticalIssues:
                        - youthCriticalIssuesId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          abuseandneglectfam: 0
                          abuseandneglectyouth: 99
                          activemilitaryparent: 1
                          alcoholdrugabusefam: 99
                          alcoholdrugabuseyouth: 1
                          healthissuesfam: 99
                          healthissuesyouth: 1
                          householddynamics: 0
                          housingissuesfam: 99
                          housingissuesyouth: 0
                          incarceratedparent: 99
                          incarceratedparentstatus: 3
                          insufficientincome: 0
                          mentaldisabilityfam: 99
                          mentaldisabilityyouth: 0
                          mentalhealthissuesfam: 1
                          mentalhealthissuesyouth: 99
                          physicaldisabilityfam: 0
                          physicaldisabilityyouth: 99
                          schooleducationalissuesfam: 0
                          schooleducationalissuesyouth: 0
                          sexualorientationgenderidfam: 1
                          sexualorientationgenderidyouth: 1
                          unemploymentfam: 99
                          unemploymentyouth: 99
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for youthcriticalissue history.  Returns a list of youthcriticalissue
        ids history, based on the query parameters sent.  The query parameters are
        cumulative, so each additional query parameter narrows the search down
        further.
      operationId: GET_clients-clientid-enrollments-enrollmentid-youthcriticalissues-youthcriticalissueid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: youthcriticalissueid
        in: path
        required: true
        schema:
          type: string
        description: Youthcriticalissue Identifier
      - name: enrollmentid
        in: path
        required: true
        schema:
          type: string
        description: Enrollment Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/veteraninfos':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "veteranInfos"
                    ],
                    "properties": {
                      "veteranInfos": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "veteranInfos"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "veteranInfos": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "veteranInfoId",
                                "yearEntrdService",
                                "yearSeperated",
                                "worldWar2",
                                "koreanWar",
                                "vietnamWar",
                                "desertStorm",
                                "afghanistanOef",
                                "iraqOif",
                                "iraqOnd",
                                "otherTheater",
                                "militaryBranch",
                                "dischargeStatus"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "veteranInfoId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "yearEntrdService": {
                                  "type": "integer"
                                },
                                "yearSeperated": {
                                  "type": "integer"
                                },
                                "worldWar2": {
                                  "type": "integer"
                                },
                                "koreanWar": {
                                  "type": "integer"
                                },
                                "vietnamWar": {
                                  "type": "integer"
                                },
                                "desertStorm": {
                                  "type": "integer"
                                },
                                "afghanistanOef": {
                                  "type": "integer"
                                },
                                "iraqOif": {
                                  "type": "integer"
                                },
                                "iraqOnd": {
                                  "type": "integer"
                                },
                                "otherTheater": {
                                  "type": "integer"
                                },
                                "militaryBranch": {
                                  "type": "integer"
                                },
                                "dischargeStatus": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    veteranInfos:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      veteranInfos:
                        - links:
                          - rel: history
                            href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/veteraninfos/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                          veteranInfoId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          yearEntrdService: 12
                          yearSeperated: 2
                          worldWar2: 9
                          koreanWar: 8
                          vietnamWar: 8
                          desertStorm: 99
                          afghanistanOef: 9
                          iraqOif: 1
                          iraqOnd: 8
                          otherTheater: 99
                          militaryBranch: 6
                          dischargeStatus: 2
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for veteraninfo.  Returns a list of veteraninfo ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-veteraninfos
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "veteranInfo"
                    ],
                    "properties": {
                      "veteranInfo": {
                        "type": "object",
                        "required": [
                          "veteranInfoId"
                        ],
                        "properties": {
                          "veteranInfoId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  veteranInfo:
                    veteranInfoId: 5c025aea-ecdc-4902-b451-4436b64a83ea
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a veteraninfo
      operationId: POST_clients-clientid-veteraninfos
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "veteranInfo"
                  ],
                  "properties": {
                    "veteranInfo": {
                      "type": "object",
                      "required": [
                        "yearEntrdService",
                        "yearSeperated",
                        "worldWar2",
                        "koreanWar",
                        "vietnamWar",
                        "desertStorm",
                        "afghanistanOef",
                        "iraqOif",
                        "iraqOnd",
                        "otherTheater",
                        "militaryBranch",
                        "dischargeStatus"
                      ],
                      "properties": {
                        "yearEntrdService": {
                          "type": "integer"
                        },
                        "yearSeperated": {
                          "type": "integer"
                        },
                        "worldWar2": {
                          "type": "integer"
                        },
                        "koreanWar": {
                          "type": "integer"
                        },
                        "vietnamWar": {
                          "type": "integer"
                        },
                        "desertStorm": {
                          "type": "integer"
                        },
                        "afghanistanOef": {
                          "type": "integer"
                        },
                        "iraqOif": {
                          "type": "integer"
                        },
                        "iraqOnd": {
                          "type": "integer"
                        },
                        "otherTheater": {
                          "type": "integer"
                        },
                        "militaryBranch": {
                          "type": "integer"
                        },
                        "dischargeStatus": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  veteranInfo:
                    yearEntrdService: 12
                    yearSeperated: 2
                    worldWar2: 9
                    koreanWar: 8
                    vietnamWar: 8
                    desertStorm: 99
                    afghanistanOef: 9
                    iraqOif: 1
                    iraqOnd: 8
                    otherTheater: 99
                    militaryBranch: 6
                    dischargeStatus: 2
        required: true
    parameters:
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/veteraninfos/{veteraninfoid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "veteranInfo"
                    ],
                    "properties": {
                      "veteranInfo": {
                        "type": "object",
                        "required": [
                          "links",
                          "veteranInfoId",
                          "yearEntrdService",
                          "yearSeperated",
                          "worldWar2",
                          "koreanWar",
                          "vietnamWar",
                          "desertStorm",
                          "afghanistanOef",
                          "iraqOif",
                          "iraqOnd",
                          "otherTheater",
                          "militaryBranch",
                          "dischargeStatus"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "veteranInfoId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "yearEntrdService": {
                            "type": "integer"
                          },
                          "yearSeperated": {
                            "type": "integer"
                          },
                          "worldWar2": {
                            "type": "integer"
                          },
                          "koreanWar": {
                            "type": "integer"
                          },
                          "vietnamWar": {
                            "type": "integer"
                          },
                          "desertStorm": {
                            "type": "integer"
                          },
                          "afghanistanOef": {
                            "type": "integer"
                          },
                          "iraqOif": {
                            "type": "integer"
                          },
                          "iraqOnd": {
                            "type": "integer"
                          },
                          "otherTheater": {
                            "type": "integer"
                          },
                          "militaryBranch": {
                            "type": "integer"
                          },
                          "dischargeStatus": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    veteranInfo:
                        links:
                        - rel: history
                          href: "/clients/717661f4-eaa3-4298-8739-789ab8a1f3d1/veteraninfos/5c025aea-ecdc-4902-b451-4436b64a83ea/history"
                        veteranInfoId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                        yearEntrdService: 12
                        yearSeperated: 2
                        worldWar2: 9
                        koreanWar: 8
                        vietnamWar: 8
                        desertStorm: 99
                        afghanistanOef: 9
                        iraqOif: 1
                        iraqOnd: 8
                        otherTheater: 99
                        militaryBranch: 6
                        dischargeStatus: 2
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a veteraninfo using a URI resource parameter/ID.
      operationId: GET_clients-clientid-veteraninfos-veteraninfoid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific veteraninfo specified by the URI resource
        parameter/ID.
      operationId: PUT_clients-clientid-veteraninfos-veteraninfoid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "veteranInfo"
                  ],
                  "properties": {
                    "veteranInfo": {
                      "type": "object",
                      "required": [
                        "yearEntrdService",
                        "yearSeperated",
                        "worldWar2",
                        "koreanWar",
                        "vietnamWar",
                        "desertStorm",
                        "afghanistanOef",
                        "iraqOif",
                        "iraqOnd",
                        "otherTheater",
                        "militaryBranch",
                        "dischargeStatus"
                      ],
                      "properties": {
                        "yearEntrdService": {
                          "type": "integer"
                        },
                        "yearSeperated": {
                          "type": "integer"
                        },
                        "worldWar2": {
                          "type": "integer"
                        },
                        "koreanWar": {
                          "type": "integer"
                        },
                        "vietnamWar": {
                          "type": "integer"
                        },
                        "desertStorm": {
                          "type": "integer"
                        },
                        "afghanistanOef": {
                          "type": "integer"
                        },
                        "iraqOif": {
                          "type": "integer"
                        },
                        "iraqOnd": {
                          "type": "integer"
                        },
                        "otherTheater": {
                          "type": "integer"
                        },
                        "militaryBranch": {
                          "type": "integer"
                        },
                        "dischargeStatus": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  veteranInfo:
                    yearEntrdService: 12
                    yearSeperated: 2
                    worldWar2: 9
                    koreanWar: 8
                    vietnamWar: 8
                    desertStorm: 99
                    afghanistanOef: 9
                    iraqOif: 1
                    iraqOnd: 8
                    otherTheater: 99
                    militaryBranch: 6
                    dischargeStatus: 2
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific veteraninfo specified by the URI resource
        parameter/ID.
      operationId: DELETE_clients-clientid-veteraninfos-veteraninfoid
    parameters:
      - name: veteraninfoid
        in: path
        required: true
        schema:
          type: string
        description: Veteraninfo Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  '/clients/{clientid}/veteraninfos/{veteraninfoid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "veteranInfos"
                    ],
                    "properties": {
                      "veteranInfos": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "veteranInfos"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "veteranInfos": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "veteranInfoId",
                                "yearEntrdService",
                                "yearSeperated",
                                "worldWar2",
                                "koreanWar",
                                "vietnamWar",
                                "desertStorm",
                                "afghanistanOef",
                                "iraqOif",
                                "iraqOnd",
                                "otherTheater",
                                "militaryBranch",
                                "dischargeStatus"
                              ],
                              "properties": {
                                "veteranInfoId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "yearEntrdService": {
                                  "type": "integer"
                                },
                                "yearSeperated": {
                                  "type": "integer"
                                },
                                "worldWar2": {
                                  "type": "integer"
                                },
                                "koreanWar": {
                                  "type": "integer"
                                },
                                "vietnamWar": {
                                  "type": "integer"
                                },
                                "desertStorm": {
                                  "type": "integer"
                                },
                                "afghanistanOef": {
                                  "type": "integer"
                                },
                                "iraqOif": {
                                  "type": "integer"
                                },
                                "iraqOnd": {
                                  "type": "integer"
                                },
                                "otherTheater": {
                                  "type": "integer"
                                },
                                "militaryBranch": {
                                  "type": "integer"
                                },
                                "dischargeStatus": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    veteranInfos:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      veteranInfos:
                        - veteranInfoId: 5c025aea-ecdc-4902-b451-4436b64a83ea
                          yearEntrdService: 12
                          yearSeperated: 2
                          worldWar2: 9
                          koreanWar: 8
                          vietnamWar: 8
                          desertStorm: 99
                          afghanistanOef: 9
                          iraqOif: 1
                          iraqOnd: 8
                          otherTheater: 99
                          militaryBranch: 6
                          dischargeStatus: 2
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for veteraninfo history.  Returns a list of veteraninfo ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_clients-clientid-veteraninfos-veteraninfoid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: veteraninfoid
        in: path
        required: true
        schema:
          type: string
        description: Veteraninfo Identifier
      - name: clientid
        in: path
        required: true
        schema:
          type: string
        description: Client Identifier
  /organizations:
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Organizations"
                    ],
                    "properties": {
                      "Organizations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "organizations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "organizations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "organizationId",
                                "organizationName",
                                "organizationCommonName"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "organizationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "organizationName": {
                                  "type": "string",
                                },
                                "organizationCommonName": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    Organizations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      organizations:
                        - links:
                          - rel: history
                            href: "/organizations/81a20cb3-e000-473c-a3e6-cddcba15a02f/history"
                          organizationId: 81a20cb3-e000-473c-a3e6-cddcba15a02f
                          organizationName: BBjksdjgjdR
                          organizationCommonName: BBR
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for organization.  Returns a list of organization ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_organizations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "organization"
                    ],
                    "properties": {
                      "organization": {
                        "type": "object",
                        "required": [
                          "organizationId"
                        ],
                        "properties": {
                          "organizationId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  organization:
                    organizationId: 8dff4029-09b7-4293-b24b-b077b39ee673
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a organization
      operationId: POST_organizations
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "organization"
                  ],
                  "properties": {
                    "organization": {
                      "type": "object",
                      "required": [
                        "organizationName",
                        "organizationCommonName"
                      ],
                      "properties": {
                        "organizationName": {
                          "type": "string",
                        },
                        "organizationCommonName": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  organization:
                    organizationName: BBjksdjgjdR
                    organizationCommonName: BBR
        required: true
  '/organizations/{organizationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "organization"
                    ],
                    "properties": {
                      "organization": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": [
                            "links",
                            "organizationId",
                            "organizationName",
                            "organizationCommonName"
                          ],
                          "properties": {
                            "links": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "required": [
                                  "rel",
                                  "href"
                                ],
                                "properties": {
                                  "rel": {
                                    "type": "string",
                                  },
                                  "href": {
                                    "type": "string",
                                  }
                                }
                              }
                            },
                            "organizationId": {
                              "type": "string",
                              "format": "uuid",
                            },
                            "organizationName": {
                              "type": "string",
                            },
                            "organizationCommonName": {
                              "type": "string",
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    organization:
                      - links:
                        - rel: history
                          href: "/organizations/8dff4029-09b7-4293-b24b-b077b39ee673/history"
                        organizationId: 8dff4029-09b7-4293-b24b-b077b39ee673
                        organizationName: BBjksdjgjR
                        organizationCommonName: BBR
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a organization using a URI resource parameter/ID.
      operationId: GET_organizations-organizationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific organization specified by the URI resource
        parameter/ID.
      operationId: PUT_organizations-organizationid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "organization"
                  ],
                  "properties": {
                    "organization": {
                      "type": "object",
                      "required": [
                        "organizationName",
                        "organizationCommonName"
                      ],
                      "properties": {
                        "organizationName": {
                          "type": "string",
                        },
                        "organizationCommonName": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  organization:
                    organizationName: BBjksdjgjdR
                    organizationCommonName: BBR
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific organization specified by the URI resource
        parameter/ID.
      operationId: DELETE_organizations-organizationid
    parameters:
      - name: organizationid
        in: path
        required: true
        schema:
          type: string
        description: Organization Identifier
  '/organizations/{organizationid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "Organizations"
                    ],
                    "properties": {
                      "Organizations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "organizations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "organizations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "organizationId",
                                "organizationName",
                                "organizationCommonName"
                              ],
                              "properties": {
                                "organizationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "organizationName": {
                                  "type": "string",
                                },
                                "organizationCommonName": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    Organizations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      organizations:
                        - organizationId: 81a20cb3-e000-473c-a3e6-cddcba15a02f
                          organizationName: BBjksdjgjdR
                          organizationCommonName: BBR
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for organization history.  Returns a list of organization ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_organizations-organizationid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: organizationid
        in: path
        required: true
        schema:
          type: string
        description: Organization Identifier
  /projects:
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projects"
                    ],
                    "properties": {
                      "projects": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "projects"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "projects": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "projectId",
                                "projectName",
                                "projectCommonName",
                                "continuumProject",
                                "projectType",
                                "residentialAffiliation",
                                "targetPopulation",
                                "trackingMethod"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "projectId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "projectName": {
                                  "type": "string",
                                },
                                "projectCommonName": {
                                  "type": "string",
                                },
                                "continuumProject": {
                                  "type": "integer"
                                },
                                "projectType": {
                                  "type": "integer"
                                },
                                "residentialAffiliation": {
                                  "type": "integer"
                                },
                                "targetPopulation": {
                                  "type": "integer"
                                },
                                "trackingMethod": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    projects:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      projects:
                        - links:
                          - rel: history
                            href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/history"
                          projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                          projectName: Homeless People Project
                          projectCommonName: Homeless People Project
                          continuumProject: 0
                          projectType: 1
                          residentialAffiliation: 0
                          targetPopulation: 1
                          trackingMethod: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for project.  Returns a list of project ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "project"
                    ],
                    "properties": {
                      "project": {
                        "type": "object",
                        "required": [
                          "projectId"
                        ],
                        "properties": {
                          "projectId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  project:
                    projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a project
      operationId: POST_projects
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "project"
                  ],
                  "properties": {
                    "project": {
                      "type": "object",
                      "required": [
                        "projectId",
                        "projectName",
                        "projectCommonName",
                        "continuumProject",
                        "projectType",
                        "residentialAffiliation",
                        "targetPopulation",
                        "trackingMethod"
                      ],
                      "properties": {
                        "projectId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "projectName": {
                          "type": "string",
                        },
                        "projectCommonName": {
                          "type": "string",
                        },
                        "continuumProject": {
                          "type": "integer"
                        },
                        "projectType": {
                          "type": "integer"
                        },
                        "residentialAffiliation": {
                          "type": "integer"
                        },
                        "targetPopulation": {
                          "type": "integer"
                        },
                        "trackingMethod": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  project:
                    projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                    projectName: Homeless People Project
                    projectCommonName: Homeless People Project
                    continuumProject: 0
                    projectType: 1
                    residentialAffiliation: 0
                    targetPopulation: 1
                    trackingMethod: 0
        required: true
  '/projects/{projectid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "project"
                    ],
                    "properties": {
                      "project": {
                        "type": "object",
                        "required": [
                          "links",
                          "projectId",
                          "projectName",
                          "projectCommonName",
                          "continuumProject",
                          "projectType",
                          "residentialAffiliation",
                          "targetPopulation",
                          "trackingMethod"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "projectId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "projectName": {
                            "type": "string",
                          },
                          "projectCommonName": {
                            "type": "string",
                          },
                          "continuumProject": {
                            "type": "integer"
                          },
                          "projectType": {
                            "type": "integer"
                          },
                          "residentialAffiliation": {
                            "type": "integer"
                          },
                          "targetPopulation": {
                            "type": "integer"
                          },
                          "trackingMethod": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    project:
                        links:
                        - rel: history
                          href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/history"
                        projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                        projectName: Homeless People Project
                        projectCommonName: Homeless People Project
                        continuumProject: 0
                        projectType: 1
                        residentialAffiliation: 0
                        targetPopulation: 1
                        trackingMethod: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a project using a URI resource parameter/ID.
      operationId: GET_projects-projectid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific project specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "project"
                  ],
                  "properties": {
                    "project": {
                      "type": "object",
                      "required": [
                        "projectId",
                        "projectName",
                        "projectCommonName",
                        "continuumProject",
                        "projectType",
                        "residentialAffiliation",
                        "targetPopulation",
                        "trackingMethod"
                      ],
                      "properties": {
                        "projectId": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "projectName": {
                          "type": "string",
                        },
                        "projectCommonName": {
                          "type": "string",
                        },
                        "continuumProject": {
                          "type": "integer"
                        },
                        "projectType": {
                          "type": "integer"
                        },
                        "residentialAffiliation": {
                          "type": "integer"
                        },
                        "targetPopulation": {
                          "type": "integer"
                        },
                        "trackingMethod": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  project:
                    projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                    projectName: Homeless People Project
                    projectCommonName: Homeless People Project
                    continuumProject: 0
                    projectType: 1
                    residentialAffiliation: 0
                    targetPopulation: 1
                    trackingMethod: 0
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific project specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projects"
                    ],
                    "properties": {
                      "projects": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "projects"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "projects": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "projectId",
                                "projectName",
                                "projectCommonName",
                                "continuumProject",
                                "projectType",
                                "residentialAffiliation",
                                "targetPopulation",
                                "trackingMethod"
                              ],
                              "properties": {
                                "projectId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "projectName": {
                                  "type": "string",
                                },
                                "projectCommonName": {
                                  "type": "string",
                                },
                                "continuumProject": {
                                  "type": "integer"
                                },
                                "projectType": {
                                  "type": "integer"
                                },
                                "residentialAffiliation": {
                                  "type": "integer"
                                },
                                "targetPopulation": {
                                  "type": "integer"
                                },
                                "trackingMethod": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    projects:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      projects:
                        - projectId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                          projectName: Homeless People Project
                          projectCommonName: Homeless People Project
                          continuumProject: 0
                          projectType: 1
                          residentialAffiliation: 0
                          targetPopulation: 1
                          trackingMethod: 0
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for project history.  Returns a list of project ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/affiliations':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "affiliations"
                    ],
                    "properties": {
                      "affiliations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "affiliations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "affiliations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "affiliationId",
                                "resprojectid"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "affiliationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "resprojectid": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    affiliations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      affiliations:
                        - links:
                          - rel: history
                            href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/affiliations/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/history"
                          affiliationId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                          resprojectid: response project
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for affiliation.  Returns a list of affiliation ids, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-affiliations
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "affiliation"
                    ],
                    "properties": {
                      "affiliation": {
                        "type": "object",
                        "required": [
                          "affiliationId"
                        ],
                        "properties": {
                          "affiliationId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  affiliation:
                    affiliationId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a affiliation
      operationId: POST_projects-projectid-affiliations
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "affiliation"
                  ],
                  "properties": {
                    "affiliation": {
                      "type": "object",
                      "required": [
                        "resprojectid"
                      ],
                      "properties": {
                        "resprojectid": {
                          "type": "string",
                          "format": "uuid",
                        }
                      }
                    }
                  }
                }
              example:
                  affiliation:
                    resprojectid: 34da7333-0592-4fa7-ba79-1fe2dfaaff4e
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/affiliations/{affiliationid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "affiliation"
                    ],
                    "properties": {
                      "affiliation": {
                        "type": "object",
                        "required": [
                          "links",
                          "affiliationId",
                          "resprojectid"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "affiliationId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "resprojectid": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                    affiliation:
                        links:
                        - rel: history
                          href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/affiliations/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/history"
                        affiliationId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                        resprojectid: 34da7333-0592-4fa7-ba79-1fe2dfaaff4e
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a affiliation using a URI resource parameter/ID.
      operationId: GET_projects-projectid-affiliations-affiliationid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific affiliation specified by the URI resource
        parameter/ID.
      operationId: PUT_projects-projectid-affiliations-affiliationid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "affiliation"
                  ],
                  "properties": {
                    "affiliation": {
                      "type": "object",
                      "required": [
                        "resprojectid"
                      ],
                      "properties": {
                        "resprojectid": {
                          "type": "string",
                          "format": "uuid",
                        }
                      }
                    }
                  }
                }
              example:
                  affiliation:
                    resprojectid: 34da7333-0592-4fa7-ba79-1fe2dfaaff4e
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific affiliation specified by the URI resource
        parameter/ID.
      operationId: DELETE_projects-projectid-affiliations-affiliationid
    parameters:
      - name: affiliationid
        in: path
        required: true
        schema:
          type: string
        description: Affiliation Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/affiliations/{affiliationid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "affiliations"
                    ],
                    "properties": {
                      "affiliations": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "affiliations"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "affiliations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "affiliationId",
                                "resprojectid"
                              ],
                              "properties": {
                                "affiliationId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "resprojectid": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    affiliations:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      affiliations:
                        - affiliationId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                          resprojectid: response project
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for affiliation history.  Returns a list of affiliation ids history, based on
        the query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-affiliations-affiliationid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: affiliationid
        in: path
        required: true
        schema:
          type: string
        description: Affiliation Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/funders':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "funders"
                    ],
                    "properties": {
                      "funders": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "funders"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "funders": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "funderId",
                                "funder",
                                "grantid",
                                "enddate",
                                "startdate"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "funderId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "funder": {
                                  "type": "integer"
                                },
                                "grantid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enddate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "startdate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    funders:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      funders:
                        - links:
                          - rel: history
                            href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/funders/8f11979d-8402-49a8-8253-f5f16c57d63f/history"
                          funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                          funder: 8
                          grantid: a2cac563-e852-487b-996d-b1bae8225234
                          enddate: 04-16-2016
                          startdate: 02-04-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for funder.  Returns a list of funder ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-funders
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "funder"
                    ],
                    "properties": {
                      "funder": {
                        "type": "object",
                        "required": [
                          "funderId"
                        ],
                        "properties": {
                          "funderId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  funder:
                    funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a funder
      operationId: POST_projects-projectid-funders
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "funder"
                  ],
                  "properties": {
                    "funder": {
                      "type": "object",
                      "required": [
                        "enddate",
                        "funder",
                        "grantid",
                        "startdate"
                      ],
                      "properties": {
                        "enddate": {
                          "type": "string",
                          "format": MM-dd-YYYY HH:mm,
                        },
                        "funder": {
                          "type": "integer"
                        },
                        "grantid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "startdate": {
                          "type": "string",
                          "format": MM-dd-YYYY HH:mm,
                        }
                      }
                    }
                  }
                }
              example:
                  funder:
                    enddate: '04-16-2016 11:11'
                    funder: 8
                    grantid: a2cac563-e852-487b-996d-b1bae8225234
                    startdate: '02-04-2016 12:12'
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/funders/{funderid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "funder"
                    ],
                    "properties": {
                      "funder": {
                        "type": "object",
                        "required": [
                          "links",
                          "funderId",
                          "funder",
                          "grantid",
                          "enddate",
                          "startdate"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "funderId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "funder": {
                            "type": "integer"
                          },
                          "grantid": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "enddate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "startdate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          }
                        }
                      }
                    }
                  }
                example:
                    funder:
                        links:
                        - rel: history
                          href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/funders/8f11979d-8402-49a8-8253-f5f16c57d63f/history"
                        funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                        funder: 8
                        grantid: a2cac563-e852-487b-996d-b1bae8225234
                        enddate: 04-16-2016
                        startdate: 02-04-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a funder using a URI resource parameter/ID.
      operationId: GET_projects-projectid-funders-funderid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific funder specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid-funders-funderid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "funder"
                  ],
                  "properties": {
                    "funder": {
                      "type": "object",
                      "required": [
                        "enddate",
                        "funder",
                        "grantid",
                        "startdate"
                      ],
                      "properties": {
                        "enddate": {
                          "type": "string",
                          "format": MM-dd-YYYY HH:mm,
                        },
                        "funder": {
                          "type": "integer"
                        },
                        "grantid": {
                          "type": "string",
                          "format": "uuid",
                        },
                        "startdate": {
                          "type": "string",
                          "format": MM-dd-YYYY HH:mm,
                        }
                      }
                    }
                  }
                }
              example:
                  funder:
                    enddate: '04-16-2016 11:11'
                    funder: 8
                    grantid: a2cac563-e852-487b-996d-b1bae8225234
                    startdate: '02-04-2016 12:12'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific funder specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid-funders-funderid
    parameters:
      - name: funderid
        in: path
        required: true
        schema:
          type: string
        description: Funder Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/funders/{funderid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "funders"
                    ],
                    "properties": {
                      "funders": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "funders"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "funders": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "funderId",
                                "funder",
                                "grantid",
                                "enddate",
                                "startdate"
                              ],
                              "properties": {
                                "funderId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "funder": {
                                  "type": "integer"
                                },
                                "grantid": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "enddate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "startdate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    funders:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      funders:
                        - funderId: 8f11979d-8402-49a8-8253-f5f16c57d63f
                          funder: 8
                          grantid: a2cac563-e852-487b-996d-b1bae8225234
                          enddate: 04-16-2016
                          startdate: 02-04-2016
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for funder history.  Returns a list of funder ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-funders-funderid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: funderid
        in: path
        required: true
        schema:
          type: string
        description: Funder Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectcocs"
                    ],
                    "properties": {
                      "projectcocs": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "projectcocs"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "projectcocs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "projectcocId",
                                "coccode"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "projectcocId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "coccode": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    projectcocs:
                      pagination:
                        from: 0
                        returned: 2
                        total: 2
                        maximum: 30
                        sort: {}
                      projectcocs:
                        - links:
                          - rel: history
                            href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/projectcocs/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/history"
                          projectcocId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                          coccode: coc code
                        - links:
                          - rel: history
                            href: "/clients/62caffe5-dd48-4acd-9b48-cadf9a68205c/history"
                          projectcocId: 62caffe5-dd48-4acd-9b48-cadf9a68205c
                          coccode: coc new code
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for projectcoc.  Returns a list of projectcoc ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectcoc"
                    ],
                    "properties": {
                      "projectcoc": {
                        "type": "object",
                        "required": [
                          "projectcocId"
                        ],
                        "properties": {
                          "projectcocId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  projectcoc:
                    projectcocId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a projectcoc
      operationId: POST_projects-projectid-projectcocs
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "projectcoc"
                  ],
                  "properties": {
                    "projectcoc": {
                      "type": "object",
                      "required": [
                        "coccode"
                      ],
                      "properties": {
                        "coccode": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  projectcoc:
                    coccode: coc code
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectcoc"
                    ],
                    "properties": {
                      "projectcoc": {
                        "type": "object",
                        "required": [
                          "links",
                          "projectcocId",
                          "coccode"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "projectcocId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "coccode": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    projectcoc:
                        links:
                        - rel: history
                          href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/projectcocs/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/history"
                        projectcocId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                        coccode: coc code
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a projectcoc using a URI resource parameter/ID.
      operationId: GET_projects-projectid-projectcocs-projectcocid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Updates a specific projectcoc specified by the URI resource
        parameter/ID.
      operationId: PUT_projects-projectid-projectcocs-projectcocid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "projectcoc"
                  ],
                  "properties": {
                    "projectcoc": {
                      "type": "object",
                      "required": [
                        "coccode"
                      ],
                      "properties": {
                        "coccode": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  projectcoc:
                    coccode: coc code
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: >-
        Deletes a specific projectcoc specified by the URI resource
        parameter/ID.
      operationId: DELETE_projects-projectid-projectcocs-projectcocid
    parameters:
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "projectcocs"
                    ],
                    "properties": {
                      "projectcocs": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "projectcocs"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "projectcocs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "projectcocId",
                                "coccode"
                              ],
                              "properties": {
                                "projectcocId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "coccode": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    projectcocs:
                      pagination:
                        from: 0
                        returned: 2
                        total: 2
                        maximum: 30
                        sort: {}
                      projectcocs:
                        - projectcocId: 0dda7333-0592-4fa7-ba79-1fe2dfaaff4e
                          coccode: coc code
                        - projectcocId: 62caffe5-dd48-4acd-9b48-cadf9a68205c
                          coccode: coc new code
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for projectcoc history.  Returns a list of projectcoc ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs-projectcocid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/inventories':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "example"
                    ],
                    "properties": {
                      "example": {
                        "type": "object",
                        "required": [
                          "inventories"
                        ],
                        "properties": {
                          "inventories": {
                            "type": "object",
                            "required": [
                              "pagination",
                              "inventories"
                            ],
                            "properties": {
                              "pagination": {
                                "type": "object",
                                "required": [
                                  "from",
                                  "returned",
                                  "total",
                                  "maximum",
                                  "sort"
                                ],
                                "properties": {
                                  "from": {
                                    "type": "integer"
                                  },
                                  "returned": {
                                    "type": "integer"
                                  },
                                  "total": {
                                    "type": "integer"
                                  },
                                  "maximum": {
                                    "type": "integer"
                                  },
                                  "sort": {
                                    "type": "object"
                                  }
                                }
                              },
                              "inventories": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "links",
                                    "inventoryId",
                                    "availabilty",
                                    "bedtype",
                                    "hmisparticipatingbeds",
                                    "householdtype",
                                    "unitinventory",
                                    "informationDate",
                                    "dataCollectionStage"
                                  ],
                                  "properties": {
                                    "links": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "rel",
                                          "href"
                                        ],
                                        "properties": {
                                          "rel": {
                                            "type": "string",
                                          },
                                          "href": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "inventoryId": {
                                      "type": "string",
                                      "format": "uuid",
                                    },
                                    "availabilty": {
                                      "type": "string",
                                    },
                                    "bedtype": {
                                      "type": "integer"
                                    },
                                    "hmisparticipatingbeds": {
                                      "type": "integer"
                                    },
                                    "householdtype": {
                                      "type": "integer"
                                    },
                                    "unitinventory": {
                                      "type": "integer"
                                    },
                                    "informationDate": {
                                      "type": "string",
                                      "format": "mm-dd-yyyy",
                                    },
                                    "dataCollectionStage": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    inventories:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      inventories:
                        - links:
                          - rel: history
                            href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/projectcocs/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/inventories/9c64f6e4-924b-4b65-af62-11a33cc6090a/history"
                          inventoryId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
                          availabilty: ONE
                          bedtype: 1
                          hmisparticipatingbeds: 1
                          householdtype: 1
                          unitinventory: 123
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for inventory.  Returns a list of inventory ids, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs-projectcocid-inventories
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "inventory"
                    ],
                    "properties": {
                      "inventory": {
                        "type": "object",
                        "required": [
                          "inventoryId"
                        ],
                        "properties": {
                          "inventoryId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  inventory:
                    inventoryId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a inventory
      operationId: POST_projects-projectid-projectcocs-projectcocid-inventories
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "inventory"
                  ],
                  "properties": {
                    "inventory": {
                      "type": "object",
                      "required": [
                        "availabilty",
                        "bedtype",
                        "hmisparticipatingbeds",
                        "householdtype",
                        "unitinventory",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "availabilty": {
                          "type": "string",
                        },
                        "bedtype": {
                          "type": "integer"
                        },
                        "hmisparticipatingbeds": {
                          "type": "integer"
                        },
                        "householdtype": {
                          "type": "integer"
                        },
                        "unitinventory": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  inventory:
                    availabilty: ONE
                    bedtype: 1
                    hmisparticipatingbeds: 1
                    householdtype: 1
                    unitinventory: 123
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/inventories/{inventoryid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "inventory"
                    ],
                    "properties": {
                      "inventory": {
                        "type": "object",
                        "required": [
                          "links",
                          "inventoryId",
                          "availabilty",
                          "bedtype",
                          "hmisparticipatingbeds",
                          "householdtype",
                          "unitinventory",
                          "informationDate",
                          "dataCollectionStage"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "inventoryId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "availabilty": {
                            "type": "string",
                          },
                          "bedtype": {
                            "type": "integer"
                          },
                          "hmisparticipatingbeds": {
                            "type": "integer"
                          },
                          "householdtype": {
                            "type": "integer"
                          },
                          "unitinventory": {
                            "type": "integer"
                          },
                          "informationDate": {
                            "type": "string",
                            "format": "mm-dd-yyyy",
                          },
                          "dataCollectionStage": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                example:
                    inventory:
                        links:
                        - rel: history
                          href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/projectcocs/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/inventories/9c64f6e4-924b-4b65-af62-11a33cc6090a/history"
                        inventoryId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
                        availabilty: ONE
                        bedtype: 1
                        hmisparticipatingbeds: 1
                        householdtype: 1
                        unitinventory: 123
                        informationDate: 03-17-2016
                        dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a inventory using a URI resource parameter/ID.
      operationId: GET_projects-projectid-projectcocs-projectcocid-inventories-inventoryid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific inventory specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid-projectcocs-projectcocid-inventories-inventoryid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "inventory"
                  ],
                  "properties": {
                    "inventory": {
                      "type": "object",
                      "required": [
                        "availabilty",
                        "bedtype",
                        "hmisparticipatingbeds",
                        "householdtype",
                        "unitinventory",
                        "informationDate",
                        "dataCollectionStage"
                      ],
                      "properties": {
                        "availabilty": {
                          "type": "string",
                        },
                        "bedtype": {
                          "type": "integer"
                        },
                        "hmisparticipatingbeds": {
                          "type": "integer"
                        },
                        "householdtype": {
                          "type": "integer"
                        },
                        "unitinventory": {
                          "type": "integer"
                        },
                        "informationDate": {
                          "type": "string",
                          "format": "mm-dd-yyyy",
                        },
                        "dataCollectionStage": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              example:
                  inventory:
                    availabilty: ONE
                    bedtype: 1
                    hmisparticipatingbeds: 1
                    householdtype: 1
                    unitinventory: 123
                    informationDate: 03-17-2016
                    dataCollectionStage: 1
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific inventory specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid-projectcocs-projectcocid-inventories-inventoryid
    parameters:
      - name: inventoryid
        in: path
        required: true
        schema:
          type: string
        description: Inventory Identifier
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/inventories/{inventoryid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "inventories"
                    ],
                    "properties": {
                      "inventories": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "inventories"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "inventories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "inventoryId",
                                "availabilty",
                                "bedtype",
                                "hmisparticipatingbeds",
                                "householdtype",
                                "unitinventory",
                                "informationDate",
                                "dataCollectionStage"
                              ],
                              "properties": {
                                "inventoryId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "availabilty": {
                                  "type": "string",
                                },
                                "bedtype": {
                                  "type": "integer"
                                },
                                "hmisparticipatingbeds": {
                                  "type": "integer"
                                },
                                "householdtype": {
                                  "type": "integer"
                                },
                                "unitinventory": {
                                  "type": "integer"
                                },
                                "informationDate": {
                                  "type": "string",
                                  "format": "mm-dd-yyyy",
                                },
                                "dataCollectionStage": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    inventories:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      inventories:
                        - inventoryId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
                          availabilty: ONE
                          bedtype: 1
                          hmisparticipatingbeds: 1
                          householdtype: 1
                          unitinventory: 123
                          informationDate: 03-17-2016
                          dataCollectionStage: 1
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for inventory history.  Returns a list of inventory ids history, based on the
        query parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs-projectcocid-inventories-inventoryid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: inventoryid
        in: path
        required: true
        schema:
          type: string
        description: Inventory Identifier
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/sites':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "sites"
                    ],
                    "properties": {
                      "sites": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "sites"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "sites": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "siteId",
                                "address",
                                "city",
                                "geocode",
                                "principalsite",
                                "state",
                                "zip"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "siteId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "address": {
                                  "type": "string",
                                },
                                "city": {
                                  "type": "string",
                                },
                                "geocode": {
                                  "type": "integer"
                                },
                                "principalsite": {
                                  "type": "integer"
                                },
                                "state": {
                                  "type": "string",
                                },
                                "zip": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    sites:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      sites:
                        - links:
                          - rel: history
                            href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/projectcocs/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/sites/9c64f6e4-924b-4b65-af62-11a33cc6090a/history"
                          siteId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
                          address: address
                          city: address
                          geocode: 2500
                          principalsite: 0
                          state: AK
                          zip: '1212'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for site.  Returns a list of site ids, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs-projectcocid-sites
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    post:
      responses:
        '201':
          description: OK - New resource has been created.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "site"
                    ],
                    "properties": {
                      "site": {
                        "type": "object",
                        "required": [
                          "siteId"
                        ],
                        "properties": {
                          "siteId": {
                            "type": "string",
                            "format": "uuid",
                          }
                        }
                      }
                    }
                  }
                example:
                  site:
                    siteId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            access is not allowed.
        '404':
          description: Not Found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: Internal Server Error.
      description: |
        Add a site
      operationId: POST_projects-projectid-projectcocs-projectcocid-sites
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "site"
                  ],
                  "properties": {
                    "site": {
                      "type": "object",
                      "required": [
                        "address",
                        "city",
                        "geocode",
                        "principalsite",
                        "state",
                        "zip"
                      ],
                      "properties": {
                        "address": {
                          "type": "string",
                        },
                        "city": {
                          "type": "string",
                        },
                        "geocode": {
                          "type": "integer"
                        },
                        "principalsite": {
                          "type": "integer"
                        },
                        "state": {
                          "type": "string",
                        },
                        "zip": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  site:
                    address: address
                    city: address
                    geocode: 2500
                    principalsite: 0
                    state: AK
                    zip: '1212'
        required: true
    parameters:
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/sites/{siteid}':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "site"
                    ],
                    "properties": {
                      "site": {
                        "type": "object",
                        "required": [
                          "links",
                          "siteId",
                          "address",
                          "city",
                          "geocode",
                          "principalsite",
                          "state",
                          "zip"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "siteId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "address": {
                            "type": "string",
                          },
                          "city": {
                            "type": "string",
                          },
                          "geocode": {
                            "type": "integer"
                          },
                          "principalsite": {
                            "type": "integer"
                          },
                          "state": {
                            "type": "string",
                          },
                          "zip": {
                            "type": "string",
                          }
                        }
                      }
                    }
                  }
                example:
                    site:
                        links:
                        - rel: history
                          href: "/projects/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/projectcocs/0dda7333-0592-4fa7-ba79-1fe2dfaaff4e/sites/9c64f6e4-924b-4b65-af62-11a33cc6090a/history"
                        siteId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
                        address: address
                        city: address
                        geocode: 2500
                        principalsite: 0
                        state: AK
                        zip: '1212'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires an user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: Gets a site using a URI resource parameter/ID.
      operationId: GET_projects-projectid-projectcocs-projectcocid-sites-siteid
    put:
      responses:
        '200':
          description: OK – Everything is working.
        '304':
          description: Not Modified – The client can use cached data.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires a user.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Updates a specific site specified by the URI resource parameter/ID.
      operationId: PUT_projects-projectid-projectcocs-projectcocid-sites-siteid
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "site"
                  ],
                  "properties": {
                    "site": {
                      "type": "object",
                      "required": [
                        "address",
                        "city",
                        "geocode",
                        "principalsite",
                        "state",
                        "zip"
                      ],
                      "properties": {
                        "address": {
                          "type": "string",
                        },
                        "city": {
                          "type": "string",
                        },
                        "geocode": {
                          "type": "integer"
                        },
                        "principalsite": {
                          "type": "integer"
                        },
                        "state": {
                          "type": "string",
                        },
                        "zip": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                  site:
                    address: address
                    city: address
                    geocode: 2500
                    principalsite: 0
                    state: AK
                    zip: '1212'
        required: true
    delete:
      responses:
        '204':
          description: OK – The resource was successfully deleted.
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error.
      description: Deletes a specific site specified by the URI resource parameter/ID.
      operationId: DELETE_projects-projectid-projectcocs-projectcocid-sites-siteid
    parameters:
      - name: siteid
        in: path
        required: true
        schema:
          type: string
        description: Site Identifier
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/projects/{projectid}/projectcocs/{projectcocid}/sites/{siteid}/history':
    get:
      responses:
        '200':
          description: OK – Everything is working.
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "sites"
                    ],
                    "properties": {
                      "sites": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "sites"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "sites": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "siteId",
                                "address",
                                "city",
                                "geocode",
                                "principalsite",
                                "state",
                                "zip"
                              ],
                              "properties": {
                                "siteId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "address": {
                                  "type": "string",
                                },
                                "city": {
                                  "type": "string",
                                },
                                "geocode": {
                                  "type": "integer"
                                },
                                "principalsite": {
                                  "type": "integer"
                                },
                                "state": {
                                  "type": "string",
                                },
                                "zip": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    sites:
                      pagination:
                        from: 0
                        returned: 1
                        total: 1
                        maximum: 30
                        sort: {}
                      sites:
                        - siteId: 9c64f6e4-924b-4b65-af62-11a33cc6090a
                          address: address
                          city: address
                          geocode: 2500
                          principalsite: 0
                          state: AK
                          zip: '1212'
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: >-
            Forbidden – The server understood the request, but is refusing it or
            the access is not allowed.
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: Internal Server Error
      description: >-
        Searches for site history.  Returns a list of site ids history, based on the query
        parameters sent.  The query parameters are cumulative, so each
        additional query parameter narrows the search down further.
      operationId: GET_projects-projectid-projectcocs-projectcocid-sites-siteid-history
      parameters:
        - name: startIndex
          in: query
          required: true
          description: >-
            start index

          schema:
            type: string
        - name: maxItems
          in: query
          required: true
          description: >-
            Max items in response

          schema:
            type: string
    parameters:
      - name: siteid
        in: path
        required: true
        schema:
          type: string
        description: Site Identifier
      - name: projectcocid
        in: path
        required: true
        schema:
          type: string
        description: Projectcoc Identifier
      - name: projectid
        in: path
        required: true
        schema:
          type: string
        description: Project Identifier
  '/search/{searchentity}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "searchResults"
                    ],
                    "properties": {
                      "searchResults": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "items"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "total",
                              "from",
                              "maximum",
                              "returned"
                            ],
                            "properties": {
                              "total": {
                                "type": "string",
                              },
                              "from": {
                                "type": "string",
                              },
                              "maximum": {
                                "type": "string",
                              },
                              "returned": {
                                "type": "string",
                              }
                            }
                          },
                          "items": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "clientId",
                                "firstName",
                                "middleName",
                                "lastName",
                                "nameSuffix",
                                "nameDataQuality",
                                "ssn",
                                "ssnDataQuality",
                                "dob",
                                "dobDataQuality",
                                "race",
                                "ethnicity",
                                "gender",
                                "otherGender",
                                "veteranStatus",
                                "link"
                              ],
                              "properties": {
                                "clientId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "firstName": {
                                  "type": "string",
                                },
                                "middleName": {
                                  "type": "string",
                                },
                                "lastName": {
                                  "type": "string",
                                },
                                "nameSuffix": {
                                  "type": "string",
                                },
                                "nameDataQuality": {
                                  "type": "string",
                                },
                                "ssn": {
                                  "type": "string",
                                },
                                "ssnDataQuality": {
                                  "type": "string",
                                },
                                "dob": {
                                  "type": "string",
                                },
                                "dobDataQuality": {
                                  "type": "string",
                                },
                                "race": {
                                  "type": "string",
                                },
                                "ethnicity": {
                                  "type": "string",
                                },
                                "gender": {
                                  "type": "string",
                                },
                                "otherGender": {
                                  "type": "string",
                                },
                                "veteranStatus": {
                                  "type": "string",
                                },
                                "link": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  searchResults:
                    pagination:
                      total: '2'
                      from: '0'
                      maximum: '50'
                      returned: '2'
                    items:
                      - clientId: 65e3df62-dd22-4d07-83ef-6858a6322839
                        firstName: Eric
                        middleName: Eric
                        lastName: Eric
                        nameSuffix: 'NS '
                        nameDataQuality: '1'
                        ssn: 'ssn '
                        ssnDataQuality: '1'
                        dob: '1459498034983'
                        dobDataQuality: '1'
                        race: '1'
                        ethnicity: '1'
                        gender: '1'
                        otherGender: Test
                        veteranStatus: '8'
                        link: >-
                          /hmis-clientapi/rest/v2015/clients/65e3df62-dd22-4d07-83ef-6858a6322839
                      - clientId: cf98b9b2-9a77-4133-99a3-b60f05a12ad1
                        firstName: Eric
                        middleName: Eric
                        lastName: Eric
                        nameSuffix: 'NS '
                        nameDataQuality: '1'
                        ssn: 'ssn '
                        ssnDataQuality: '1'
                        dob: '1459498034983'
                        dobDataQuality: '1'
                        race: '1'
                        ethnicity: '1'
                        gender: '1'
                        otherGender: Test
                        veteranStatus: '8'
                        link: >-
                          /hmis-clientapi/rest/v2014/clients/cf98b9b2-9a77-4133-99a3-b60f05a12ad1
      operationId: GET_search-searchentity
      parameters:
        - name: q
          in: query
          required: true
          description: >
            The search keywords, as well as any qualifiers. Currently supported
            search fields are first name,middle name,last name,dob,source system
            id and ssn. For search on "date of birth" field the format
            MM-dd-YYYY should be used for the search keyword.
          schema:
            type: string
        - name: sort
          in: query
          required: true
          description: The sort field. Default- results are sorted by "created date".
          schema:
            type: string
        - name: order
          in: query
          required: true
          description: >-
            The sort order if sort parameter is provided. One of asc or desc.
            Default- desc.
          schema:
            default: desc
            type: string
        - name: startIndex
          in: query
          required: true
          description: >-
            The start Index from where the search results should be returned.
            Default - 0
          schema:
            default: 0
            type: integer
        - name: maxItems
          in: query
          required: true
          description: >-
            the number or Items that should be included in the results . Default
            - 50
          schema:
            default: 50
            type: integer
        - name: exclude
          in: query
          required: true
          description: >
            Excludes fields from the search.  Currently its only supported value
            is "ssi" (to exclude source system id) only.
          schema:
            type: string
    parameters:
      - name: searchentity
        in: path
        required: true
        schema:
          type: string
  /dataelements:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dataElements"
                    ],
                    "properties": {
                      "dataElements": {
                        "type": "object",
                        "required": [
                          "dataElements"
                        ],
                        "properties": {
                          "dataElements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  dataElements:
                    dataElements:
                      - name: trackingmethod
                      - name: afghanistan_oef
                      - name: projectcompletionstatus
                      - name: nohivaidsassistancereason
                      - name: not_employed_reason
                      - name: noemployerprovidedreason
                      - name: novamedreason
                      - name: health_category
                      - name: employment_type
                      - name: lastgradecompleted
                      - name: referraloutcome
                      - name: housingstatus
                      - name: monthsHomelessThisTime
                      - name: pathsmiinformation
                      - name: timesHomelesspastthreeyears
                      - name: targetpopulation
                      - name: nostatehealthinsreason
                      - name: incarceratedparentstatus
                      - name: youth_age_group
                      - name: juvenilejusticeyears
                      - name: subsidyinformation
                      - name: whenoccurred
                      - name: nomedicaidreason
                      - name: monthsHomelessPastThreeYears
                      - name: sexualorientation
                      - name: childwelfareyears
                      - name: nocobrareason
                      - name: discharge_status
                      - name: gender
                      - name: availabilty
                      - name: military_branch
                      - name: referralsource
                      - name: noprivatepayreason
                      - name: householdtype
                      - name: pathhowconfirmed
                      - name: reason_no_services
                      - name: name_data_quality
                      - name: countofexchangeforsex
                      - name: askedorforcedtoexchangeforsex
                      - name: residencepriorlengthofstay
                      - name: dob_data_quality
                      - name: destination
                      - name: projecttype
                      - name: assessmentdisposition
                      - name: earlyexitreason
                      - name: reason_not_enrolled
                      - name: bedtype
                      - name: veteran_status
                      - name: funder
                      - name: relationshiptohoh
                      - name: health_status
                      - name: ethnicity
                      - name: noschipreason
                      - name: address_data_quality
                      - name: disabilitytype
                      - name: nomedicarereason
                      - name: housingassessment
                      - name: residencePrior
                      - name: ssn_data_quality
                      - name: noadapreason
                      - name: race
      operationId: GET_dataelements
  '/dataelements/{name}/values':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "dataElements"
                    ],
                    "properties": {
                      "dataElements": {
                        "type": "object",
                        "required": [
                          "dataElements"
                        ],
                        "properties": {
                          "dataElements": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "value",
                                "description"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                },
                                "value": {
                                  "type": "string",
                                },
                                "description": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  dataElements:
                    dataElements:
                      - name: address_data_quality
                        value: '1'
                        description: Full address reported
                      - name: address_data_quality
                        value: '2'
                        description: Incomplete or estimated address reported
                      - name: address_data_quality
                        value: '8'
                        description: Client doesn't know
                      - name: address_data_quality
                        value: '9'
                        description: Client refused
                      - name: address_data_quality
                        value: '99'
                        description: Data not collected
      operationId: GET_dataelements-name-values
    parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
  /questions:
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "questions"
                    ],
                    "properties": {
                      "questions": {
                        "type": "object",
                        "required": [
                          "pagination",
                          "questions"
                        ],
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "required": [
                              "from",
                              "returned",
                              "total",
                              "maximum",
                              "sort"
                            ],
                            "properties": {
                              "from": {
                                "type": "integer"
                              },
                              "returned": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              },
                              "maximum": {
                                "type": "integer"
                              },
                              "sort": {
                                "type": "object"
                              }
                            }
                          },
                          "questions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "questionId",
                                "questionDescription",
                                "displayText",
                                "questionDataType",
                                "questionType",
                                "picklistGroupName",
                                "hudQuestionId",
                                "links"
                              ],
                              "properties": {
                                "questionId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "questionDescription": {
                                  "type": "string",
                                },
                                "displayText": {
                                  "type": "string",
                                },
                                "questionDataType": {
                                  "type": "string",
                                },
                                "questionType": {
                                  "type": "string",
                                },
                                "picklistGroupName": {
                                  "type": "string",
                                },
                                "hudQuestionId": {
                                  "type": "string",
                                },
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  questions:
                    pagination:
                      from: 0
                      returned: 1
                      total: 2
                      maximum: 200
                      sort: {}
                    questions:
                      - questionId: 273ec115-4a6a-4919-84e3-b8a0515fd2a7
                        questionDescription: >-
                          How long has it been since you lived in permanent
                          stable housing?
                        displayText: >-
                          2. How long has it been since you lived in permanent
                          stable housing ?
                        questionDataType: STRING
                        questionType: TEXT
                        picklistGroupName: housingstatus
                        hudQuestionId: '2'
                        links:
                          - rel: pickList
                            href: >-
                              /hmis-clientapi/rest/v2014/hmistypes/housingstatus/values
                          - rel: updateUriTemplate
                            href: '/v2014/clients/{clientid}/enrollments'
      operationId: GET_questions
      parameters:
        - name: text
          in: query
          description: filter on actual question text ( displayText )
          schema:
            type: string
  '/questions/{hudquestionid}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "question"
                    ],
                    "properties": {
                      "question": {
                        "type": "object",
                        "required": [
                          "questionId",
                          "questionDescription",
                          "displayText",
                          "questionDataType",
                          "questionType",
                          "picklistGroupName",
                          "hudQuestionId",
                          "links"
                        ],
                        "properties": {
                          "questionId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "questionDescription": {
                            "type": "string",
                          },
                          "displayText": {
                            "type": "string",
                          },
                          "questionDataType": {
                            "type": "string",
                          },
                          "questionType": {
                            "type": "string",
                          },
                          "picklistGroupName": {
                            "type": "string",
                          },
                          "hudQuestionId": {
                            "type": "string",
                          },
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                  question:
                    questionId: 273ec115-4a6a-4919-84e3-b8a0515fd2a7
                    questionDescription: >-
                      How long has it been since you lived in permanent stable
                      housing?
                    displayText: >-
                      2. How long has it been since you lived in permanent
                      stable housing ?
                    questionDataType: STRING
                    questionType: TEXT
                    picklistGroupName: housingstatus
                    hudQuestionId: '2'
                    links:
                      - rel: pickList
                        href: >-
                          /hmis-clientapi/rest/v2014/hmistypes/housingstatus/values
                      - rel: updateUriTemplate
                        href: '/v2014/clients/{clientid}/enrollments'
      operationId: GET_questions-hudQuestionId
    parameters:
      - name: hudquestionid
        in: path
        required: true
        schema:
          type: string
  /hmishouseholds:
    post:
      description: Create a house hold
      operationId: POST_hmis_household
      requestBody:
        required: true
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "hmisHousehold"
                  ],
                  "properties": {
                    "hmisHousehold": {
                      "type": "object",
                      "required": [
                        "headOfHouseHold"
                      ],
                      "properties": {
                        "headOfHouseHold": {
                          "type": "object",
                          "required": [
                            "clientId"
                          ],
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "format": "uuid",
                            }
                          }
                        }
                      }
                    }
                  }
                }
              example:
                hmisHousehold:
                  headOfHouseHold:
                    clientId: eac0fc00-f727-11e6-bdda-06c37be0e663
      responses:
        '200':
          description: Success
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "hmisHousehold"
                    ],
                    "properties": {
                      "hmisHousehold": {
                        "type": "object",
                        "required": [
                          "houseHoldId",
                          "houseHoldMembers"
                        ],
                        "properties": {
                          "houseHoldId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "houseHoldMembers": {
                            "type": "array"
                          }
                        }
                      }
                    }
                  }
                example:
                    hmisHousehold:
                      houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
                      houseHoldMembers: []
    get:
      responses:
        '200':
          description: Success
          content:
            application/json:
                schema:
                        {
                          "type": "object",
                          "properties": {
                            "hmisHouseholds": {
                              "type": "object",
                              "properties": {
                                "pagination": {
                                  "type": "object",
                                  "properties": {
                                    "from": {
                                      "type": "integer"
                                    },
                                    "returned": {
                                      "type": "integer"
                                    },
                                    "total": {
                                      "type": "integer"
                                    },
                                    "maximum": {
                                      "type": "integer"
                                    },
                                    "sort": {
                                      "type": "object"
                                    }
                                  }
                                },
                                "hmisHouseholds": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "links": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "rel": {
                                              "type": "string",
                                              "pattern": "^(.*)$"
                                            },
                                            "href": {
                                              "type": "string",
                                              "pattern": "^(.*)$"
                                            }
                                          }
                                        }
                                      },
                                      "houseHoldId": {
                                        "type": "string",
                                        "format": "uuid"
                                      },
                                      "headOfHouseHold": {
                                        "type": "object",
                                        "properties": {
                                          "links": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "rel": {
                                                  "type": "string"
                                                },
                                                "href": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          },
                                          "clientId": {
                                            "type": "string",
                                            "format": "uuid"
                                          },
                                          "dedupClientId": {
                                            "type": "string",
                                            "format": "uuid"
                                          },
                                          "firstName": {
                                            "type": "string"
                                          },
                                          "middleName": {
                                            "type": "string"
                                          },
                                          "lastName": {
                                            "type": "string"
                                          },
                                          "nameSuffix": {
                                            "type": "string"
                                          },
                                          "nameDataQuality": {
                                            "type": "integer"
                                          },
                                          "ssn": {
                                            "type": "string"
                                          },
                                          "ssnDataQuality": {
                                            "type": "integer"
                                          },
                                          "dob": {
                                            "type": "integer"
                                          },
                                          "dobDataQuality": {
                                            "type": "integer"
                                          },
                                          "race": {
                                            "type": "integer"
                                          },
                                          "ethnicity": {
                                            "type": "integer"
                                          },
                                          "gender": {
                                            "type": "integer"
                                          }
                                        }
                                      },
                                      "houseHoldMembers": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "links": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "rel": {
                                                    "type": "string"
                                                  },
                                                  "href": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            },
                                            "houseHoldMemberId": {
                                              "type": "string",
                                            },
                                            "member": {
                                              "type": "object",
                                              "properties": {
                                                "links": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "rel": {
                                                        "type":                              "string"
                                                      },
                                                      "href": {
                                                        "type": "string"
                                                      }
                                                    }
                                                  }
                                                },
                                                "clientId": {
                                                  "type": "string",
                                                  "format":"uuid"
                                                },
                                                "dedupClientId": {
                                                  "type": "string",
                                                  "format":"uuid"
                                                },
                                                "firstName": {
                                                  "type": "string"
                                                },
                                                "middleName": {
                                                  "type": "string"
                                                },
                                                "lastName": {
                                                  "type": "string"
                                                },
                                                "nameSuffix": {
                                                  "type": "string"
                                                },
                                                "nameDataQuality": {
                                                  "type": "integer"
                                                },
                                                "ssn": {
                                                  "type": "string"
                                                },
                                                "ssnDataQuality": {
                                                  "type": "integer"
                                                },
                                                "dob": {
                                                  "type": "integer"
                                                },
                                                "dobDataQuality": {
                                                  "type": "integer"
                                                },
                                                "race": {
                                                  "type": "integer"
                                                },
                                                "ethnicity": {
                                                  "type": "integer"
                                                },
                                                "gender": {
                                                  "type": "integer"
                                                }
                                              }
                                            },
                                            "houseHoldId": {
                                              "type": "string",
                                              "format":"uuid"
                                            },
                                            "relationWithHouseHold": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                example:
                    hmisHouseholds:
                      pagination:
                        from: 0
                        returned: 1
                        total: 2
                        maximum: 30
                        sort: {}
                      hmisHouseholds:
                      - links:
                        - rel: enrollments
                          href: "/hmis-clientapi/rest/v2014/clients/ed0c2e27-d019-46f3-80ee-4e5c8bd0af84/enrollments"
                        houseHoldId: ed0c2e27-d019-46f3-80ee-4e5c8bd0af84
                        headOfHouseHold:
                          links:
                          - rel: history
                            href: "/client/ed0c2e27-d019-46f3-80ee-4e5c8bd0af84/history"
                          clientId: ed0c2e27-d019-46f3-80ee-4e5c8bd0af84
                          dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                          firstName: Jeanette_1577809805634
                          middleName: ''
                          lastName: Gonzales
                          nameSuffix: ''
                          nameDataQuality: 99
                          ssn: 556-55-2266
                          ssnDataQuality: 1
                          dob: 259977600000
                          dobDataQuality: 1
                          race: 5
                          ethnicity: 0
                          gender: 0
                        houseHoldMembers:
                        - links:
                          - rel: enrollments
                            href: "/hmis-clientapi/rest/v2014/clients/9c7853d0-4749-490c-8b72-aa880355ec3f/enrollments"
                          houseHoldMemberId: d6bcdf5b-2f99-4ccc-8f92-8c33c9a2674f
                          member:
                            links:
                            - rel: history
                              href: "/client/9c7853d0-4749-490c-8b72-aa880355ec3f/history"
                            clientId: 9c7853d0-4749-490c-8b72-aa880355ec3f
                            dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                            firstName: Jeanette_1577809805634
                            middleName: ''
                            lastName: Gonzales
                            nameSuffix: ''
                            nameDataQuality: 99
                            ssn: 556-55-2266
                            ssnDataQuality: 1
                            dob: 259977600000
                            dobDataQuality: 1
                            race: 5
                            ethnicity: 0
                            gender: 0
                          houseHoldId: faaf6863-c426-42f6-ae26-f7105b285f0c
                          relationWithHouseHold: father

      description: Get all households
      operationId: GET_house_holds
  '/hmishouseholds/{householdid}':
    get:
      responses:
        '200':
          description: ''
          content:
            application/json:
                schema:
                  {
                    "type": "object",
                    "required": [
                      "hmisHousehold"
                    ],
                    "properties": {
                      "hmisHousehold": {
                        "type": "object",
                        "required": [
                          "links",
                          "houseHoldId",
                          "headOfHouseHold",
                          "houseHoldMembers"
                        ],
                        "properties": {
                          "links": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "rel",
                                "href"
                              ],
                              "properties": {
                                "rel": {
                                  "type": "string",
                                },
                                "href": {
                                  "type": "string",
                                }
                              }
                            }
                          },
                          "houseHoldId": {
                            "type": "string",
                            "format": "uuid",
                          },
                          "headOfHouseHold": {
                            "type": "object",
                            "required": [
                              "links",
                              "clientId",
                              "dedupClientId",
                              "firstName",
                              "middleName",
                              "lastName",
                              "nameSuffix",
                              "nameDataQuality",
                              "ssn",
                              "ssnDataQuality",
                              "dob",
                              "dobDataQuality",
                              "race",
                              "ethnicity",
                              "gender"
                            ],
                            "properties": {
                              "links": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "rel",
                                    "href"
                                  ],
                                  "properties": {
                                    "rel": {
                                      "type": "string",
                                    },
                                    "href": {
                                      "type": "string",
                                    }
                                  }
                                }
                              },
                              "clientId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "dedupClientId": {
                                "type": "string",
                                "format": "uuid",
                              },
                              "firstName": {
                                "type": "string",
                              },
                              "middleName": {
                                "type": "string",
                              },
                              "lastName": {
                                "type": "string",
                              },
                              "nameSuffix": {
                                "type": "string",
                              },
                              "nameDataQuality": {
                                "type": "integer"
                              },
                              "ssn": {
                                "type": "string",
                              },
                              "ssnDataQuality": {
                                "type": "integer"
                              },
                              "dob": {
                                "type": "integer"
                              },
                              "dobDataQuality": {
                                "type": "integer"
                              },
                              "race": {
                                "type": "integer"
                              },
                              "ethnicity": {
                                "type": "integer"
                              },
                              "gender": {
                                "type": "integer"
                              }
                            }
                          },
                          "houseHoldMembers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "links",
                                "houseHoldMemberId",
                                "member",
                                "relationWithHouseHold",
                                "houseHoldId"
                              ],
                              "properties": {
                                "links": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "rel",
                                      "href"
                                    ],
                                    "properties": {
                                      "rel": {
                                        "type": "string",
                                      },
                                      "href": {
                                        "type": "string",
                                      }
                                    }
                                  }
                                },
                                "houseHoldMemberId": {
                                  "type": "string",
                                  "format": "uuid",
                                },
                                "member": {
                                  "type": "object",
                                  "required": [
                                    "links",
                                    "clientId",
                                    "dedupClientId",
                                    "firstName",
                                    "middleName",
                                    "lastName",
                                    "nameSuffix",
                                    "nameDataQuality",
                                    "ssn",
                                    "ssnDataQuality",
                                    "dob",
                                    "dobDataQuality",
                                    "race",
                                    "ethnicity",
                                    "gender"
                                  ],
                                  "properties": {
                                    "links": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "rel",
                                          "href"
                                        ],
                                        "properties": {
                                          "rel": {
                                            "type": "string",
                                          },
                                          "href": {
                                            "type": "string",
                                          }
                                        }
                                      }
                                    },
                                    "clientId": {
                                      "type": "string",
                                      "format": "uuid",
                                    },
                                    "dedupClientId": {
                                      "type": "string",
                                      "format": "uuid",
                                    },
                                    "firstName": {
                                      "type": "string",
                                    },
                                    "middleName": {
                                      "type": "string",
                                    },
                                    "lastName": {
                                      "type": "string",
                                    },
                                    "nameSuffix": {
                                      "type": "string",
                                    },
                                    "nameDataQuality": {
                                      "type": "integer"
                                    },
                                    "ssn": {
                                      "type": "string",
                                    },
                                    "ssnDataQuality": {
                                      "type": "integer"
                                    },
                                    "dob": {
                                      "type": "integer"
                                    },
                                    "dobDataQuality": {
                                      "type": "integer"
                                    },
                                    "race": {
                                      "type": "integer"
                                    },
                                    "ethnicity": {
                                      "type": "integer"
                                    },
                                    "gender": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "relationWithHouseHold": {
                                  "type": "string",
                                },
                                "houseHoldId": {
                                  "type": "string",
                                  "format": "uuid",
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                example:
                    hmisHousehold:
                      links:
                      - rel: enrollments
                        href: "/hmis-clientapi/rest/v2014/clients/fd3bd080-8243-438d-bb3c-430097a6b7a3/enrollments"
                      houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
                      headOfHouseHold:
                        links:
                        - rel: history
                          href: "/client/fd3bd080-8243-438d-bb3c-430097a6b7a3/history"
                        clientId: fd3bd080-8243-438d-bb3c-430097a6b7a3
                        dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                        firstName: Jeanette_1577805760728
                        middleName: ''
                        lastName: Gonzales
                        nameSuffix: ''
                        nameDataQuality: 99
                        ssn: 556-55-2266
                        ssnDataQuality: 1
                        dob: 259977600000
                        dobDataQuality: 1
                        race: 5
                        ethnicity: 0
                        gender: 0
                      houseHoldMembers:
                      - links:
                        - rel: enrollments
                          href: "/hmis-clientapi/rest/v2014/clients/6e6ab7f1-e8fe-4784-93c4-248d97a17ef0/enrollments"
                        houseHoldMemberId: b3053a0c-1562-470c-a9c9-c28c9e9ee701
                        member:
                          links:
                          - rel: history
                            href: "/client/6e6ab7f1-e8fe-4784-93c4-248d97a17ef0/history"
                          clientId: 6e6ab7f1-e8fe-4784-93c4-248d97a17ef0
                          dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                          firstName: Jeanette_1577805760728
                          middleName: ''
                          lastName: Gonzales
                          nameSuffix: ''
                          nameDataQuality: 99
                          ssn: 556-55-2266
                          ssnDataQuality: 1
                          dob: 259977600000
                          dobDataQuality: 1
                          race: 5
                          ethnicity: 0
                          gender: 0
                        relationWithHouseHold: mother
                        houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
                      - links:
                        - rel: enrollments
                          href: "/hmis-clientapi/rest/v2014/clients/174660d8-c1de-49cc-9bd6-788f099d38fc/enrollments"
                        houseHoldMemberId: 068824d0-735d-41e0-abb1-eb34826a4024
                        member:
                          links:
                          - rel: history
                            href: "/client/174660d8-c1de-49cc-9bd6-788f099d38fc/history"
                          clientId: 174660d8-c1de-49cc-9bd6-788f099d38fc
                          dedupClientId: eac0fc00-f727-11e6-bdda-06c37be0e663
                          firstName: Jeanette_1577805760728
                          middleName: ''
                          lastName: Gonzales
                          nameSuffix: ''
                          nameDataQuality: 99
                          ssn: 556-55-2266
                          ssnDataQuality: 1
                          dob: 259977600000
                          dobDataQuality: 1
                          race: 5
                          ethnicity: 0
                          gender: 0
                        relationWithHouseHold: mother
                        houseHoldId: 54fbbff7-24a3-489e-bc70-eda3ae6f273f
      description: Get selected household
      operationId: GET_household_by_id
    parameters:
      - name: householdid
        in: path
        required: true
        schema:
          type: string
  '/hmishouseholds/{householdid}/members':
    put:
      responses:
        '200':
          description: ''
      description: Add member to selected household
      operationId: PUT_member_household
      requestBody:
        content:
          application/json:
              schema:
                {
                  "type": "object",
                  "required": [
                    "houseHoldMember"
                  ],
                  "properties": {
                    "houseHoldMember": {
                      "type": "object",
                      "required": [
                        "member",
                        "relationWithHouseHold"
                      ],
                      "properties": {
                        "member": {
                          "type": "object",
                          "required": [
                            "clientId"
                          ],
                          "properties": {
                            "clientId": {
                              "type": "string",
                              "format": "uuid",
                            }
                          }
                        },
                        "relationWithHouseHold": {
                          "type": "string",
                        }
                      }
                    }
                  }
                }
              example:
                    houseHoldMember:
                      member:
                        clientId: 34a6fcd7-9626-46cd-a79a-fe740ce57826
                      relationWithHouseHold: father
        required: true
    parameters:
      - name: householdid
        in: path
        required: true
        schema:
          type: string
  '/hmishouseholds/{householdid}/members/{memberid}':
    delete:
      responses:
        '200':
          description: ''
      description: Remove member from selected house hold based on member clientid
      operationId: DELETE_member_house_hold
    parameters:
      - name: householdid
        in: path
        required: true
        schema:
          type: string
      - name: memberid
        in: path
        required: true
        schema:
          type: string
