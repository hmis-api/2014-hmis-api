#%RAML 1.0
# license: https://creativecommons.org/publicdomain/zero/1.0/
#baseUri: http://examplehmis.com/{version}
#baseUri: http://mocksvc.mulesoft.com/mocks/ce8f5253-0423-4d20-9364-98b1c088bae7/{version}
baseUri: https://www.hmislynk.com/hmis-clientapi/rest
mediaType: application/json
securedBy: [oauth_2_0]
title: 2014 HMIS
version: 1.0.0
protocols:
  -  HTTPS
schemas:
  - affiliation_id_json: !include schemas/affiliation_id_json.json
  - affiliation_json: !include schemas/affiliation_json.json
  - affiliation_ids_json: !include schemas/affiliation_ids_json.json
  - client_id_json: !include schemas/client_id_json.json
  - client_ids_json: !include schemas/client_ids_json.json
  - client_json: !include schemas/client_json.json
  - clients_json: !include schemas/clients_json.json
  - commercialSexualExploitation_id_json: !include schemas/commercialSexualExploitation_id_json.json
  - commercialSexualExploitation_json: !include schemas/commercialSexualExploitation_json.json
  - commercialSexualExploitation_ids_json: !include schemas/commercialSexualExploitation_ids_json.json
  - connection_with_soar_id_json: !include schemas/connection_with_soar_id_json.json
  - connection_with_soar_json: !include schemas/connection_with_soar_json.json
  - connection_with_soar_ids_json: !include schemas/connection_with_soar_ids_json.json
  - dateOfEngagement_id_json: !include schemas/dateOfEngagement_id_json.json
  - dateOfEngagement_json: !include schemas/dateOfEngagement_json.json
  - dateOfEngagement_ids_json: !include schemas/dateOfEngagement_ids_json.json
  - disabilities_id_json: !include schemas/disabilities_id_json.json
  - disabilities_ids_json: !include schemas/disabilities_ids_json.json
  - disabilities_json: !include schemas/disabilities_json.json
  - disabilitieses_json: !include schemas/disabilitieses_json.json
  - domesticViolence_id_json: !include schemas/domesticViolence_id_json.json
  - domesticViolence_json: !include schemas/domesticViolence_json.json
  - domesticViolences_ids_json: !include schemas/domesticViolences_ids_json.json
  - domesticViolences_json: !include schemas/domesticViolences_json.json
  - employment_id_json: !include schemas/employment_id_json.json
  - employment_json : !include schemas/employment_json.json
  - employments_json: !include schemas/employments_json.json
  - employment_ids_json: !include schemas/employment_ids_json.json
  - enrollment_coc_id_json: !include schemas/enrollment_coc_id_json.json
  - enrollment_coc_json: !include schemas/enrollment_coc_json.json
  - enrollment_id_json: !include schemas/enrollment_id_json.json
  - enrollment_ids_json: !include schemas/enrollment_ids_json.json
  - enrollment_json: !include schemas/enrollment_json.json
  - enrollments_json: !include schemas/enrollments_json.json
  - exit_id_json: !include schemas/exit_id_json.json
  - exit_ids_json: !include schemas/exit_ids_json.json
  - exits_json: !include schemas/exit_json.json
  - funder_id_json: !include schemas/funder_id_json.json
  - funder_ids_json: !include schemas/funder_ids_json.json
  - funder_json: !include schemas/funder_json.json
  - organization_id_json: !include schemas/organization_id_json.json
  - organization_ids_json: !include schemas/organization_ids_json.json
  - organization_json: !include schemas/organization_json.json
  - healthInsurance_ids_json: !include schemas/healthInsurance_ids_json.json
  - healthInsurance_id_json: !include schemas/healthInsurance_id_json.json
  - healthInsurance_json: !include schemas/healthInsurance_json.json
  - healthStatus_ids_json: !include schemas/healthStatus_ids_json.json
  - healthStatus_id_json: !include schemas/healthStatus_id_json.json
  - healthStatus_json: !include schemas/healthStatus_json.json
  - income_and_source_ids_json: !include schemas/income_and_source_ids_json.json
  - incomeAndSource_id_json: !include schemas/incomeAndSource_id_json.json
  - incomeAndSource_json: !include schemas/incomeAndSource_json.json
  - inventory_id_json: !include schemas/inventory_id_json.json
  - inventory_ids_json: !include schemas/inventory_ids_json.json
  - inventory_json : !include schemas/inventory_json.json
  - lastPermanentAddress_ids_json: !include schemas/lastPermanentAddress_ids_json.json
  - lastPermanentAddress_json: !include schemas/lastPermanentAddress_json.json
  - lastPermanentAddress_id_json: !include schemas/lastPermanentAddress_id_json.json
  - medicalAssistance_ids_json: !include schemas/medicalAssistance_ids_json.json
  - medicalAssistance_id_json: !include schemas/medicalAssistance_id_json.json
  - medicalAssistance_json: !include schemas/medicalAssistance_json.json
  - nonCashBenefit_ids_json: !include schemas/nonCashBenefit_ids_json.json
  - nonCashBenefit_id_json: !include schemas/nonCashBenefit_id_json.json
  - nonCashBenefit_json: !include schemas/nonCashBenefit_json.json
  - path_status_ids_json: !include schemas/path_status_ids_json.json
  - percent_ami_ids_json: !include schemas/percent_ami_ids_json.json
  - project_coc_id_json: !include schemas/project_coc_id_json.json
  - project_coc_ids_json: !include schemas/project_coc_ids_json.json
  - project_coc_json: !include schemas/project_coc_json.json
  - referralSources_ids_json: !include schemas/referralSources_ids_json.json
  - referralSource_id_json: !include schemas/referralSource_id_json.json
  - referralSources_json: !include schemas/referralSources_json.json
  - residentialMoveIn_ids_json: !include schemas/residentialMoveIn_ids_json.json
  - residentialMoveIn_json: !include schemas/residentialMoveIn_json.json
  - residentialMoveIn_id_json: !include schemas/residentialMoveIn_id_json.json
  - rhybcpStatus_ids_json: !include schemas/rhybcpStatus_ids_json.json
  - rhybcpStatus_id_json: !include schemas/rhybcpStatus_id_json.json
  - schoolStatus_ids_json: !include schemas/schoolStatus_ids_json.json
  - schoolStatus_id_json: !include schemas/schoolStatus_id_json.json
  - service_ids_json: !include schemas/service_ids_json.json
  - service_id_json: !include schemas/service_id_json.json
  - sexualOrientation_ids_json: !include schemas/sexualOrientation_ids_json.json
  - sexualOrientation_json: !include schemas/sexualOrientation_json.json
  - sexualOrientation_id_json: !include schemas/sexualOrientation_id_json.json
  - site_id_json: !include schemas/site_id_json.json
  - site_ids_json: !include schemas/site_ids_json.json
  - site_json : !include schemas/site_json.json
  - worstHousingSituation_ids_json: !include schemas/worstHousingSituation_ids_json.json
  - youthCriticalIssues_ids_json: !include schemas/youthCriticalIssues_ids_json.json
  - project_id_json: !include schemas/project_id_json.json
  - project_ids_json: !include schemas/project_ids_json.json
  - projects_json: !include schemas/projects_json.json
  - veteranInfo_json: !include schemas/veteranInfo_json.json
  - rhybcpStatus_json: !include schemas/rhybcpStatus_json.json
  - pathStatus_json: !include schemas/pathStatus_json.json
  - pathStatus_ids_json: !include schemas/path_status_ids_json.json
  - pathStatus_id_json: !include schemas/pathStatus_id_json.json
  - percentAmi_json: !include schemas/percentAmi_json.json
  - schoolStatus_json: !include schemas/schoolStatus_json.json
  - service_json: !include schemas/service_json.json
  - youthCriticalIssues_json: !include schemas/youthCriticalIssues_json.json
  - worstHousingSituation_json: !include schemas/worstHousingSituation_json.json
  - sexualOrientation_json.json: !include schemas/sexualOrientation_json.json
  - exit_housing_assessment_id_json: !include schemas/exit_housing_assessment_id_json.json
  - exit_housing_assessment_ids_json: !include schemas/exit_housing_assessment_ids_json.json
  - exit_housing_assessment_json: !include schemas/exit_housing_assessment_json.json
  - exit_json: !include schemas/exit_json.json
  - exit_plans_actions_id_json: !include schemas/exit_plans_actions_id_json.json
  - exit_plans_actions_ids_json: !include schemas/exit_plans_actions_ids_json.json
  - exit_plans_actions_json: !include schemas/exit_plans_actions_json.json
  - family_reunification_id_json: !include schemas/family_reunification_id_json.json
  - family_reunification_ids_json: !include schemas/family_reunification_ids_json.json
  - family_reunification_json: !include schemas/family_reunification_json.json
  - formerWardChildWelfare_id_json: !include schemas/formerwardchildwelfares_id_json.json
  - formerWardChildWelfare_ids_json: !include schemas/formerwardchildwelfares_ids_json.json
  - formerWardChildWelfare_json: !include schemas/formerwardchildwelfares_json.json
  - former_ward_juvenile_justices_id_json: !include schemas/formerwardjuvenilejustices_id_json.json
  - former_ward_juvenile_justices_ids_json: !include schemas/formerwardjuvenilejustices_ids_json.json
  - former_ward_juvenile_justices_json: !include schemas/formerwardjuvenilejustices_json.json
  - housingAssessmentDisposition_id_json: !include schemas/housingAssessmentDisposition_id_json.json
  - housing_assessment_disposition_ids_json: !include schemas/housing_assessment_disposition_ids_json.json
  - housingAssessmentDisposition_json: !include schemas/housingAssessmentDisposition_json.json
  - project_completion_statuses_id_json: !include schemas/projectcompletionstatuses_id_json.json
  - project_completion_statuses_ids_json: !include schemas/projectcompletionstatuses_ids_json.json
  - project_completion_statuses_json: !include schemas/projectcompletionstatuses_json.json
  - lastGradeCompleted_json: !include schemas/lastGradeCompleted_json.json
  - lastGradeCompleted_ids_json: !include schemas/lastGradeCompleted_ids_json.json
  - lastGradeCompleted_id_json: !include schemas/lastGradeCompleted_id_json.json
  - veteranInfo_ids_json: !include  schemas/veteranInfo_ids_json.json
  - veteranInfo_id_json: !include schemas/veteranInfo_id_json.json
  - project_json: !include schemas/project_json.json
  - youthCriticalIssues_id_json  : !include schemas/youthCriticalIssues_id_json.json
  - percentAmi_id_json: !include schemas/percentAmi_id_json.json
securitySchemes:
  - oauth_2_0:
      settings:
        accessTokenUri: http://examplehmis.com/1/oauth2/token
        authorizationUri: http://examplehmis.com/1/oauth2/authorize
        scopes: [user, administrator]
        authorizationGrants: [ owner ] #resource owner password credential grant used, since the client doesn't own the data (https://tools.ietf.org/html/rfc6749)
      description: |
        The HMIS API supports OAuth 2.0 for authenticating all API requests.
      type: OAuth 2.0
      describedBy:
        headers:
          Authorization:
              description: |
                 Used to send a valid OAuth 2 access token. Do not use
                 an "access_token" query string parameter.
              type: string
        responses:
          401:
              description: |
                  Bad or expired token. This can happen if the user or the HMIS
                  revoked or expired an access token. To fix, you should re-
                  authenticate the user.
          403:
              description: |
                  Bad OAuth request (wrong consumer key, bad nonce, expired
                  timestamp...). Unfortunately, re-authenticating the user won't help here.
resourceTypes:
  -  collection:
      description: "Operations performed on the set of all HMIS <<resourcePathName>> within the system, and for adding a new <<resourcePathName|!singularize>> to the set of <<resourcePathName>> "
      get:
        #securedBy: [oauth_2_0: { scopes: [ user ] } ]
        description: Searches for <<resourcePathName|!singularize>>.  Returns a list of <<resourcePathName|!singularize>> ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.
        queryParameters:
          CreatedAfter:
            description: searches for members of the collection created after (inclusive) a particular date
            type: "date"
            example: 10-11-2011
          CreatedBefore:
            description: searches for members of the collection created before (inclusive) a particular date
            type: "date"
            example: 10-11-2012
          UpdatedAfter:
            description: searches for members of the collection updated after (inclusive) a particular date
            type: "date"
            example: 10-11-2011
          UpdatedBefore:
            description: searches for members of the collection updated before (inclusive) a particular date
            type: "date"
            example: 10-11-2012
        responses:
          200:
            description: OK – Everything is working.
            body:
              application/json:
                schema: <<schema_json>>
          400:
            description: Bad Request – The request was invalid or cannot be served.
          403:
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          500:
            description: 500 – Internal Server Error
      post:
        description: |
          Add a <<resourcePathName|!singularize>>
        body:
          application/json:
            schema: <<schema_json>>
        responses:
          201:
            description: OK - New resource has been created.
            body:
              application/json:
                schema: <<id_schema_json>>
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401:
            description: Unauthorized – The request requires user authentication.
          403:
            description: Forbidden – The server understood the request, but is refusing it or access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          422:
            description: Unprocessable Entity - Request body is incorrect.
          500:
            description: 500 – Internal Server Error.
  -  member:
      get:
        description: Gets a <<resourcePathName|!singularize>> using a URI resource parameter/ID.
        responses:
          200:
            description: OK – Everything is working.
            body:
              application/json:
                schema: <<schema_json>>
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401:
            description: Unauthorized – The request requires an user authentication.
          403:
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          500:
            description: Internal Server Error
      put:
        description: Updates a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
        body:
          application/json:
            schema: <<schema_json>>
        responses:
          200:
            description: OK – Everything is working.
          304:
            description: Not Modified – The client can use cached data.
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401:
            description: Unauthorized – The request requires a user.
          403:
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          500:
            description: Internal Server Error.
      delete:
        description: Deletes a specific <<resourcePathName|!singularize>> specified by the URI resource parameter/ID.
        responses:
          204:
            description: OK – The resource was successfully deleted.
          400:
            description: Bad Request – The request was invalid or cannot be served.
          401:
            description: Unauthorized – The request requires user authentication.
          403:
            description: Forbidden – The server understood the request, but is refusing it or the access is not allowed.
          404:
            description: Not found – There is no resource behind the URI.
          500:
            description: Internal Server Error.
/clients/{clientId}/consentmessages:
  displayName: Consent Message
  get:
    description: Gets a list of consent messages for the specified client.
    responses:
      200:
        body:
          example : |
            {
              "oAuthMessageGroups": {
                "oAuthMessageGroup": [
                  {
                    "consentMessage": "Read your basic account information",
                    "detailedConsentMessageExists": "false",
                    "oAuthMessageItems": {
                      "oAuthMessageItem": {
                        "consentMessage": "Read your account id, first name, middle name and last name",
                        "detailedConsentMessageExists": "false"
                      }
                    }
                  },
                  {
                    "consentMessage": "read information associated with your account",
                    "oAuthMessageItems": {
                      "oAuthMessageItem": [
                        {
                          "consentMessage": "Sample consent message",
                          "detailedConsentMessageExists": "false"
                        },
                        {
                          "consentMessage": "sample consent message",
                          "detailedConsentMessageExists": "false"
                        }
                      ]
                    }
                  }
                ]
              }
            }
      404 :
        body:
          example : |
            {
              "errors": {
                "error": {
                  "code": "CLIENT_NOT_FOUND",
                  "message": "the specified client is not found"
                }
              }
            }
/clients/{clientId}/detailedconsentmessages:
  get:
    description:
      Gets a list of detailed consent messages for the specified client.
    responses:
      200:
        body:
          example: |
                  {
                    "oAuthMessageGroups": {
                      "oAuthMessageGroup": {
                        "consentMessage": "Consent message for the API",
                        "detailedConsentMessage": "some detailed consent message",
                        "oAuthMessageItems": {
                          "oAuthMessageItem": { "detailedConsentMessage": "This is the detailed consent message" }
                        }
                      }
                    }
                  }
      404:
        body:
          example: |
                    {
                      "errors": {
                        "error": {
                          "code": "CLIENT_NOT_FOUND",
                          "message": "the specified client (trusted App) is not found"
                        }
                      }
                    }
/clients:
  type: {
    collection: {
        id_schema_json: client_id_json,
        schema_json:  client_json
    }
  }
  get:
    queryParameters:
      FirstName:
        type: "string"
        example: "Bill"
      MiddleName:
        type: "string"
        example: Frances
      LastName:
        type: "string"
        example: Smith
      DOB:
        type: "date"
        example: 10-11-2012
    responses:
      200:
        body:
          application/json:
            example: !include examples/get_all_clients_json_resp.json
            schema: client_ids_json
  post:
    body:
      application/json:
        example: |
            {
               "client" :
                       {
                        "clientId": "717661f4-eaa3-4298-8739-789ab8a1f3d1",
                        "firstName": " FirstName",
                        "middleName": "Middle Name",
                        "lastName": "LAST NAME",
                        "nameSuffix": "NS",
                        "nameDataQuality": "1",
                        "ssn": "123-45-6789",
                        "ssnDataQuality": "1",
                        "dob": 1458035236115,
                        "dobDataQuality": "1",
                        "race": "1",
                        "ethnicity": "1",
                        "gender": "1",
                        "otherGender": "Test      ",
                        "sourceSystemId":"ssid",
                         "phoneNumber":"1-541-754-3010",
                            "emailAddress":"Jeanette@gmail.com"
                  }
            }
        schema: client_json
    responses:
      201:
        description: Returns the ID of the newly created client.
        body:
          application/json:
            schema: client_id_json
            example: |
              {"client": {"clientId": "717661f4-eaa3-4298-8739-789ab8a1f3d1"}}
  /{client_id}:
    uriParameters:
      client_id:
        displayName: Client Identifier
        type: string
        example: ADBC1111211111114111111111D1111V
    type:
      member:
        schema_json:  client_json
    get:
      responses:
        200:
          body:
            application/json:
              example: !include examples/get_client_json_resp.json
    /enrollments:
      type: {
        collection: {
            id_schema_json: enrollment_id_json,
            schema_json:  enrollment_json
        }
      }
      description: Work with enrollments for a particular client.
      get:
        description: Fetches all the enrollment ids for a given client, or a subset of them, if a query parameter is used.
        #securedBy: [oauth_2_0: { scopes: [ user ] } ]
        queryParameters:
        responses:
          200:
            body:
              application/json:
                example: !include examples/get_all_enrollments_json_resp.json
                schema: enrollment_ids_json
      post:
        description: Adds an enrollment for a given client.
      /{enroll_id}:
        type:
          member:
            schema_json:  enrollment_json
        description: Work with a specific enrollment for a particular client.
        uriParameters:
          enroll_id:
            displayName: Enrollment Identifier
            type: string
            example: ADBC1111211111114111111111D1111V
        get:
          description: Fetches one specific enrollment for a given client.
        put:
          description: Updates one specific enrollment for a specific client.
          body:
            application/json:
              example: !include examples/put_enrollment_json_req.json
        delete:
          description: Deletes one specific enrollment for a specific client.
        /commercialsexualexploitations:
          type: {
            collection: {
                id_schema_json: commercialSexualExploitation_id_json,
                schema_json:  commercialSexualExploitation_json
              }
            }
          description: Work with commercialSexualExploitations for a particular enrollment.
          get:
            description: Fetches all the commercialSexualExploitation ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_commercial_sexual_exploitations_json_resp.json
                    schema: commercialSexualExploitation_ids_json
          post:
            description: Adds an commercialSexualExploitation for a given enrollment.
          /{commercial_sexual_exploitation_id}:
            type:
              member:
                schema_json:  commercialSexualExploitation_json
            description: Work with a specific commercialSexualExploitation for a particular enrollment.
            uriParameters:
              commercial_sexual_exploitation_id:
                displayName: commercialSexualExploitation Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific commercialSexualExploitation for a given enrollment.
            put:
              description: Updates one specific commercialSexualExploitation for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_commercial_sexual_exploitation_json_req.json
            delete:
              description: Deletes one specific commercial_sexual_exploitation for a specific enrollment
        /dateofengagements:
          type: {
            collection: {
                id_schema_json: dateOfEngagement_id_json,
                schema_json:  dateOfEngagement_json
            }
          }
          description: Work with dateOfEngagements for a particular enrollment.
          get:
            description: Fetches all the dateOfEngagement ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_date_of_engagements_json_resp.json
                    schema: dateOfEngagement_ids_json
          post:
            description: Adds an dateOfEngagement for a given enrollment.
          /{date_of_engagement_id}:
            type:
              member:
                schema_json:  dateOfEngagement_json
            description: Work with a specific dateOfEngagement for a particular enrollment.
            uriParameters:
              date_of_engagement_id:
                displayName: date_of_engagement Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific dateOfEngagement for a given enrollment.
            put:
              description: Updates one specific dateOfEngagement for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_date_of_engagement_json_req.json
            delete:
              description: Deletes one specific dateOfEngagement for a specific enrollment
        /disabilities:
          type: {
            collection: {
                id_schema_json: disabilities_id_json,
                schema_json: disabilities_id_json
              }
            }
          description: Work with disabilitieses for a particular enrollment.
          get:
            description: Fetches all the disabilities ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_disabilities_json_resp.json
                    schema: disabilities_ids_json
          post:
            description: Adds an disabilities for a given enrollment.
          /{disabilities_id}:
            type:
              member:
                schema_json:  disabilities_ids_json
            description: Work with a specific disabilities for a particular enrollment.
            uriParameters:
              disabilities_id:
                displayName: disabilities Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific disabilities for a given enrollment.
            put:
              description: Updates one specific disabilities for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_disabilities_json_req.json
                  schema: disabilities_json
            delete:
              description: Deletes one specific disabilities for a specific enrollment
        /domesticviolences:
          type:
            collection:
              id_schema_json: domesticViolences_ids_json
              schema_json: domesticViolences_json
          description: Work with domesticViolenceses for a particular enrollment.
          get:
            description: Fetches all the domesticViolences ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_domestic_violences_json_resp.json
                    schema: domesticViolences_ids_json
          post:
            description: Adds an domesticViolences for a given enrollment.
          /{domestic_violences_id}:
            type:
              member:
                schema_json:  domesticViolences_json
            description: Work with a specific domesticViolences for a particular enrollment.
            uriParameters:
              domestic_violences_id:
                displayName: domesticViolences Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific domestic_violences for a given enrollment.
            put:
              description: Updates one specific domesticViolences for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_domestic_violence_json_req.json
            delete:
              description: Deletes one specific domesticViolences for a specific enrollment
        /employments:
          type: {
            collection: {
                id_schema_json: employment_id_json,
                schema_json:  employment_json
              }
            }
          description: Work with employments for a particular enrollment.
          get:
            description: Fetches all the employment ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_employments_json_resp.json
                    schema: employment_ids_json
          post:
            description: Adds an employment for a given enrollment.
          /{employment_id}:
            type:
              member:
                schema_json:  employment_json
            description: Work with a specific employment for a particular enrollment.
            uriParameters:
              employment_id:
                displayName: employment Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific employment for a given enrollment.
            put:
              description: Updates one specific employment for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_employment_json_req.json
            delete:
              description: Deletes one specific employment for a specific enrollment
        /enrollmentcocs:
          type:
            collection:
                id_schema_json: enrollment_coc_id_json
                schema_json:  enrollment_coc_json
          /{enrollment_coc_id}:
            get:
              body:
                application/json:
        /exits:
          type: {
            collection: {
                id_schema_json: exit_id_json,
                schema_json:  exit_json
            }
          }
          description: Work with exits for a particular enrollment.
          get:
            description: Fetches all the exit ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_exits_json_resp.json
                    schema: exit_ids_json
          post:
            description: Adds an exit for a given enrollment.
          /{exit_id}:
            type:
              member:
                schema_json:  exit_json
            description: Work with a specific exit for a particular enrollment.
            uriParameters:
              exit_id:
                displayName: exit Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific exit for a given enrollment.
            put:
              description: Updates one specific exit for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_exit_json_req.json
            delete:
              description: Deletes one specific exit for a specific enrollment
            /connectionwithsoars:
              type: {
                collection: {
                  id_schema_json: connection_with_soar_id_json,
                  schema_json:  connection_with_soar_json
                      }
                    }
              description: Work with connection_with_soars for a particular exit.
              get:
                description: Fetches all the connection_with_soar ids for a given exit, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:
                        application/json:
                          example: !include examples/get_all_connection_with_soars_json_resp.json
                          schema: connection_with_soar_ids_json
              post:
                description: Adds an connection_with_soar for a given exit.
              /{connection_with_soar_id}:
                type:
                  member:
                    schema_json: connection_with_soar_json
                description: Work with a specific connection_with_soar for a particular exit.
                uriParameters:
                  connection_with_soar_id:
                    displayName: connection_with_soar identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific connection_with_soar for a given exit
                put:
                  description: Updates one specific connection_with_soar for a given exit
                  body:
                    application/json:
                      example: !include examples/put_connection_with_soar_json_req.json
                delete:
                  description: Deletes one specific connection_with_soar for a specific exit
            /exithousingassessments:
              type: {
                collection: {
                  id_schema_json: exit_housing_assessment_id_json,
                  schema_json:  exit_housing_assessment_json
                      }
                    }
              description: Work with exit_housing_assessments for a particular exit.
              get:
                description: Fetches all the exit_housing_assessment ids for a given exit, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:
                        application/json:
                          example: !include examples/get_all_exit_housing_assessments_json_resp.json
                          schema: exit_housing_assessment_ids_json
              post:
                description: Adds an exit_housing_assessment for a given exit.
              /{exit_housing_assessment_id}:
                type:
                  member:
                    schema_json: exit_housing_assessment_json
                description: Work with a specific exit_housing_assessment for a particular exit.
                uriParameters:
                  exit_housing_assessment_id:
                    displayName: exit_housing_assessment identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific exit_housing_assessment for a given exit
                put:
                  description: Updates one specific exit_housing_assessment for a given exit
                  body:
                    application/json:
                      example: !include examples/put_exit_housing_assessment_json_req.json
                delete:
                  description: Deletes one specific exit_housing_assessment for a specific exit.
            /exitplansactionses:
              type: {
                collection: {
                  id_schema_json: exit_plans_actions_id_json,
                  schema_json:  exit_plans_actions_json
                      }
                    }
              description: Work with exit_plans_actionses for a particular exit.
              get:
                description: Fetches all the exit_plans_actions ids for a given exit, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:
                        application/json:
                          example: !include examples/get_all_exit_plans_actionses_json_resp.json
                          schema: exit_plans_actions_ids_json
              post:
                description: Adds an exit_plans_actions for a given exit.
              /{exit_plans_actions_id}:
                type:
                  member:
                    schema_json: exit_plans_actions_json
                description: Work with a specific exit_plans_actions for a particular exit.
                uriParameters:
                  exit_plans_actions_id:
                    displayName: exit_plans_actions identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific exit_plans_actions for a given exit
                put:
                  description: Updates one specific exit_plans_actions for a given exit
                  body:
                    application/json:
                      example: !include examples/put_exit_plans_actions_json_req.json
                delete:
                  description: Deletes one specific exit_plans_actions for a specific exit
            /familyreunifications:
              type: {
                collection: {
                  id_schema_json: family_reunification_id_json,
                  schema_json:  family_reunification_json
                      }
                    }
              description: Work with family_reunifications for a particular exit.
              get:
                description: Fetches all the family_reunification ids for a given exit, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:
                        application/json:
                          example: !include examples/get_all_family_reunifications_json_resp.json
                          schema: family_reunification_ids_json
              post:
                description: Adds an family_reunification for a given exit.
              /{family_reunification_id}:
                type:
                  member:
                    schema_json: family_reunification_json
                description: Work with a specific family_reunification for a particular exit.
                uriParameters:
                  family_reunification_id:
                    displayName: family_reunification identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific family_reunification for a given exit
                put:
                  description: Updates one specific family_reunification for a given exit
                  body:
                    application/json:
                      example: !include examples/put_family_reunification_json_req.json
                delete:
                  description: Deletes one specific family_reunification for a specific exit.
            /housingassessmentdispositions:
              type: {
                collection: {
                  id_schema_json: housingAssessmentDisposition_id_json,
                  schema_json:  housingAssessmentDisposition_json
                      }
                    }
              description: Work with housing_assessment_dispositions for a particular client.
              get:
                description: Fetches all the housing_assessment_disposition ids for a given client, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:
                        application/json:
                          example: !include examples/get_all_housing_assessment_dispositions_json_resp.json
                          schema: housing_assessment_disposition_ids_json
              post:
                description: Adds an housing_assessment_disposition for a given exit.
              /{housing_assessment_disposition_id}:
                type:
                  member:
                    schema_json: housingAssessmentDisposition_json
                description: Work with a specific housing_assessment_disposition for a particular exit.
                uriParameters:
                  housing_assessment_disposition_id:
                    displayName: housing_assessment_disposition identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific housing_assessment_disposition for a given exit
                put:
                  description: Updates one specific housing_assessment_disposition for a given exit
                  body:
                    application/json:
                      example: !include examples/put_housing_assessment_disposition_json_req.json
                delete:
                  description: Deletes one specific housing_assessment_disposition for a specific exit.
            /projectcompletionstatuses:
              type: {
                collection: {
                  id_schema_json: project_completion_statuses_id_json,
                  schema_json:  project_completion_statuses_json
                }
              }
              description: Work with project_completion_statuses for a particular exit.
              get:
                description: Fetches all the project_completion_status ids for a given exit, or a subset of them, if a query parameter is used.
                #securedBy: [oauth_2_0: { scopes: [ user ] } ]
                queryParameters:
                responses:
                    200:
                      body:
                        application/json:
                          example: !include examples/get_all_project_completion_statuses_json_resp.json
                          schema: project_completion_statuses_ids_json
              post:
                description: Adds an project_completion_status for a given exit.
              /{project_completion_status_id}:
                type:
                  member:
                    schema_json: project_completion_statuses_json
                description: Work with a specific project_completion_status for a particular exit.
                uriParameters:
                  project_completion_status_id:
                    displayName: project_completion_status identifier
                    type: string
                    example: ADBC1111211111114111111111D1111V
                get:
                  description: Fetches one specific project_completion_status for a given exit
                put:
                  description: Updates one specific project_completion_status for a given exit
                  body:
                    application/json:
                      example: !include examples/put_project_completion_status_json_req.json
                delete:
                  description: Deletes one specific project_completion_status for a specific exit
        /formerwardchildwelfares:
          type: {
            collection: {
                id_schema_json: formerWardChildWelfare_id_json,
                schema_json:  formerWardChildWelfare_json
              }
            }
          description: Work with ormerWardChildWelfares for a particular enrollment.
          get:
            description: Fetches all the formerWardChildWelfare ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_former_ward_child_welfares_json_resp.json
                    schema: formerWardChildWelfare_ids_json
          post:
            description: Adds an formerWardChildWelfare for a given enrollment.
          /{former_ward_child_welfare_id}:
            type:
              member:
                schema_json:  formerWardChildWelfare_json
            description: Work with a specific formerWardChildWelfare for a particular enrollment.
            uriParameters:
              former_ward_child_welfare_id:
                displayName: formerWardChildWelfare Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific formerWardChildWelfare for a given enrollment.
            put:
              description: Updates one specific formerWardChildWelfare for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_former_ward_child_welfare_json_req.json
            delete:
              description: Deletes one specific formerWardChildWelfare for a specific enrollment
        /formerwardjuvenilejustices:
          type: {
            collection: {
                id_schema_json: former_ward_juvenile_justices_id_json,
                schema_json: former_ward_juvenile_justices_json
              }
            }
          description: Work with formerWardJuvenileJustices for a particular enrollment.
          get:
            description: Fetches all the formerWardJuvenileJustice ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_former_ward_juvenile_justices_json_resp.json
                    schema: former_ward_juvenile_justices_ids_json
          post:
            description: Adds a formerWardJuvenileJustice for a given enrollment.
          /{former_ward_juvenile_justices_id}:
            type:
              member:
                schema_json: former_ward_juvenile_justices_json
            description: Work with a specific formerWardJuvenileJustice for a particular enrollment.
            uriParameters:
              former_ward_juvenile_justices_id:
                displayName: formerWardJuvenileJustice Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific formerWardJuvenileJustice for a given enrollment.
            put:
              description: Updates one specific formerWardJuvenileJustice for a specific enrollment.
              body:
                application/json:

            delete:
              description: Deletes one specific formerWardJuvenileJustice for a specific enrollment
        /healthinsurances:
          type: {
            collection: {
                id_schema_json: healthInsurance_id_json,
                schema_json:  healthInsurance_json
              }
            }
          description: Work with healthInsurances for a particular enrollment.
          get:
            description: Fetches all the healthInsurance ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_health_insurances_json_resp.json
                    schema: healthInsurance_ids_json
          post:
            description: Adds an healthInsurance for a given enrollment.
          /{health_insurance_id}:
            type:
              member:
                schema_json:  healthInsurance_json
            description: Work with a specific healthInsurance for a particular enrollment.
            uriParameters:
              health_insurance_id:
                displayName: healthInsurance Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific healthInsurance for a given enrollment.
            put:
              description: Updates one specific healthInsurance for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_health_insurance_json_req.json
            delete:
              description: Deletes one specific healthInsurance for a specific enrollment
        /healthstatuses:
          type: {
            collection: {
                id_schema_json: healthStatus_id_json,
                schema_json:  healthStatus_json
              }
            }
          description: Work with healthStatuses for a particular enrollment.
          get:
            description: Fetches all the healthStatus ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_health_statuses_json_resp.json
                    schema: healthStatus_ids_json
          post:
            description: Adds an healthStatus for a given enrollment.
          /{health_status_id}:
            type:
              member:
                schema_json:  healthStatus_json
            description: Work with a specific healthStatus for a particular enrollment.
            uriParameters:
              health_status_id:
                displayName: healthStatus Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific health_status for a given enrollment.
            put:
              description: Updates one specific health_status for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_health_status_json_req.json
            delete:
              description: Deletes one specific healthStatus for a specific enrollment
        /incomeandsources:
          type: {
            collection: {
                id_schema_json: incomeAndSource_id_json,
                schema_json:  incomeAndSource_json
              }
            }
          description: Work with incomeAndSourceses for a particular enrollment.
          get:
            description: Fetches all the incomeAndSource ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_income_and_sources_json_resp.json
                    schema: income_and_source_ids_json
          post:
            description: Adds an incomeAndSource for a given enrollment.
          /{income_and_source_id}:
            type:
              member:
                schema_json:  incomeAndSource_json
            description: Work with a specific incomeAndSource for a particular enrollment.
            uriParameters:
              income_and_source_id:
                displayName: incomeAndSource Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific incomeAndSource for a given enrollment.
            put:
              description: Updates one specific incomeAndSource for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_income_and_source_json_req.json
            delete:
              description: Deletes one specific incomeAndSource for a specific enrollment
        /lastgradecompleteds:
          type: {
            collection: {
                id_schema_json: lastGradeCompleted_id_json,
                schema_json:  lastGradeCompleted_json
              }
            }
          description: Work with lastGradeCompleteds for a particular enrollment.
          get:
            description: Fetches all the lastGradeCompleted ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_last_grade_completeds_json_resp.json
                    schema: lastGradeCompleted_ids_json
          post:
            description: Adds an lastGradeCompleted for a given enrollment.
          /{last_grade_completed_id}:
            type:
              member:
                schema_json:  lastGradeCompleted_json
            description: Work with a specific lastGradeCompleted for a particular enrollment.
            uriParameters:
              last_grade_completed_id:
                displayName: lastGradeCompleted Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific lastGradeCompleted for a given enrollment.
            put:
              description: Updates one specific lastGradeCompleted for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_last_grade_completed_json_req.json
            delete:
              description: Deletes one specific lastGradeCompleted for a specific enrollment
        /lastpermanentaddresses:
          type: {
            collection: {
                id_schema_json: lastPermanentAddress_id_json,
                schema_json:  lastPermanentAddress_json
              }
            }
          description: Work with lastPermanentAddresses for a particular enrollment.
          get:
            description: Fetches all the lastPermanentAddress ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_last_permanent_addresses_json_resp.json
                    schema: lastPermanentAddress_ids_json
          post:
            description: Adds an lastPermanentAddress for a given enrollment.
          /{last_permanent_address_id}:
            type:
              member:
                schema_json:  lastPermanentAddress_json
            description: Work with a specific lastPermanentAddress for a particular enrollment.
            uriParameters:
              last_permanent_address_id:
                displayName: lastPermanentAddress Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific lastPermanentAddress for a given enrollment.
            put:
              description: Updates one specific lastPermanentAddress for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_last_permanent_address_json_req.json
            delete:
              description: Deletes one specific lastPermanentAddress for a specific enrollment
        /medicalassistances:
          type: {
            collection: {
                id_schema_json: medicalAssistance_id_json,
                schema_json:  medicalAssistance_json
              }
            }
          description: Work with medicalAssistances for a particular enrollment.
          get:
            description: Fetches all the medicalAssistance ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_medical_assistances.json
                    schema: medicalAssistance_ids_json
          post:
            description: Adds an medicalAssistance for a given enrollment.
          /{medical_assistance_id}:
            type:
              member:
                schema_json:  medicalAssistance_json
            description: Work with a specific medicalAssistance for a particular enrollment.
            uriParameters:
              medical_assistance_id:
                displayName: medicalAssistance Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific medicalAssistance for a given enrollment.
            put:
              description: Updates one specific medicalAssistance for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_medical_assistance_json_req.json
            delete:
              description: Deletes one specific medicalAssistance for a specific enrollment
        /noncashbenefits:
          type: {
            collection: {
                id_schema_json: nonCashBenefit_id_json,
                schema_json:  nonCashBenefit_json
              }
            }
          description: Work with noncashBenefits for a particular enrollment.
          get:
            description: Fetches all the nonCashBenefit ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_noncash_benefits_json_resp.json
                    schema: nonCashBenefit_ids_json
          post:
            description: Adds an nonCashBenefit for a given enrollment.
          /{noncash_benefit_id}:
            type:
              member:
                schema_json:  nonCashBenefit_json
            description: Work with a specific nonCashBenefit for a particular enrollment.
            uriParameters:
              noncash_benefit_id:
                displayName: nonCashBenefit Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific nonCashBenefit for a given enrollment.
            put:
              description: Updates one specific nonCashBenefit for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_noncash_benefit_json_req.json
            delete:
              description: Deletes one specific noncashBenefit for a specific enrollment
        /referralsources:
          type: {
            collection: {
                id_schema_json: referralSource_id_json,
                schema_json:  referralSources_json
              }
            }
          description: Work with referralSources for a particular enrollment.
          get:
            description: Fetches all the referralSources ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_referral_sources_json_resp.json
                    schema: referralSources_ids_json
          post:
            description: Adds a referralSources for a given enrollment.
          /{referral_sources_id}:
            type:
              member:
                schema_json:  referralSources_json
            description: Work with a specific referralSources for a particular enrollment.
            uriParameters:
              referral_sources_id:
                displayName: referralSources Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific referralSources for a given enrollment.
            put:
              description: Updates one specific referralSources for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_referral_source_json_req.json
            delete:
              description: Deletes one specific referralSources for a specific enrollment
        /residentialmoveins:
          type: {
            collection: {
                id_schema_json: residentialMoveIn_id_json,
                schema_json:  residentialMoveIn_json
              }
            }
          description: Work with residentialMoveIins for a particular enrollment.
          get:
            description: Fetches all the residentialMoveIn ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_residential_move_ins_json_resp.json
                    schema: residentialMoveIn_ids_json
          post:
            description: Adds an residentialMoveIin for a given enrollment.
          /{residential_move_in_id}:
            type:
              member:
                schema_json:  residentialMoveIn_json
            description: Work with a specific residentialMoveIn for a particular enrollment.
            uriParameters:
              residential_move_in_id:
                displayName: residentialMoveIn Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific residentialMoveIn for a given enrollment.
            put:
              description: Updates one specific residentialMoveIn for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_residential_move_in_json_req.json
            delete:
              description: Deletes one specific residentialMoveIn for a specific enrollment
        /rhybcpstatuses:
          type: {
            collection: {
                id_schema_json: rhybcpStatus_id_json,
                schema_json:  rhybcpStatus_json
              }
            }
          description: Work with rhybcpStatuses for a particular enrollment.
          get:
            description: Fetches all the rhybcpStatus ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_rhybcp_statuses_json_resp.json
                    schema: rhybcpStatus_ids_json
          post:
            description: Adds an rhybcpStatus for a given enrollment.
          /{rhybcp_status_id}:
            type:
              member:
                schema_json:  rhybcpStatus_json
            description: Work with a specific rhybcpStatus for a particular enrollment.
            uriParameters:
              rhybcp_status_id:
                displayName: rhybcp_status Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific rhybcpStatus for a given enrollment.
            put:
              description: Updates one specific rhybcpStatus for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_rhybcp_status_json_req.json
            delete:
              description: Deletes one specific rhybcpStatus for a specific enrollment
        /pathstatuses:
          type: {
            collection: {
                id_schema_json: pathStatus_id_json,
                schema_json:  pathStatus_json
              }
            }
          description: Work with pathStatuses for a particular enrollment.
          get:
            description: Fetches all the pathStatus ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_path_statuses_json_resp.json
                    schema: path_status_ids_json
          post:
            description: Adds an pathStatus for a given enrollment.
          /{path_status_id}:
            type:
              member:
                schema_json:  pathStatus_json
            description: Work with a specific pathStatus for a particular enrollment.
            uriParameters:
              path_status_id:
                displayName: pathStatus Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific pathStatus for a given enrollment.
            put:
              description: Updates one specific pathStatus for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_path_status_json_req.json
            delete:
              description: Deletes one specific path_status for a specific enrollment
        /percentamis:
          type: {
            collection: {
                id_schema_json: percentAmi_id_json,
                schema_json:  percentAmi_json
              }
            }
          description: Work with percent_amis for a particular enrollment.
          get:
            description: Fetches all the percentAmi ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_percent_amis_json_resp.json
                    schema: percent_ami_ids_json
          post:
            description: Adds an percentAmi for a given enrollment.
          /{percent_ami_id}:
            type:
              member:
                schema_json:  percentAmi_json
            description: Work with a specific percentAmi for a particular enrollment.
            uriParameters:
              percent_ami_id:
                displayName: percentAmi Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific percentAmi for a given enrollment.
            put:
              description: Updates one specific percentAmi for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_percent_ami_json_req.json
            delete:
              description: Deletes one specific percentAmi for a specific enrollment
        /schoolstatuses:
          type: {
            collection: {
                id_schema_json: schoolStatus_id_json,
                schema_json:  schoolStatus_json
              }
            }
          description: Work with schoolStatuses for a particular enrollment.
          get:
            description: Fetches all the schoolStatus ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_school_statuses_json_resp.json
                    schema: schoolStatus_ids_json
          post:
            description: Adds an schoolStatus for a given enrollment.
          /{school_status_id}:
            type:
              member:
                schema_json:  schoolStatus_json
            description: Work with a specific schoolStatus for a particular enrollment.
            uriParameters:
              school_status_id:
                displayName: schoolStatus Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific schoolStatus for a given enrollment.
            put:
              description: Updates one specific schoolStatus for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_school_status_json_req.json
            delete:
              description: Deletes one specific schoolStatus for a specific enrollment
        /services:
          type: {
            collection: {
                id_schema_json: service_id_json,
                schema_json:  service_json
              }
            }
          description: Work with services for a particular enrollment.
          get:
            description: Fetches all the service ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_services_json_resp.json
                    schema: service_ids_json
          post:
            description: Adds an service for a given enrollment.
          /{service_id}:
            type:
              member:
                schema_json:  service_json
            description: Work with a specific service for a particular enrollment.
            uriParameters:
              service_id:
                displayName: service Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific service for a given enrollment.
            put:
              description: Updates one specific service for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_service_json_req.json
            delete:
              description: Deletes one specific service for a specific enrollment
        /sexualorientations:
          type: {
            collection: {
                id_schema_json: sexualOrientation_id_json,
                schema_json: sexualOrientation_json
              }
            }
          description: Work with sexualOrientations for a particular enrollment.
          get:
            description: Fetches all the sexualOrientation ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_sexual_orientations_json_resp.json
                    schema: sexualOrientation_ids_json
          post:
            description: Adds an sexualOrientation for a given enrollment.
          /{sexual_orientation_id}:
            type:
              member:
                schema_json:  sexualOrientation_json
            description: Work with a specific sexualOrientation for a particular enrollment.
            uriParameters:
              sexual_orientation_id:
                displayName: sexualOrientation Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific sexualOrientation for a given enrollment.
            put:
              description: Updates one specific sexualOrientation for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_sexual_orientation_json_req.json
            delete:
              description: Deletes one specific sexualOrientation for a specific enrollment
        /worsthousingsituations:
          type: {
            collection: {
                id_schema_json: worstHousingSituation_ids_json,
                schema_json:  worstHousingSituation_json
              }
            }
          description: Work with worstHousingSituations for a particular enrollment.
          get:
            description: Fetches all the worstHousingSituation ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_worst_housing_situations_json_resp.json
                    schema: worstHousingSituation_ids_json
          post:
            description: Adds an worstHousingSituation for a given enrollment.
          /{worst_housing_situation_id}:
            type:
              member:
                schema_json:  worstHousingSituation_json
            description: Work with a specific worstHousingSituation for a particular enrollment.
            uriParameters:
              worst_housing_situation_id:
                displayName: worstHousingSituation Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific worstHousingSituation for a given enrollment.
            put:
              description: Updates one specific worstHousingSituation for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_worst_housing_situation_json_req.json
            delete:
              description: Deletes one specific worstHousingSituation for a specific enrollment
        /youthcriticalissues:
          type: {
            collection: {
                id_schema_json: youthCriticalIssues_id_json,
                schema_json:  youthCriticalIssues_json
              }
            }
          description: Work with youthCriticalIssueses for a particular enrollment.
          get:
            description: Fetches all the youthCriticalIssues ids for a given enrollment, or a subset of them, if a query parameter is used.
            #securedBy: [oauth_2_0: { scopes: [ user ] } ]
            queryParameters:
            responses:
              200:
                body:
                  application/json:
                    example: !include examples/get_all_youth_critical_issues_json_resp.json
                    schema: youthCriticalIssues_ids_json
          post:
            description: Adds an youthCriticalIssues for a given enrollment.
          /{youth_critical_issues_id}:
            type:
              member:
                schema_json:  youthCriticalIssues_json
            description: Work with a specific youthCriticalIssues for a particular enrollment.
            uriParameters:
              youth_critical_issues_id:
                displayName: youthCriticalIssues Identifier
                type: string
                example: ADBC1111211111114111111111D1111V
            get:
              description: Fetches one specific youthCriticalIssues for a given enrollment.
            put:
              description: Updates one specific youthCriticalIssues for a specific enrollment.
              body:
                application/json:
                  example: !include examples/put_youth_critical_issue_json_req.json
            delete:
              description: Deletes one specific youthCriticalIssues for a specific enrollment
    /veteraninfos:
            type: {
              collection: {
                  id_schema_json: veteranInfo_id_json,
                  schema_json:  veteranInfo_json
              }
            }
            description: Work with veteranInfos for a particular client.
            get:
              description: Fetches all the veteranInfo ids for a given client, or a subset of them, if a query parameter is used.
              #securedBy: [oauth_2_0: { scopes: [ user ] } ]
              queryParameters:
              responses:
                200:
                  body:
                    application/json:
                      example: !include examples/get_all_veteran_infos_json_resp.json
                      schema: veteranInfo_ids_json
            post:
              description: Adds an veteranInfo for a given client.
            /{veteran_info_id}:
              type:
                member:
                  schema_json:  veteranInfo_json
              description: Work with a specific veteranInfo for a particular client.
              uriParameters:
                veteran_info_id:
                  displayName: VeteranInfo Identifier
                  type: string
                  example: ADBC1111211111114111111111D1111V
              get:
                description: Fetches one specific veteranInfo for a given client.
              put:
                description: Updates one specific veteranInfo for a specific client.
                body:
                  application/json:
                    example: !include examples/put_veteran_info_json_req.json
              delete:
                description: Deletes one specific veteranInfo for a specific client.
/projects:
  type: {
    collection: {
        id_schema_json: project_id_json,
        schema_json:  project_json
    }
  }
  get:
    queryParameters:
      ProjectName:
        type: "string"
        example: "The Project"
    responses:
      200:
        body:
          application/json:
            example: !include examples/get_all_projects_resp_example.json
            schema: project_ids_json
  post:
    body:
      application/json:
        schema: project_json
        example: !include examples/post_project_req_example.json
    responses:
      200:
        description: Returns the ID of the newly created project.
        body:
          application/json:
            schema: project_id_json
  /{project_id}:
    uriParameters:
      project_id:
        displayName: Project Identifier
        type: string
        example: ADBC11112AD111114111111111D1111V
    type:
      member:
        schema_json:  project_json
    /affiliations:
      type: {
      collection: {
        id_schema_json: affiliation_id_json,
        schema_json:  affiliation_json
       }
      }
      get:
        queryParameters:
        responses:
          200:
            body:
              application/json:
                example: !include examples/get_all_affiliations_resp_example.json
                schema: affiliation_ids_json
      post:
        body:
          application/json:
            schema: affiliation_json
            example: !include examples/post_affiliation_req_example.json
        responses:
          201:
            description: Returns the ID of the newly created affiliation.
            body:
              application/json:
                schema: affiliation_id_json
                example: !include examples/post_affiliation_resp_example.json
      /{affiliation_id}:
        uriParameters:
          affiliation_id:
            displayName: Affiliation Identifier
            type: string
            example: ADBC11112AD111114111111111D1111V
        type:
          member:
            schema_json:  affiliation_json
        get:
          description: Fetches one specific affiliation for a given project.
        put:
          description: Updates one specific affiliation for a specific project.
          body:
            application/json:
              example: !include examples/post_affiliation_req_example.json
        delete:
          description: Deletes one specific affiliation for a specific project.
    /funders:
      type: {
        collection: {
          id_schema_json: funder_id_json,
          schema_json:  funder_json
        }
      }
      get:
        queryParameters:
        responses:
          200:
            body:
              application/json:
                schema: funder_ids_json
      post:
        body:
          application/json:
            schema: funder_json
        responses:
          201:
            description: Returns the ID of the newly created funder.
            body:
              application/json:
                schema: funder_id_json
      /{funder_id}:
        uriParameters:
          funder_id:
            displayName: Funder Identifier
            type: string
            example: ADBC11112AD111114111111111D1111V
        type:
          member:
            schema_json:  funder_json
        get:
          description: Fetches one specific funder for a given project.
        put:
          description: Updates one specific funder for a specific project.
          body:
            application/json:
        delete:
          description: Deletes one specific funder for a specific project
/organizations:
    description: 'Operations performed on the set of all HMIS organizations within the system, and for adding a new organization to the set of organizations '
    type:
      collection:
        id_schema_json: id_organization_json
        schema_json: organization_json
        schema_ids_json: organization_ids_json
        schema_json_example: |-
          {
             "organization":{
                "organizationName":"BBjksdjgjdR",
                "organizationCommonName":"BBR"
             }
          }
        schema_ids_json_example: |-
          {
             "Organizations":{
                "pagination":{
                   "from":0,
                   "returned":16,
                   "total":16,
                   "maximum":30,
                   "sort":{

                   }
                },
                "organizations":[
                   {
                      "organizationId":"81a20cb3-e000-473c-a3e6-cddcba15a02f",
                      "organizationCommonName":"BBR",
                      "organizationName": "BBjksdjgjdR"
                   },
                   {
                      "organizationId":"f6807bb4-fb1e-4ce4-aa28-ba61b2ee4342",
                      "organizationCommonName":"BBR",
                      "organizationName": "BBjksdjgjdR"
                   }
                ]
             }
          }
        id_schema_json_example: |-
          {
             "organization":{
                "organizationId":"8dff4029-09b7-4293-b24b-b077b39ee673",
                "organizationName":"BBjksdjgjdR",
                "organizationCommonName":"BBR"
             }
          }
    get:
      description: 'Searches for organization.  Returns a list of organization ids, based on the query parameters sent.  The query parameters are cumulative, so each additional query parameter narrows the search down further.'
      responses:
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '500':
          description: 500 – Internal Server Error
    post:
      description: |
        Add a organization
      responses:
        '400':
          description: Bad Request – The request was invalid or cannot be served.
        '401':
          description: Unauthorized – The request requires user authentication.
        '403':
          description: 'Forbidden – The server understood the request, but is refusing it or access is not allowed.'
        '404':
          description: Not found – There is no resource behind the URI.
        '422':
          description: Unprocessable Entity - Request body is incorrect.
        '500':
          description: 500 – Internal Server Error.
    '/{organizationid}':
      type:
        member:
          schema_json: organization_json
          schema_id_json: organization_id_json
          schema_id_json_example: |-
            {
               "organization":{
                  "organizationId":"8dff4029-09b7-4293-b24b-b077b39ee673",
                  "organizationCommonName":"BBR"
               }
            }
          schema_json_example: |-
            {
               "organization":{
                  "organizationName":"BBjksdjgjdR",
                  "organizationCommonName":"BBR"
               }
            }
      get:
        description: Gets a organization using a URI resource parameter/ID.
        responses:
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires an user authentication.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error
      put:
        description: Updates a specific organization specified by the URI resource parameter/ID.
        responses:
          '200':
            description: OK – Everything is working.
          '304':
            description: Not Modified – The client can use cached data.
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires a user.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error.
      delete:
        description: Deletes a specific organization specified by the URI resource parameter/ID.
        responses:
          '204':
            description: OK – The resource was successfully deleted.
          '400':
            description: Bad Request – The request was invalid or cannot be served.
          '401':
            description: Unauthorized – The request requires user authentication.
          '403':
            description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed.'
          '404':
            description: Not found – There is no resource behind the URI.
          '500':
            description: Internal Server Error.
      uriParameters:
        organizationid:
          example: ADBC1111211111114111111111D1111V
          type: string
          displayName: organization Identifier
/projects/{projectid}/project_cocs:
  type: {
    collection: {
        id_schema_json: project_coc_id_json,
        schema_json:  project_coc_json
    }
  }
/projects/{projectid}/project_cocs/{project_coc_id}:
    uriParameters:
      project_coc_id:
        displayName: Project CoC Identifier
        type: string
        example: ADBC11112AD111114111111111D1111V
    type:
      member:
        schema_json: project_coc_json

/projects/{projectid}/project_cocs/{project_coc_id}/inventories:
      type: {
        collection: {
            id_schema_json: inventory_id_json,
            schema_json:  inventory_json
        }
      }
/projects/{projectid}/project_cocs/{project_coc_id}/inventories/{inventory_id}:
        uriParameters:
          inventory_id:
            displayName:  Inventory Identifier
            type: string
            example: INVC11112AD111114111111111D1111V
        type:
          member:
            schema_json: inventory_json
/projects/{projectid}/project_cocs/{project_coc_id}/sites:
      type: {
        collection: {
            id_schema_json: site_id_json,
            schema_json:  site_json
        }
      }
/projects/{projectid}/project_cocs/{project_coc_id}/sites/{site_id}:
        uriParameters:
          site_id:
            displayName: Site Identifier
            type: string
            example: ADBC11112AD111114111111111D1111V
        type:
          member:
            schema_json:  site_json
/search/{searchentity}:
  get:
    description: |
          The Search API is optimized to find the specific entity you're looking for (e.g., a client, enrollments, etc.).It's designed to  find the one result you're looking for (or maybe the few results you're looking for). Currently hmislynk supporting search on 'clients'  and 'projects' entities only. Just like searching on Google, you sometimes want to see a few pages of search results so that you can find the item that best meets your needs.  HMISLynk Search API provides up to 50 results for each searh. However, the search results can be limited by the client.
            Note: 1) API currently supports search on client and project entities
                  2) URIs are /search/clients and /search/projects
    queryParameters:
      q:
        description: |
             The search keywords for clients, as well as any qualifiers.Currently supported search fields are first name,middle name,last name,dob,source system id, client's dedup Id and ssn. For search on "date of birth" field the format MM/dd/YYYY should be used for the search keyword. When searched on dedup Id, the API returns the list of all clients (from all the schema years) that has the same dedup Id.

             The seach keywords for projects, as well as any qualifiers. Currenly supported search fields are projectName, projectCommonName, projectId.
      sort:
        description: The sort field. Default- results are sorted by "created date".
        type: string
        example: created date
      order:
        description: The sort order if sort parameter is provided. One of asc or desc. Default- desc.
        type: string
        example: desc
        default: desc
      startIndex:
        description: The start Index from where the search results should be returned. Default - 0
        type: integer
        example: 0
        default: 0
      maxItems:
        description: the number or Items that should be included in the results . Default - 50
        type: integer
        example: 50
        default: 50
      exclude:
         description: |
            Excludes fields from the search.Currently it suppoted value is "ssi" (to exclude source system id) only.
    responses:
      200:
        body:
          description: |
            sample search responses for client and project searches
            {
            "searchResults": {
              "pagination": {
                "total":"2",
                "from": "0",
                "maximum": "50",
                "returned":"2"
              },
              "items": [
                {
                  "clientId": "65e3df62-dd22-4d07-83ef-6858a6322839",
                  "firstName": "Eric",
                  "middleName": "Johnstone",
                  "lastName": "Smith",
                  "nameSuffix": "Jr.",
                  "nameDataQuality": "1",
                  "ssn": "ssn ",
                  "ssnDataQuality": "1",
                  "dob": "1459498034983",
                  "dobDataQuality": "1",
                  "race": "1",
                  "ethnicity": "1",
                  "gender": "1",
                  "otherGender": "Test",
                  "veteranStatus": "8",
                  "phoneNumber":"1-541-754-3010",
                  "emailAddress":"Jeanette@gmail.com",
                  "link":"/hmis-clientapi/rest/v2015/clients/65e3df62-dd22-4d07-83ef-6858a6322839"
                },
                {
                  "clientId": "cf98b9b2-9a77-4133-99a3-b60f05a12ad1",
                  "firstName": "Harold",
                  "middleName": "William",
                  "lastName": "Jones",
                  "nameSuffix": "III ",
                  "nameDataQuality": "1",
                  "ssn": "ssn ",
                  "ssnDataQuality": "1",
                  "dob": "1459498034983",
                  "dobDataQuality": "1",
                  "race": "1",
                  "ethnicity": "1",
                  "gender": "1",
                  "otherGender": "Test",
                  "veteranStatus": "8",
                  "link":"/hmis-clientapi/rest/v2014/clients/cf98b9b2-9a77-4133-99a3-b60f05a12ad1"
                }
              ]
            }
            }

            {
              "searchResults":{
                "pagination":{
                  "from":0,
                  "returned":1,
                  "total":1,
                  "maximum":50,
                  "sort":{
                    "field":"id",
                    "order":"asc"
                  }
                },
                "items":[
                  {
                    "projectId":"066c95d3-c97c-40b9-b8c1-bf12cafdfca4",
                    "projectName":"ProjectName_1459515376900",
                    "projectCommonName":"ProjectCommonName_1459515376900,
                    "continuumProject":0,
                    "projectType":2,
                    "targetPopulation":3,
                    "trackingMethod":0,
                    "schemaYear":2015,
                    "link":"/hmis-clientapi/rest/v2015/projects/066c95d3-c97c-40b9-b8c1-bf12cafdfca4",
                    "projectGroup":"HO0002"
                  }
                ]
              }
            }
/dataelements:
  description: Get all available data elements
  get:
    responses:
      200:
        body:
          application/json:
             example: !include examples/get_all_hmis_type_names.json
             schema: !include schemas/get_all_hmis_type_names.json
  /{name}/values:
    description:  get all values of elements
    get:
      responses:
        200:
          body:
            application/json:
              example: !include examples/get_all_hmis_type_value_of_hmis_type.json
              schema: !include schemas/get_all_hmis_type_value_of_hmis_type.json

/questions:
  description:  get all HUD Questions
  get:
    responses:
      200:
        body:
          application/json:
            example: !include examples/get_all_survey_questions.json
            schema: !include schemas/get_all_survey_questions.json
/questions/{hudQuestionId}:
  description:  get HUD Question by hudQuestionId
  get:
    responses:
      200:
        body:
          application/json:
            example: !include examples/get_survey_question_by_hudid.json
            schema: !include schemas/get_survey_question_by_hudid.json
